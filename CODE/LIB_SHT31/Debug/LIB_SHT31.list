
LIB_SHT31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080073c0  080073c0  000173c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077c4  080077c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080077c4  080077c4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077c4  080077c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c8  080077c8  000177c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080077cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001dc  080079a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080079a8  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0df  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b90  00000000  00000000  0002a2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018188  00000000  00000000  0002d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c202  00000000  00000000  00045430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b49  00000000  00000000  00051632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d817b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a64  00000000  00000000  000d81cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080073a8 	.word	0x080073a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080073a8 	.word	0x080073a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <SHT31_IsConnected>:
 *      Author: nguye
 */

#include "SHT31.h"

HAL_StatusTypeDef SHT31_IsConnected(SHT31_type *sht31){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(sht31->I2cHandle, SHT31_ADDRESS_VSS << 1, 3, HAL_MAX_DELAY);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	2203      	movs	r2, #3
 8000a9a:	2188      	movs	r1, #136	; 0x88
 8000a9c:	f001 fa36 	bl	8001f0c <HAL_I2C_IsDeviceReady>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <SHT31_init>:

HAL_StatusTypeDef SHT31_init(SHT31_type *sht31, I2C_HandleTypeDef *I2cHandle){
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
	sht31->I2cHandle = I2cHandle;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	601a      	str	r2, [r3, #0]
	return SHT31_IsConnected(sht31);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ffe4 	bl	8000a88 <SHT31_IsConnected>
 8000ac0:	4603      	mov	r3, r0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <SHT31_ReadTemperature>:
	  else{
		  return HAL_ERROR;
	  }
}

HAL_StatusTypeDef SHT31_ReadTemperature(SHT31_type *sht31, float *temperatureValue, uint8_t *flagLed){
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	60f8      	str	r0, [r7, #12]
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
	uint16_t data = 0u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	82fb      	strh	r3, [r7, #22]
	if(HAL_I2C_Master_Receive_IT(sht31->I2cHandle, SHT31_ADDRESS_VSS << 1, sht31->I2cHandle, 3) == HAL_OK){
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	2188      	movs	r1, #136	; 0x88
 8000ae6:	f001 f965 	bl	8001db4 <HAL_I2C_Master_Receive_IT>

	}
	return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <HAL_I2C_MasterRxCpltCallback>:
//HAL_StatusTypeDef SHT31_ReadHumihity(SHT31_type *sht31, float *humihityValue);
//HAL_StatusTypeDef SHT31_WriteCMD(SHT31_type *sht31, uint16_t CMD);
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	uint16_t data;
//	if(SHT31_Crc(sht31->tempratureRAW, 2, sht31->tempratureRAW[2]) == HAL_OK){
//		data = (sht31->tempratureRAW[0] << 8) |  sht31->tempratureRAW[1];
//		*temperatureValue = data * (175.0f / 65535) - 45;
//	}
	return HAL_OK;
 8000afc:	bf00      	nop
}
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <SHT31_WriteCMD>:
//		*humihityValue = data * (100.0 / 65535);
//			return HAL_OK;
//		}
//		return HAL_ERROR;
//}
HAL_StatusTypeDef SHT31_WriteCMD(SHT31_type *sht31, uint16_t CMD){
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af02      	add	r7, sp, #8
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	807b      	strh	r3, [r7, #2]
	uint8_t cc[2] = {0};
 8000b12:	2300      	movs	r3, #0
 8000b14:	81bb      	strh	r3, [r7, #12]
	cc[0] = (uint8_t)(CMD >> 8);
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	733b      	strb	r3, [r7, #12]
	cc[1] = (uint8_t)CMD;
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(sht31->I2cHandle, SHT31_ADDRESS_VSS << 1, cc, 2, HAL_MAX_DELAY);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	f107 020c 	add.w	r2, r7, #12
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2302      	movs	r3, #2
 8000b36:	2188      	movs	r1, #136	; 0x88
 8000b38:	f001 f83e 	bl	8001bb8 <HAL_I2C_Master_Transmit>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fb26 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f82a 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f8c6 	bl	8000ce4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000b58:	f000 f86c 	bl	8000c34 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000b5c:	f000 f898 	bl	8000c90 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  while(SHT31_init(&_sht31, &hi2c2) != HAL_OK);
 8000b60:	bf00      	nop
 8000b62:	490c      	ldr	r1, [pc, #48]	; (8000b94 <main+0x4c>)
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <main+0x50>)
 8000b66:	f7ff ffa0 	bl	8000aaa <SHT31_init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1f8      	bne.n	8000b62 <main+0x1a>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <main+0x54>)
 8000b78:	f000 fe86 	bl	8001888 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SHT31_WriteCMD(&_sht31, SHT31_MEASUREMENT_SLOW);
 8000b7c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <main+0x50>)
 8000b82:	f7ff ffc0 	bl	8000b06 <SHT31_WriteCMD>
//	  HAL_Delay(4);
	  SHT31_ReadTemperature(&_sht31, &tem, &flag);
 8000b86:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <main+0x58>)
 8000b88:	4906      	ldr	r1, [pc, #24]	; (8000ba4 <main+0x5c>)
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <main+0x50>)
 8000b8c:	f7ff ff9d 	bl	8000aca <SHT31_ReadTemperature>
	  SHT31_WriteCMD(&_sht31, SHT31_MEASUREMENT_SLOW);
 8000b90:	e7f4      	b.n	8000b7c <main+0x34>
 8000b92:	bf00      	nop
 8000b94:	200001f8 	.word	0x200001f8
 8000b98:	200002c0 	.word	0x200002c0
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	200002cc 	.word	0x200002cc
 8000ba4:	200002d0 	.word	0x200002d0

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b090      	sub	sp, #64	; 0x40
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	2228      	movs	r2, #40	; 0x28
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 fee2 	bl	8004980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 f9a5 	bl	8003f40 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bfc:	f000 f8ca 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2302      	movs	r3, #2
 8000c06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fc12 	bl	8004444 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c26:	f000 f8b5 	bl	8000d94 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3740      	adds	r7, #64	; 0x40
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_I2C2_Init+0x50>)
 8000c3a:	4a13      	ldr	r2, [pc, #76]	; (8000c88 <MX_I2C2_Init+0x54>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_I2C2_Init+0x50>)
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_I2C2_Init+0x58>)
 8000c42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_I2C2_Init+0x50>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_I2C2_Init+0x50>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_I2C2_Init+0x50>)
 8000c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_I2C2_Init+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_I2C2_Init+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <MX_I2C2_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_I2C2_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_I2C2_Init+0x50>)
 8000c72:	f000 fe21 	bl	80018b8 <HAL_I2C_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c7c:	f000 f88a 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200001f8 	.word	0x200001f8
 8000c88:	40005800 	.word	0x40005800
 8000c8c:	000186a0 	.word	0x000186a0

08000c90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_USART1_UART_Init+0x50>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART1_UART_Init+0x4c>)
 8000cc8:	f003 fd54 	bl	8004774 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cd2:	f000 f85f 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000027c 	.word	0x2000027c
 8000ce0:	40013800 	.word	0x40013800

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a23      	ldr	r2, [pc, #140]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0310 	and.w	r3, r3, #16
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a1d      	ldr	r2, [pc, #116]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000d16:	f043 0320 	orr.w	r3, r3, #32
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_GPIO_Init+0xa8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5e:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_GPIO_Init+0xac>)
 8000d60:	f000 fd92 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_GPIO_Init+0xac>)
 8000d7e:	f000 fbff 	bl	8001580 <HAL_GPIO_Init>

}
 8000d82:	bf00      	nop
 8000d84:	3720      	adds	r7, #32
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40011000 	.word	0x40011000

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_MspInit+0x5c>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_MspInit+0x5c>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_MspInit+0x60>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_MspInit+0x60>)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010000 	.word	0x40010000

08000e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_I2C_MspInit+0x94>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d134      	bne.n	8000e8e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_I2C_MspInit+0x98>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <HAL_I2C_MspInit+0x98>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_I2C_MspInit+0x98>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e42:	2312      	movs	r3, #18
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <HAL_I2C_MspInit+0x9c>)
 8000e52:	f000 fb95 	bl	8001580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_I2C_MspInit+0x98>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_I2C_MspInit+0x98>)
 8000e5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_I2C_MspInit+0x98>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2021      	movs	r0, #33	; 0x21
 8000e74:	f000 facb 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e78:	2021      	movs	r0, #33	; 0x21
 8000e7a:	f000 fae4 	bl	8001446 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2022      	movs	r0, #34	; 0x22
 8000e84:	f000 fac3 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000e88:	2022      	movs	r0, #34	; 0x22
 8000e8a:	f000 fadc 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40005800 	.word	0x40005800
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010c00 	.word	0x40010c00

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <HAL_UART_MspInit+0x8c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d131      	bne.n	8000f28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_UART_MspInit+0x90>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a1a      	ldr	r2, [pc, #104]	; (8000f34 <HAL_UART_MspInit+0x90>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_UART_MspInit+0x90>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_UART_MspInit+0x90>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <HAL_UART_MspInit+0x90>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_UART_MspInit+0x90>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <HAL_UART_MspInit+0x94>)
 8000f0a:	f000 fb39 	bl	8001580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_UART_MspInit+0x94>)
 8000f24:	f000 fb2c 	bl	8001580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40013800 	.word	0x40013800
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010800 	.word	0x40010800

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 f951 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <I2C2_EV_IRQHandler+0x1c>)
 8000f98:	f000 fc76 	bl	8001888 <HAL_GPIO_WritePin>
  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <I2C2_EV_IRQHandler+0x20>)
 8000f9e:	f001 f8e3 	bl	8002168 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	200001f8 	.word	0x200001f8

08000fb0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <I2C2_ER_IRQHandler+0x10>)
 8000fb6:	f001 fa48 	bl	800244a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200001f8 	.word	0x200001f8

08000fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return 1;
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <_kill>:

int _kill(int pid, int sig)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fdc:	f003 fca6 	bl	800492c <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2216      	movs	r2, #22
 8000fe4:	601a      	str	r2, [r3, #0]
  return -1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_exit>:

void _exit (int status)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ffa:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffe7 	bl	8000fd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001004:	e7fe      	b.n	8001004 <_exit+0x12>

08001006 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e00a      	b.n	800102e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001018:	f3af 8000 	nop.w
 800101c:	4601      	mov	r1, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	60ba      	str	r2, [r7, #8]
 8001024:	b2ca      	uxtb	r2, r1
 8001026:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	dbf0      	blt.n	8001018 <_read+0x12>
  }

  return len;
 8001036:	687b      	ldr	r3, [r7, #4]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e009      	b.n	8001066 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	60ba      	str	r2, [r7, #8]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	dbf1      	blt.n	8001052 <_write+0x12>
  }
  return len;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_close>:

int _close(int file)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109e:	605a      	str	r2, [r3, #4]
  return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <_isatty>:

int _isatty(int file)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f003 fc10 	bl	800492c <__errno>
 800110c:	4603      	mov	r3, r0
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20005000 	.word	0x20005000
 8001138:	00000400 	.word	0x00000400
 800113c:	200002d4 	.word	0x200002d4
 8001140:	200002f0 	.word	0x200002f0

08001144 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	; (8001188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	; (8001194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001176:	f7ff ffe5 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f003 fbdd 	bl	8004938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117e:	f7ff fce3 	bl	8000b48 <main>
  bx lr
 8001182:	4770      	bx	lr
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800118c:	080077cc 	.word	0x080077cc
  ldr r2, =_sbss
 8001190:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001194:	200002ec 	.word	0x200002ec

08001198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_2_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x28>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x28>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f923 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f000 f808 	bl	80011c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fdf2 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_InitTick+0x54>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_InitTick+0x58>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f93b 	bl	8001462 <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f000 f903 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_InitTick+0x5c>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20000008 	.word	0x20000008
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x1c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x20>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <HAL_IncTick+0x20>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	20000008 	.word	0x20000008
 8001248:	200002d8 	.word	0x200002d8

0800124c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <HAL_GetTick+0x10>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	200002d8 	.word	0x200002d8

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4906      	ldr	r1, [pc, #24]	; (80012f8 <__NVIC_EnableIRQ+0x34>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff90 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff2d 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff42 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff90 	bl	8001350 <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5f 	bl	80012fc <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff35 	bl	80012c4 <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800148e:	2b02      	cmp	r3, #2
 8001490:	d005      	beq.n	800149e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2204      	movs	r2, #4
 8001496:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e051      	b.n	8001542 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 020e 	bic.w	r2, r2, #14
 80014ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0201 	bic.w	r2, r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_DMA_Abort_IT+0xd0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d029      	beq.n	800151c <HAL_DMA_Abort_IT+0xa0>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a20      	ldr	r2, [pc, #128]	; (8001550 <HAL_DMA_Abort_IT+0xd4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d022      	beq.n	8001518 <HAL_DMA_Abort_IT+0x9c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <HAL_DMA_Abort_IT+0xd8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d01a      	beq.n	8001512 <HAL_DMA_Abort_IT+0x96>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_DMA_Abort_IT+0xdc>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d012      	beq.n	800150c <HAL_DMA_Abort_IT+0x90>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <HAL_DMA_Abort_IT+0xe0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d00a      	beq.n	8001506 <HAL_DMA_Abort_IT+0x8a>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_DMA_Abort_IT+0xe4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d102      	bne.n	8001500 <HAL_DMA_Abort_IT+0x84>
 80014fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014fe:	e00e      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 8001500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001504:	e00b      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 8001506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150a:	e008      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	e005      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 8001512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001516:	e002      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 8001518:	2310      	movs	r3, #16
 800151a:	e000      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 800151c:	2301      	movs	r3, #1
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_DMA_Abort_IT+0xe8>)
 8001520:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	4798      	blx	r3
    } 
  }
  return status;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40020008 	.word	0x40020008
 8001550:	4002001c 	.word	0x4002001c
 8001554:	40020030 	.word	0x40020030
 8001558:	40020044 	.word	0x40020044
 800155c:	40020058 	.word	0x40020058
 8001560:	4002006c 	.word	0x4002006c
 8001564:	40020000 	.word	0x40020000

08001568 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b08b      	sub	sp, #44	; 0x2c
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001592:	e169      	b.n	8001868 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001594:	2201      	movs	r2, #1
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 8158 	bne.w	8001862 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4a9a      	ldr	r2, [pc, #616]	; (8001820 <HAL_GPIO_Init+0x2a0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d05e      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015bc:	4a98      	ldr	r2, [pc, #608]	; (8001820 <HAL_GPIO_Init+0x2a0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d875      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015c2:	4a98      	ldr	r2, [pc, #608]	; (8001824 <HAL_GPIO_Init+0x2a4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d058      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015c8:	4a96      	ldr	r2, [pc, #600]	; (8001824 <HAL_GPIO_Init+0x2a4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d86f      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015ce:	4a96      	ldr	r2, [pc, #600]	; (8001828 <HAL_GPIO_Init+0x2a8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d052      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015d4:	4a94      	ldr	r2, [pc, #592]	; (8001828 <HAL_GPIO_Init+0x2a8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d869      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015da:	4a94      	ldr	r2, [pc, #592]	; (800182c <HAL_GPIO_Init+0x2ac>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d04c      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015e0:	4a92      	ldr	r2, [pc, #584]	; (800182c <HAL_GPIO_Init+0x2ac>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d863      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015e6:	4a92      	ldr	r2, [pc, #584]	; (8001830 <HAL_GPIO_Init+0x2b0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d046      	beq.n	800167a <HAL_GPIO_Init+0xfa>
 80015ec:	4a90      	ldr	r2, [pc, #576]	; (8001830 <HAL_GPIO_Init+0x2b0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d85d      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015f2:	2b12      	cmp	r3, #18
 80015f4:	d82a      	bhi.n	800164c <HAL_GPIO_Init+0xcc>
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d859      	bhi.n	80016ae <HAL_GPIO_Init+0x12e>
 80015fa:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <HAL_GPIO_Init+0x80>)
 80015fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001600:	0800167b 	.word	0x0800167b
 8001604:	08001655 	.word	0x08001655
 8001608:	08001667 	.word	0x08001667
 800160c:	080016a9 	.word	0x080016a9
 8001610:	080016af 	.word	0x080016af
 8001614:	080016af 	.word	0x080016af
 8001618:	080016af 	.word	0x080016af
 800161c:	080016af 	.word	0x080016af
 8001620:	080016af 	.word	0x080016af
 8001624:	080016af 	.word	0x080016af
 8001628:	080016af 	.word	0x080016af
 800162c:	080016af 	.word	0x080016af
 8001630:	080016af 	.word	0x080016af
 8001634:	080016af 	.word	0x080016af
 8001638:	080016af 	.word	0x080016af
 800163c:	080016af 	.word	0x080016af
 8001640:	080016af 	.word	0x080016af
 8001644:	0800165d 	.word	0x0800165d
 8001648:	08001671 	.word	0x08001671
 800164c:	4a79      	ldr	r2, [pc, #484]	; (8001834 <HAL_GPIO_Init+0x2b4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d013      	beq.n	800167a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001652:	e02c      	b.n	80016ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e029      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	3304      	adds	r3, #4
 8001662:	623b      	str	r3, [r7, #32]
          break;
 8001664:	e024      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	3308      	adds	r3, #8
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e01f      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	330c      	adds	r3, #12
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e01a      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001682:	2304      	movs	r3, #4
 8001684:	623b      	str	r3, [r7, #32]
          break;
 8001686:	e013      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d105      	bne.n	800169c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001690:	2308      	movs	r3, #8
 8001692:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	611a      	str	r2, [r3, #16]
          break;
 800169a:	e009      	b.n	80016b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800169c:	2308      	movs	r3, #8
 800169e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	615a      	str	r2, [r3, #20]
          break;
 80016a6:	e003      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x130>
          break;
 80016ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2bff      	cmp	r3, #255	; 0xff
 80016b4:	d801      	bhi.n	80016ba <HAL_GPIO_Init+0x13a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	e001      	b.n	80016be <HAL_GPIO_Init+0x13e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3304      	adds	r3, #4
 80016be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2bff      	cmp	r3, #255	; 0xff
 80016c4:	d802      	bhi.n	80016cc <HAL_GPIO_Init+0x14c>
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0x152>
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	3b08      	subs	r3, #8
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	210f      	movs	r1, #15
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	401a      	ands	r2, r3
 80016e4:	6a39      	ldr	r1, [r7, #32]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80b1 	beq.w	8001862 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001700:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <HAL_GPIO_Init+0x2b8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a4c      	ldr	r2, [pc, #304]	; (8001838 <HAL_GPIO_Init+0x2b8>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <HAL_GPIO_Init+0x2b8>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001718:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_GPIO_Init+0x2bc>)
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001724:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	220f      	movs	r2, #15
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a40      	ldr	r2, [pc, #256]	; (8001840 <HAL_GPIO_Init+0x2c0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d013      	beq.n	800176c <HAL_GPIO_Init+0x1ec>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a3f      	ldr	r2, [pc, #252]	; (8001844 <HAL_GPIO_Init+0x2c4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d00d      	beq.n	8001768 <HAL_GPIO_Init+0x1e8>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a3e      	ldr	r2, [pc, #248]	; (8001848 <HAL_GPIO_Init+0x2c8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d007      	beq.n	8001764 <HAL_GPIO_Init+0x1e4>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a3d      	ldr	r2, [pc, #244]	; (800184c <HAL_GPIO_Init+0x2cc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_GPIO_Init+0x1e0>
 800175c:	2303      	movs	r3, #3
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 8001760:	2304      	movs	r3, #4
 8001762:	e004      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 8001764:	2302      	movs	r3, #2
 8001766:	e002      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_GPIO_Init+0x1ee>
 800176c:	2300      	movs	r3, #0
 800176e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001770:	f002 0203 	and.w	r2, r2, #3
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	4093      	lsls	r3, r2
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800177e:	492f      	ldr	r1, [pc, #188]	; (800183c <HAL_GPIO_Init+0x2bc>)
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	492c      	ldr	r1, [pc, #176]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	4928      	ldr	r1, [pc, #160]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4922      	ldr	r1, [pc, #136]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	491e      	ldr	r1, [pc, #120]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	4918      	ldr	r1, [pc, #96]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	608b      	str	r3, [r1, #8]
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4914      	ldr	r1, [pc, #80]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 8001800:	4013      	ands	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d021      	beq.n	8001854 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	490e      	ldr	r1, [pc, #56]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
 800181c:	e021      	b.n	8001862 <HAL_GPIO_Init+0x2e2>
 800181e:	bf00      	nop
 8001820:	10320000 	.word	0x10320000
 8001824:	10310000 	.word	0x10310000
 8001828:	10220000 	.word	0x10220000
 800182c:	10210000 	.word	0x10210000
 8001830:	10120000 	.word	0x10120000
 8001834:	10110000 	.word	0x10110000
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000
 8001840:	40010800 	.word	0x40010800
 8001844:	40010c00 	.word	0x40010c00
 8001848:	40011000 	.word	0x40011000
 800184c:	40011400 	.word	0x40011400
 8001850:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_GPIO_Init+0x304>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	43db      	mvns	r3, r3
 800185c:	4909      	ldr	r1, [pc, #36]	; (8001884 <HAL_GPIO_Init+0x304>)
 800185e:	4013      	ands	r3, r2
 8001860:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	3301      	adds	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	f47f ae8e 	bne.w	8001594 <HAL_GPIO_Init+0x14>
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	372c      	adds	r7, #44	; 0x2c
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40010400 	.word	0x40010400

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
 8001894:	4613      	mov	r3, r2
 8001896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018a4:	e003      	b.n	80018ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	041a      	lsls	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	611a      	str	r2, [r3, #16]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e171      	b.n	8001bae <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d12c      	bne.n	8001930 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_I2C_Init+0x208>)
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a77      	ldr	r2, [pc, #476]	; (8001ac4 <HAL_I2C_Init+0x20c>)
 80018e8:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a76      	ldr	r2, [pc, #472]	; (8001ac8 <HAL_I2C_Init+0x210>)
 80018ee:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a76      	ldr	r2, [pc, #472]	; (8001acc <HAL_I2C_Init+0x214>)
 80018f4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a75      	ldr	r2, [pc, #468]	; (8001ad0 <HAL_I2C_Init+0x218>)
 80018fa:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a75      	ldr	r2, [pc, #468]	; (8001ad4 <HAL_I2C_Init+0x21c>)
 8001900:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a74      	ldr	r2, [pc, #464]	; (8001ad8 <HAL_I2C_Init+0x220>)
 8001906:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a74      	ldr	r2, [pc, #464]	; (8001adc <HAL_I2C_Init+0x224>)
 800190c:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a73      	ldr	r2, [pc, #460]	; (8001ae0 <HAL_I2C_Init+0x228>)
 8001912:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a73      	ldr	r2, [pc, #460]	; (8001ae4 <HAL_I2C_Init+0x22c>)
 8001918:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a70      	ldr	r2, [pc, #448]	; (8001ae8 <HAL_I2C_Init+0x230>)
 8001926:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2224      	movs	r2, #36	; 0x24
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001968:	f002 febe 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 800196c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4a5e      	ldr	r2, [pc, #376]	; (8001aec <HAL_I2C_Init+0x234>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d807      	bhi.n	8001988 <HAL_I2C_Init+0xd0>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4a5d      	ldr	r2, [pc, #372]	; (8001af0 <HAL_I2C_Init+0x238>)
 800197c:	4293      	cmp	r3, r2
 800197e:	bf94      	ite	ls
 8001980:	2301      	movls	r3, #1
 8001982:	2300      	movhi	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	e006      	b.n	8001996 <HAL_I2C_Init+0xde>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4a5a      	ldr	r2, [pc, #360]	; (8001af4 <HAL_I2C_Init+0x23c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	bf94      	ite	ls
 8001990:	2301      	movls	r3, #1
 8001992:	2300      	movhi	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e107      	b.n	8001bae <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4a55      	ldr	r2, [pc, #340]	; (8001af8 <HAL_I2C_Init+0x240>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0c9b      	lsrs	r3, r3, #18
 80019a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a47      	ldr	r2, [pc, #284]	; (8001aec <HAL_I2C_Init+0x234>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d802      	bhi.n	80019d8 <HAL_I2C_Init+0x120>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3301      	adds	r3, #1
 80019d6:	e009      	b.n	80019ec <HAL_I2C_Init+0x134>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a46      	ldr	r2, [pc, #280]	; (8001afc <HAL_I2C_Init+0x244>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	3301      	adds	r3, #1
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4939      	ldr	r1, [pc, #228]	; (8001aec <HAL_I2C_Init+0x234>)
 8001a08:	428b      	cmp	r3, r1
 8001a0a:	d819      	bhi.n	8001a40 <HAL_I2C_Init+0x188>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1e59      	subs	r1, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a1a:	1c59      	adds	r1, r3, #1
 8001a1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a20:	400b      	ands	r3, r1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <HAL_I2C_Init+0x184>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1e59      	subs	r1, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3a:	e071      	b.n	8001b20 <HAL_I2C_Init+0x268>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	e06f      	b.n	8001b20 <HAL_I2C_Init+0x268>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d111      	bne.n	8001a6c <HAL_I2C_Init+0x1b4>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1e58      	subs	r0, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	440b      	add	r3, r1
 8001a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	e012      	b.n	8001a92 <HAL_I2C_Init+0x1da>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1e58      	subs	r0, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	0099      	lsls	r1, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_Init+0x1e2>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e042      	b.n	8001b20 <HAL_I2C_Init+0x268>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12e      	bne.n	8001b00 <HAL_I2C_Init+0x248>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1e58      	subs	r0, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6859      	ldr	r1, [r3, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001abe:	e02f      	b.n	8001b20 <HAL_I2C_Init+0x268>
 8001ac0:	080025a9 	.word	0x080025a9
 8001ac4:	08000af5 	.word	0x08000af5
 8001ac8:	080025bb 	.word	0x080025bb
 8001acc:	080025cd 	.word	0x080025cd
 8001ad0:	080025f9 	.word	0x080025f9
 8001ad4:	0800260b 	.word	0x0800260b
 8001ad8:	0800261d 	.word	0x0800261d
 8001adc:	0800262f 	.word	0x0800262f
 8001ae0:	08002641 	.word	0x08002641
 8001ae4:	080025df 	.word	0x080025df
 8001ae8:	08000e05 	.word	0x08000e05
 8001aec:	000186a0 	.word	0x000186a0
 8001af0:	001e847f 	.word	0x001e847f
 8001af4:	003d08ff 	.word	0x003d08ff
 8001af8:	431bde83 	.word	0x431bde83
 8001afc:	10624dd3 	.word	0x10624dd3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1e58      	subs	r0, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6859      	ldr	r1, [r3, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	0099      	lsls	r1, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b16:	3301      	adds	r3, #1
 8001b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	6809      	ldr	r1, [r1, #0]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69da      	ldr	r2, [r3, #28]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6911      	ldr	r1, [r2, #16]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68d2      	ldr	r2, [r2, #12]
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop

08001bb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	817b      	strh	r3, [r7, #10]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff fb3e 	bl	800124c <HAL_GetTick>
 8001bd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	f040 80e0 	bne.w	8001da0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2319      	movs	r3, #25
 8001be6:	2201      	movs	r2, #1
 8001be8:	4970      	ldr	r1, [pc, #448]	; (8001dac <HAL_I2C_Master_Transmit+0x1f4>)
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f001 ffd6 	bl	8003b9c <I2C_WaitOnFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e0d3      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_I2C_Master_Transmit+0x50>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e0cc      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d007      	beq.n	8001c2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2221      	movs	r2, #33	; 0x21
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2210      	movs	r2, #16
 8001c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	893a      	ldrh	r2, [r7, #8]
 8001c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4a50      	ldr	r2, [pc, #320]	; (8001db0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c70:	8979      	ldrh	r1, [r7, #10]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f001 fe64 	bl	8003944 <I2C_MasterRequestWrite>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e08d      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c9c:	e066      	b.n	8001d6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	6a39      	ldr	r1, [r7, #32]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f002 f850 	bl	8003d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00d      	beq.n	8001cca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d107      	bne.n	8001cc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06b      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	781a      	ldrb	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d11b      	bne.n	8001d40 <HAL_I2C_Master_Transmit+0x188>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d017      	beq.n	8001d40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	6a39      	ldr	r1, [r7, #32]
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f002 f840 	bl	8003dca <I2C_WaitOnBTFFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00d      	beq.n	8001d6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d107      	bne.n	8001d68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e01a      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d194      	bne.n	8001c9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e000      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001da0:	2302      	movs	r3, #2
  }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	00100002 	.word	0x00100002
 8001db0:	ffff0000 	.word	0xffff0000

08001db4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	817b      	strh	r3, [r7, #10]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	f040 808d 	bne.w	8001ef4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001dda:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_I2C_Master_Receive_IT+0x14c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	4a48      	ldr	r2, [pc, #288]	; (8001f04 <HAL_I2C_Master_Receive_IT+0x150>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0a1a      	lsrs	r2, r3, #8
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009a      	lsls	r2, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d116      	bne.n	8001e2e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f043 0220 	orr.w	r2, r3, #32
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e063      	b.n	8001ef6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d0db      	beq.n	8001df4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_I2C_Master_Receive_IT+0x96>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e055      	b.n	8001ef6 <HAL_I2C_Master_Receive_IT+0x142>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d007      	beq.n	8001e70 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2222      	movs	r2, #34	; 0x22
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	893a      	ldrh	r2, [r7, #8]
 8001ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <HAL_I2C_Master_Receive_IT+0x154>)
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001eb2:	897a      	ldrh	r2, [r7, #10]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001ece:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ede:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
  }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20000000 	.word	0x20000000
 8001f04:	14f8b589 	.word	0x14f8b589
 8001f08:	ffff0000 	.word	0xffff0000

08001f0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff f996 	bl	800124c <HAL_GetTick>
 8001f20:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001f22:	2301      	movs	r3, #1
 8001f24:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	f040 8111 	bne.w	8002156 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2319      	movs	r3, #25
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4988      	ldr	r1, [pc, #544]	; (8002160 <HAL_I2C_IsDeviceReady+0x254>)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f001 fe2c 	bl	8003b9c <I2C_WaitOnFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e104      	b.n	8002158 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_I2C_IsDeviceReady+0x50>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e0fd      	b.n	8002158 <HAL_I2C_IsDeviceReady+0x24c>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d007      	beq.n	8001f82 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2224      	movs	r2, #36	; 0x24
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4a70      	ldr	r2, [pc, #448]	; (8002164 <HAL_I2C_IsDeviceReady+0x258>)
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f001 fdea 	bl	8003b9c <I2C_WaitOnFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00d      	beq.n	8001fea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fdc:	d103      	bne.n	8001fe6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0b6      	b.n	8002158 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fea:	897b      	ldrh	r3, [r7, #10]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ff8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff f927 	bl	800124c <HAL_GetTick>
 8001ffe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800202e:	e025      	b.n	800207c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002030:	f7ff f90c 	bl	800124c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d302      	bcc.n	8002046 <HAL_I2C_IsDeviceReady+0x13a>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	22a0      	movs	r2, #160	; 0xa0
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b02      	cmp	r3, #2
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2ba0      	cmp	r3, #160	; 0xa0
 8002086:	d005      	beq.n	8002094 <HAL_I2C_IsDeviceReady+0x188>
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_I2C_IsDeviceReady+0x188>
 800208e:	7dbb      	ldrb	r3, [r7, #22]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0cd      	beq.n	8002030 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d129      	bne.n	80020fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2319      	movs	r3, #25
 80020d6:	2201      	movs	r2, #1
 80020d8:	4921      	ldr	r1, [pc, #132]	; (8002160 <HAL_I2C_IsDeviceReady+0x254>)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f001 fd5e 	bl	8003b9c <I2C_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e036      	b.n	8002158 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e02c      	b.n	8002158 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002116:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2319      	movs	r3, #25
 800211e:	2201      	movs	r2, #1
 8002120:	490f      	ldr	r1, [pc, #60]	; (8002160 <HAL_I2C_IsDeviceReady+0x254>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f001 fd3a 	bl	8003b9c <I2C_WaitOnFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e012      	b.n	8002158 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3301      	adds	r3, #1
 8002136:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	f4ff af32 	bcc.w	8001fa6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002156:	2302      	movs	r3, #2
  }
}
 8002158:	4618      	mov	r0, r3
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	00100002 	.word	0x00100002
 8002164:	ffff0000 	.word	0xffff0000

08002168 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002188:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	2b10      	cmp	r3, #16
 8002196:	d003      	beq.n	80021a0 <HAL_I2C_EV_IRQHandler+0x38>
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	f040 80c1 	bne.w	8002322 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80021c0:	d003      	beq.n	80021ca <HAL_I2C_EV_IRQHandler+0x62>
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_EV_IRQHandler+0x66>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_I2C_EV_IRQHandler+0x68>
 80021ce:	2300      	movs	r3, #0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f000 8132 	beq.w	800243a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00c      	beq.n	80021fa <HAL_I2C_EV_IRQHandler+0x92>
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	0a5b      	lsrs	r3, r3, #9
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f001 fe8d 	bl	8003f0c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fd7a 	bl	8002cec <I2C_Master_SB>
 80021f8:	e092      	b.n	8002320 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_I2C_EV_IRQHandler+0xb2>
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	0a5b      	lsrs	r3, r3, #9
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fdef 	bl	8002df6 <I2C_Master_ADD10>
 8002218:	e082      	b.n	8002320 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_I2C_EV_IRQHandler+0xd2>
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	0a5b      	lsrs	r3, r3, #9
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fe08 	bl	8002e48 <I2C_Master_ADDR>
 8002238:	e072      	b.n	8002320 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d03b      	beq.n	80022be <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002254:	f000 80f3 	beq.w	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	09db      	lsrs	r3, r3, #7
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00f      	beq.n	8002284 <HAL_I2C_EV_IRQHandler+0x11c>
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	0a9b      	lsrs	r3, r3, #10
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <HAL_I2C_EV_IRQHandler+0x11c>
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d103      	bne.n	8002284 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f9e8 	bl	8002652 <I2C_MasterTransmit_TXE>
 8002282:	e04d      	b.n	8002320 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80d6 	beq.w	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	0a5b      	lsrs	r3, r3, #9
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80cf 	beq.w	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80022a0:	7bbb      	ldrb	r3, [r7, #14]
 80022a2:	2b21      	cmp	r3, #33	; 0x21
 80022a4:	d103      	bne.n	80022ae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fa72 	bl	8002790 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022ac:	e0c7      	b.n	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b40      	cmp	r3, #64	; 0x40
 80022b2:	f040 80c4 	bne.w	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fae3 	bl	8002882 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022bc:	e0bf      	b.n	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022cc:	f000 80b7 	beq.w	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	099b      	lsrs	r3, r3, #6
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00f      	beq.n	80022fc <HAL_I2C_EV_IRQHandler+0x194>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	0a9b      	lsrs	r3, r3, #10
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_I2C_EV_IRQHandler+0x194>
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d103      	bne.n	80022fc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fb59 	bl	80029ac <I2C_MasterReceive_RXNE>
 80022fa:	e011      	b.n	8002320 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 809a 	beq.w	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	0a5b      	lsrs	r3, r3, #9
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8093 	beq.w	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fbfb 	bl	8002b14 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800231e:	e08e      	b.n	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002320:	e08d      	b.n	800243e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	e007      	b.n	8002344 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d012      	beq.n	8002376 <HAL_I2C_EV_IRQHandler+0x20e>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	0a5b      	lsrs	r3, r3, #9
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00c      	beq.n	8002376 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800236c:	69b9      	ldr	r1, [r7, #24]
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 ffc3 	bl	80032fa <I2C_Slave_ADDR>
 8002374:	e066      	b.n	8002444 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_I2C_EV_IRQHandler+0x22e>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	0a5b      	lsrs	r3, r3, #9
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fffe 	bl	8003390 <I2C_Slave_STOPF>
 8002394:	e056      	b.n	8002444 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002396:	7bbb      	ldrb	r3, [r7, #14]
 8002398:	2b21      	cmp	r3, #33	; 0x21
 800239a:	d002      	beq.n	80023a2 <HAL_I2C_EV_IRQHandler+0x23a>
 800239c:	7bbb      	ldrb	r3, [r7, #14]
 800239e:	2b29      	cmp	r3, #41	; 0x29
 80023a0:	d125      	bne.n	80023ee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	09db      	lsrs	r3, r3, #7
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00f      	beq.n	80023ce <HAL_I2C_EV_IRQHandler+0x266>
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	0a9b      	lsrs	r3, r3, #10
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_I2C_EV_IRQHandler+0x266>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fed9 	bl	800317e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023cc:	e039      	b.n	8002442 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d033      	beq.n	8002442 <HAL_I2C_EV_IRQHandler+0x2da>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	0a5b      	lsrs	r3, r3, #9
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d02d      	beq.n	8002442 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 ff07 	bl	80031fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023ec:	e029      	b.n	8002442 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00f      	beq.n	800241a <HAL_I2C_EV_IRQHandler+0x2b2>
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	0a9b      	lsrs	r3, r3, #10
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 ff11 	bl	800323a <I2C_SlaveReceive_RXNE>
 8002418:	e014      	b.n	8002444 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00e      	beq.n	8002444 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	0a5b      	lsrs	r3, r3, #9
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 ff40 	bl	80032b8 <I2C_SlaveReceive_BTF>
 8002438:	e004      	b.n	8002444 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800243a:	bf00      	nop
 800243c:	e002      	b.n	8002444 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002442:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002444:	3720      	adds	r7, #32
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b08a      	sub	sp, #40	; 0x28
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800246c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <HAL_I2C_ER_IRQHandler+0x5e>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002496:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	0a5b      	lsrs	r3, r3, #9
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00e      	beq.n	80024d2 <HAL_I2C_ER_IRQHandler+0x88>
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80024d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	0a9b      	lsrs	r3, r3, #10
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d03f      	beq.n	800255e <HAL_I2C_ER_IRQHandler+0x114>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d039      	beq.n	800255e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80024ea:	7efb      	ldrb	r3, [r7, #27]
 80024ec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002504:	7ebb      	ldrb	r3, [r7, #26]
 8002506:	2b20      	cmp	r3, #32
 8002508:	d112      	bne.n	8002530 <HAL_I2C_ER_IRQHandler+0xe6>
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10f      	bne.n	8002530 <HAL_I2C_ER_IRQHandler+0xe6>
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	2b21      	cmp	r3, #33	; 0x21
 8002514:	d008      	beq.n	8002528 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2b29      	cmp	r3, #41	; 0x29
 800251a:	d005      	beq.n	8002528 <HAL_I2C_ER_IRQHandler+0xde>
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	2b28      	cmp	r3, #40	; 0x28
 8002520:	d106      	bne.n	8002530 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b21      	cmp	r3, #33	; 0x21
 8002526:	d103      	bne.n	8002530 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f001 f865 	bl	80035f8 <I2C_Slave_AF>
 800252e:	e016      	b.n	800255e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002538:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002542:	7efb      	ldrb	r3, [r7, #27]
 8002544:	2b10      	cmp	r3, #16
 8002546:	d002      	beq.n	800254e <HAL_I2C_ER_IRQHandler+0x104>
 8002548:	7efb      	ldrb	r3, [r7, #27]
 800254a:	2b40      	cmp	r3, #64	; 0x40
 800254c:	d107      	bne.n	800255e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	0adb      	lsrs	r3, r3, #11
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00e      	beq.n	8002588 <HAL_I2C_ER_IRQHandler+0x13e>
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002586:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f001 f89e 	bl	80036dc <I2C_ITError>
  }
}
 80025a0:	bf00      	nop
 80025a2:	3728      	adds	r7, #40	; 0x28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	70fb      	strb	r3, [r7, #3]
 80025ea:	4613      	mov	r3, r2
 80025ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002668:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d153      	bne.n	8002720 <I2C_MasterTransmit_TXE+0xce>
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b21      	cmp	r3, #33	; 0x21
 800267c:	d150      	bne.n	8002720 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d01e      	beq.n	80026c2 <I2C_MasterTransmit_TXE+0x70>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b20      	cmp	r3, #32
 8002688:	d01b      	beq.n	80026c2 <I2C_MasterTransmit_TXE+0x70>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002690:	d017      	beq.n	80026c2 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026a0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2211      	movs	r2, #17
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026c0:	e062      	b.n	8002788 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d108      	bne.n	800270e <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800270c:	e03c      	b.n	8002788 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800271e:	e033      	b.n	8002788 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b21      	cmp	r3, #33	; 0x21
 8002724:	d005      	beq.n	8002732 <I2C_MasterTransmit_TXE+0xe0>
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	2b40      	cmp	r3, #64	; 0x40
 800272a:	d12d      	bne.n	8002788 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b22      	cmp	r3, #34	; 0x22
 8002730:	d12a      	bne.n	8002788 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d108      	bne.n	800274e <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800274a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800274c:	e01c      	b.n	8002788 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	d103      	bne.n	8002762 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f891 	bl	8002882 <I2C_MemoryTransmit_TXE_BTF>
}
 8002760:	e012      	b.n	8002788 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002786:	e7ff      	b.n	8002788 <I2C_MasterTransmit_TXE+0x136>
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b21      	cmp	r3, #33	; 0x21
 80027a8:	d167      	bne.n	800287a <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d012      	beq.n	80027da <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80027d8:	e04f      	b.n	800287a <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d01e      	beq.n	800281e <I2C_MasterTransmit_BTF+0x8e>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d01b      	beq.n	800281e <I2C_MasterTransmit_BTF+0x8e>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027ec:	d017      	beq.n	800281e <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027fc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2211      	movs	r2, #17
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
}
 800281c:	e02d      	b.n	800287a <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800282c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d108      	bne.n	800286a <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
}
 8002868:	e007      	b.n	800287a <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002890:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11d      	bne.n	80028d6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d10b      	bne.n	80028ba <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b2:	1c9a      	adds	r2, r3, #2
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80028b8:	e074      	b.n	80029a4 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028be:	b29b      	uxth	r3, r3
 80028c0:	121b      	asrs	r3, r3, #8
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028d4:	e066      	b.n	80029a4 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10b      	bne.n	80028f6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028f4:	e056      	b.n	80029a4 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d152      	bne.n	80029a4 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b22      	cmp	r3, #34	; 0x22
 8002902:	d10d      	bne.n	8002920 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002912:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800291e:	e041      	b.n	80029a4 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d015      	beq.n	8002956 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b21      	cmp	r3, #33	; 0x21
 800292e:	d112      	bne.n	8002956 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002954:	e026      	b.n	80029a4 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d121      	bne.n	80029a4 <I2C_MemoryTransmit_TXE_BTF+0x122>
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b21      	cmp	r3, #33	; 0x21
 8002964:	d11e      	bne.n	80029a4 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002974:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002984:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b22      	cmp	r3, #34	; 0x22
 80029be:	f040 80a5 	bne.w	8002b0c <I2C_MasterReceive_RXNE+0x160>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d921      	bls.n	8002a14 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	f040 8085 	bne.w	8002b0c <I2C_MasterReceive_RXNE+0x160>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a10:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002a12:	e07b      	b.n	8002b0c <I2C_MasterReceive_RXNE+0x160>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d077      	beq.n	8002b0c <I2C_MasterReceive_RXNE+0x160>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d002      	beq.n	8002a28 <I2C_MasterReceive_RXNE+0x7c>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d171      	bne.n	8002b0c <I2C_MasterReceive_RXNE+0x160>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f001 fa0f 	bl	8003e4c <I2C_WaitOnSTOPRequestThroughIT>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d144      	bne.n	8002abe <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a42:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a52:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d10b      	bne.n	8002aa6 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
}
 8002aa4:	e032      	b.n	8002b0c <I2C_MasterReceive_RXNE+0x160>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2212      	movs	r2, #18
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
}
 8002abc:	e026      	b.n	8002b0c <I2C_MasterReceive_RXNE+0x160>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002acc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d11b      	bne.n	8002b64 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b3a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002b62:	e0bf      	b.n	8002ce4 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d129      	bne.n	8002bc2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d00a      	beq.n	8002b9a <I2C_MasterReceive_BTF+0x86>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d007      	beq.n	8002b9a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b98:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bc0:	e090      	b.n	8002ce4 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d178      	bne.n	8002cbe <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d002      	beq.n	8002bd8 <I2C_MasterReceive_BTF+0xc4>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d108      	bne.n	8002bea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e019      	b.n	8002c1e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d002      	beq.n	8002bf6 <I2C_MasterReceive_BTF+0xe2>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d108      	bne.n	8002c08 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	e00a      	b.n	8002c1e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d007      	beq.n	8002c1e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c78:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d10b      	bne.n	8002ca6 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
}
 8002ca4:	e01e      	b.n	8002ce4 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2212      	movs	r2, #18
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
}
 8002cbc:	e012      	b.n	8002ce4 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d117      	bne.n	8002d30 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d18:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002d1a:	e067      	b.n	8002dec <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	611a      	str	r2, [r3, #16]
}
 8002d2e:	e05d      	b.n	8002dec <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d38:	d133      	bne.n	8002da2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b21      	cmp	r3, #33	; 0x21
 8002d44:	d109      	bne.n	8002d5a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d56:	611a      	str	r2, [r3, #16]
 8002d58:	e008      	b.n	8002d6c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <I2C_Master_SB+0x92>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d032      	beq.n	8002dec <I2C_Master_SB+0x100>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d02d      	beq.n	8002dec <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d9e:	605a      	str	r2, [r3, #4]
}
 8002da0:	e024      	b.n	8002dec <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10e      	bne.n	8002dc8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	11db      	asrs	r3, r3, #7
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f003 0306 	and.w	r3, r3, #6
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	f063 030f 	orn	r3, r3, #15
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	611a      	str	r2, [r3, #16]
}
 8002dc6:	e011      	b.n	8002dec <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d10d      	bne.n	8002dec <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	11db      	asrs	r3, r3, #7
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f003 0306 	and.w	r3, r3, #6
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f063 030e 	orn	r3, r3, #14
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <I2C_Master_ADD10+0x26>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d108      	bne.n	8002e2e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00c      	beq.n	8002e3e <I2C_Master_ADD10+0x48>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e3c:	605a      	str	r2, [r3, #4]
  }
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b091      	sub	sp, #68	; 0x44
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b22      	cmp	r3, #34	; 0x22
 8002e70:	f040 8174 	bne.w	800315c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10f      	bne.n	8002e9c <I2C_Master_ADDR+0x54>
 8002e7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002e80:	2b40      	cmp	r3, #64	; 0x40
 8002e82:	d10b      	bne.n	8002e9c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e84:	2300      	movs	r3, #0
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	e16b      	b.n	8003174 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11d      	bne.n	8002ee0 <I2C_Master_ADDR+0x98>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002eac:	d118      	bne.n	8002ee0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	651a      	str	r2, [r3, #80]	; 0x50
 8002ede:	e149      	b.n	8003174 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d113      	bne.n	8002f12 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e120      	b.n	8003154 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	f040 808a 	bne.w	8003032 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f24:	d137      	bne.n	8002f96 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f34:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f44:	d113      	bne.n	8002f6e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	e0f2      	b.n	8003154 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	623b      	str	r3, [r7, #32]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	623b      	str	r3, [r7, #32]
 8002f82:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e0de      	b.n	8003154 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d02e      	beq.n	8002ffa <I2C_Master_ADDR+0x1b2>
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d02b      	beq.n	8002ffa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	2b12      	cmp	r3, #18
 8002fa6:	d102      	bne.n	8002fae <I2C_Master_ADDR+0x166>
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d125      	bne.n	8002ffa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d00e      	beq.n	8002fd2 <I2C_Master_ADDR+0x18a>
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d00b      	beq.n	8002fd2 <I2C_Master_ADDR+0x18a>
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d008      	beq.n	8002fd2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e007      	b.n	8002fe2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fe0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	e0ac      	b.n	8003154 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003008:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e090      	b.n	8003154 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d158      	bne.n	80030ee <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303e:	2b04      	cmp	r3, #4
 8003040:	d021      	beq.n	8003086 <I2C_Master_ADDR+0x23e>
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003044:	2b02      	cmp	r3, #2
 8003046:	d01e      	beq.n	8003086 <I2C_Master_ADDR+0x23e>
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	2b10      	cmp	r3, #16
 800304c:	d01b      	beq.n	8003086 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800305c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e012      	b.n	80030ac <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003094:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ba:	d14b      	bne.n	8003154 <I2C_Master_ADDR+0x30c>
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030c2:	d00b      	beq.n	80030dc <I2C_Master_ADDR+0x294>
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d008      	beq.n	80030dc <I2C_Master_ADDR+0x294>
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d005      	beq.n	80030dc <I2C_Master_ADDR+0x294>
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d002      	beq.n	80030dc <I2C_Master_ADDR+0x294>
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d13b      	bne.n	8003154 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e032      	b.n	8003154 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310c:	d117      	bne.n	800313e <I2C_Master_ADDR+0x2f6>
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003114:	d00b      	beq.n	800312e <I2C_Master_ADDR+0x2e6>
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	2b01      	cmp	r3, #1
 800311a:	d008      	beq.n	800312e <I2C_Master_ADDR+0x2e6>
 800311c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311e:	2b08      	cmp	r3, #8
 8003120:	d005      	beq.n	800312e <I2C_Master_ADDR+0x2e6>
 8003122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003124:	2b10      	cmp	r3, #16
 8003126:	d002      	beq.n	800312e <I2C_Master_ADDR+0x2e6>
 8003128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312a:	2b20      	cmp	r3, #32
 800312c:	d107      	bne.n	800313e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800313c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800315a:	e00b      	b.n	8003174 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
}
 8003172:	e7ff      	b.n	8003174 <I2C_Master_ADDR+0x32c>
 8003174:	bf00      	nop
 8003176:	3744      	adds	r7, #68	; 0x44
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02c      	beq.n	80031f2 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d115      	bne.n	80031f2 <I2C_SlaveTransmit_TXE+0x74>
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	2b29      	cmp	r3, #41	; 0x29
 80031ca:	d112      	bne.n	80031f2 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2221      	movs	r2, #33	; 0x21
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2228      	movs	r2, #40	; 0x28
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d011      	beq.n	8003230 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d02d      	beq.n	80032b0 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d115      	bne.n	80032b0 <I2C_SlaveReceive_RXNE+0x76>
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b2a      	cmp	r3, #42	; 0x2a
 8003288:	d112      	bne.n	80032b0 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003298:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2222      	movs	r2, #34	; 0x22
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2228      	movs	r2, #40	; 0x28
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d012      	beq.n	80032f0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003314:	2b28      	cmp	r3, #40	; 0x28
 8003316:	d127      	bne.n	8003368 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003326:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	09db      	lsrs	r3, r3, #7
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	81bb      	strh	r3, [r7, #12]
 800334a:	e002      	b.n	8003352 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335e:	89ba      	ldrh	r2, [r7, #12]
 8003360:	7bf9      	ldrb	r1, [r7, #15]
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003366:	e00e      	b.n	8003386 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ec:	d172      	bne.n	80034d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b22      	cmp	r3, #34	; 0x22
 80033f2:	d002      	beq.n	80033fa <I2C_Slave_STOPF+0x6a>
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b2a      	cmp	r3, #42	; 0x2a
 80033f8:	d135      	bne.n	8003466 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f043 0204 	orr.w	r2, r3, #4
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe f898 	bl	8001568 <HAL_DMA_GetState>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d049      	beq.n	80034d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	4a6b      	ldr	r2, [pc, #428]	; (80035f0 <I2C_Slave_STOPF+0x260>)
 8003444:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe f816 	bl	800147c <HAL_DMA_Abort_IT>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d03d      	beq.n	80034d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003460:	4610      	mov	r0, r2
 8003462:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003464:	e035      	b.n	80034d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b29a      	uxth	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f043 0204 	orr.w	r2, r3, #4
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003498:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe f862 	bl	8001568 <HAL_DMA_GetState>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d014      	beq.n	80034d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	4a50      	ldr	r2, [pc, #320]	; (80035f0 <I2C_Slave_STOPF+0x260>)
 80034b0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd ffe0 	bl	800147c <HAL_DMA_Abort_IT>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034cc:	4610      	mov	r0, r2
 80034ce:	4798      	blx	r3
 80034d0:	e000      	b.n	80034d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d03e      	beq.n	800355c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d112      	bne.n	8003512 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d112      	bne.n	8003546 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f043 0204 	orr.w	r2, r3, #4
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8b9 	bl	80036dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800356a:	e03c      	b.n	80035e6 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b2a      	cmp	r3, #42	; 0x2a
 8003570:	d10a      	bne.n	8003588 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2228      	movs	r2, #40	; 0x28
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b28      	cmp	r3, #40	; 0x28
 8003592:	d112      	bne.n	80035ba <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <I2C_Slave_STOPF+0x264>)
 8003598:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
}
 80035b8:	e015      	b.n	80035e6 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	2b22      	cmp	r3, #34	; 0x22
 80035c0:	d002      	beq.n	80035c8 <I2C_Slave_STOPF+0x238>
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b22      	cmp	r3, #34	; 0x22
 80035c6:	d10e      	bne.n	80035e6 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	08003a49 	.word	0x08003a49
 80035f4:	ffff0000 	.word	0xffff0000

080035f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d002      	beq.n	800361a <I2C_Slave_AF+0x22>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b20      	cmp	r3, #32
 8003618:	d12a      	bne.n	8003670 <I2C_Slave_AF+0x78>
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b28      	cmp	r3, #40	; 0x28
 800361e:	d127      	bne.n	8003670 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a2d      	ldr	r2, [pc, #180]	; (80036d8 <I2C_Slave_AF+0xe0>)
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003634:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800363e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800366e:	e02f      	b.n	80036d0 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b21      	cmp	r3, #33	; 0x21
 8003674:	d127      	bne.n	80036c6 <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <I2C_Slave_AF+0xe0>)
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2221      	movs	r2, #33	; 0x21
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036a0:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036aa:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ba:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	4798      	blx	r3
}
 80036c4:	e004      	b.n	80036d0 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ce:	615a      	str	r2, [r3, #20]
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	ffff0000 	.word	0xffff0000

080036dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80036f4:	7bbb      	ldrb	r3, [r7, #14]
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d002      	beq.n	8003700 <I2C_ITError+0x24>
 80036fa:	7bbb      	ldrb	r3, [r7, #14]
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d10a      	bne.n	8003716 <I2C_ITError+0x3a>
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b22      	cmp	r3, #34	; 0x22
 8003704:	d107      	bne.n	8003716 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003714:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800371c:	2b28      	cmp	r3, #40	; 0x28
 800371e:	d107      	bne.n	8003730 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2228      	movs	r2, #40	; 0x28
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800372e:	e015      	b.n	800375c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373e:	d00a      	beq.n	8003756 <I2C_ITError+0x7a>
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b60      	cmp	r3, #96	; 0x60
 8003744:	d007      	beq.n	8003756 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376a:	d161      	bne.n	8003830 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003784:	2b01      	cmp	r3, #1
 8003786:	d020      	beq.n	80037ca <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378c:	4a6b      	ldr	r2, [pc, #428]	; (800393c <I2C_ITError+0x260>)
 800378e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003794:	4618      	mov	r0, r3
 8003796:	f7fd fe71 	bl	800147c <HAL_DMA_Abort_IT>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 808b 	beq.w	80038b8 <I2C_ITError+0x1dc>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037c4:	4610      	mov	r0, r2
 80037c6:	4798      	blx	r3
 80037c8:	e076      	b.n	80038b8 <I2C_ITError+0x1dc>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	4a5b      	ldr	r2, [pc, #364]	; (800393c <I2C_ITError+0x260>)
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fe50 	bl	800147c <HAL_DMA_Abort_IT>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d06a      	beq.n	80038b8 <I2C_ITError+0x1dc>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d10b      	bne.n	8003808 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800382a:	4610      	mov	r0, r2
 800382c:	4798      	blx	r3
 800382e:	e043      	b.n	80038b8 <I2C_ITError+0x1dc>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b60      	cmp	r3, #96	; 0x60
 800383a:	d126      	bne.n	800388a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d10b      	bne.n	8003870 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e016      	b.n	80038b8 <I2C_ITError+0x1dc>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d10b      	bne.n	80038b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10e      	bne.n	80038e6 <I2C_ITError+0x20a>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <I2C_ITError+0x20a>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <I2C_ITError+0x20a>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <I2C_ITError+0x21a>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038f4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d114      	bne.n	8003934 <I2C_ITError+0x258>
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b28      	cmp	r3, #40	; 0x28
 800390e:	d111      	bne.n	8003934 <I2C_ITError+0x258>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0b      	ldr	r2, [pc, #44]	; (8003940 <I2C_ITError+0x264>)
 8003914:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	08003a49 	.word	0x08003a49
 8003940:	ffff0000 	.word	0xffff0000

08003944 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	460b      	mov	r3, r1
 8003952:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d006      	beq.n	800396e <I2C_MasterRequestWrite+0x2a>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d003      	beq.n	800396e <I2C_MasterRequestWrite+0x2a>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800396c:	d108      	bne.n	8003980 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e00b      	b.n	8003998 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	2b12      	cmp	r3, #18
 8003986:	d107      	bne.n	8003998 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003996:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f8f9 	bl	8003b9c <I2C_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039be:	d103      	bne.n	80039c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e035      	b.n	8003a38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d4:	d108      	bne.n	80039e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039d6:	897b      	ldrh	r3, [r7, #10]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039e4:	611a      	str	r2, [r3, #16]
 80039e6:	e01b      	b.n	8003a20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039e8:	897b      	ldrh	r3, [r7, #10]
 80039ea:	11db      	asrs	r3, r3, #7
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 0306 	and.w	r3, r3, #6
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f063 030f 	orn	r3, r3, #15
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	490e      	ldr	r1, [pc, #56]	; (8003a40 <I2C_MasterRequestWrite+0xfc>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f91f 	bl	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e010      	b.n	8003a38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a16:	897b      	ldrh	r3, [r7, #10]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4907      	ldr	r1, [pc, #28]	; (8003a44 <I2C_MasterRequestWrite+0x100>)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f90f 	bl	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	00010008 	.word	0x00010008
 8003a44:	00010002 	.word	0x00010002

08003a48 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a62:	4b4c      	ldr	r3, [pc, #304]	; (8003b94 <I2C_DMAAbort+0x14c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	08db      	lsrs	r3, r3, #3
 8003a68:	4a4b      	ldr	r2, [pc, #300]	; (8003b98 <I2C_DMAAbort+0x150>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	0a1a      	lsrs	r2, r3, #8
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00da      	lsls	r2, r3, #3
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f043 0220 	orr.w	r2, r3, #32
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003a8e:	e00a      	b.n	8003aa6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa4:	d0ea      	beq.n	8003a7c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	2200      	movs	r2, #0
 8003aea:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	2200      	movs	r2, #0
 8003afa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b60      	cmp	r3, #96	; 0x60
 8003b16:	d10f      	bne.n	8003b38 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b32:	6978      	ldr	r0, [r7, #20]
 8003b34:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b36:	e028      	b.n	8003b8a <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b3e:	2b28      	cmp	r3, #40	; 0x28
 8003b40:	d117      	bne.n	8003b72 <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b60:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2228      	movs	r2, #40	; 0x28
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b70:	e007      	b.n	8003b82 <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	6978      	ldr	r0, [r7, #20]
 8003b88:	4798      	blx	r3
}
 8003b8a:	bf00      	nop
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000000 	.word	0x20000000
 8003b98:	14f8b589 	.word	0x14f8b589

08003b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bac:	e025      	b.n	8003bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d021      	beq.n	8003bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb6:	f7fd fb49 	bl	800124c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d116      	bne.n	8003bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f043 0220 	orr.w	r2, r3, #32
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e023      	b.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d10d      	bne.n	8003c20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	e00c      	b.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	43da      	mvns	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf0c      	ite	eq
 8003c32:	2301      	moveq	r3, #1
 8003c34:	2300      	movne	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d0b6      	beq.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c58:	e051      	b.n	8003cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c68:	d123      	bne.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0204 	orr.w	r2, r3, #4
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e046      	b.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d021      	beq.n	8003cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cba:	f7fd fac7 	bl	800124c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d302      	bcc.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d116      	bne.n	8003cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f043 0220 	orr.w	r2, r3, #32
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e020      	b.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d10c      	bne.n	8003d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bf14      	ite	ne
 8003d1a:	2301      	movne	r3, #1
 8003d1c:	2300      	moveq	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	e00b      	b.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	43da      	mvns	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf14      	ite	ne
 8003d34:	2301      	movne	r3, #1
 8003d36:	2300      	moveq	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d18d      	bne.n	8003c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d54:	e02d      	b.n	8003db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f8aa 	bl	8003eb0 <I2C_IsAcknowledgeFailed>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e02d      	b.n	8003dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d021      	beq.n	8003db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6e:	f7fd fa6d 	bl	800124c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d302      	bcc.n	8003d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d116      	bne.n	8003db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e007      	b.n	8003dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbc:	2b80      	cmp	r3, #128	; 0x80
 8003dbe:	d1ca      	bne.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dd6:	e02d      	b.n	8003e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f869 	bl	8003eb0 <I2C_IsAcknowledgeFailed>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e02d      	b.n	8003e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d021      	beq.n	8003e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df0:	f7fd fa2c 	bl	800124c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d116      	bne.n	8003e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f043 0220 	orr.w	r2, r3, #32
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e007      	b.n	8003e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d1ca      	bne.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	4a13      	ldr	r2, [pc, #76]	; (8003eac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	0a1a      	lsrs	r2, r3, #8
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d107      	bne.n	8003e8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f043 0220 	orr.w	r2, r3, #32
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e008      	b.n	8003e9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	d0e9      	beq.n	8003e6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	14f8b589 	.word	0x14f8b589

08003eb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec6:	d11b      	bne.n	8003f00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ed0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f043 0204 	orr.w	r2, r3, #4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f1c:	d103      	bne.n	8003f26 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f24:	e007      	b.n	8003f36 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f2e:	d102      	bne.n	8003f36 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2208      	movs	r2, #8
 8003f34:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e272      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 8087 	beq.w	800406e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f60:	4b92      	ldr	r3, [pc, #584]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d00c      	beq.n	8003f86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f6c:	4b8f      	ldr	r3, [pc, #572]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d112      	bne.n	8003f9e <HAL_RCC_OscConfig+0x5e>
 8003f78:	4b8c      	ldr	r3, [pc, #560]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d10b      	bne.n	8003f9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f86:	4b89      	ldr	r3, [pc, #548]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d06c      	beq.n	800406c <HAL_RCC_OscConfig+0x12c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d168      	bne.n	800406c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e24c      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa6:	d106      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x76>
 8003fa8:	4b80      	ldr	r3, [pc, #512]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a7f      	ldr	r2, [pc, #508]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e02e      	b.n	8004014 <HAL_RCC_OscConfig+0xd4>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x98>
 8003fbe:	4b7b      	ldr	r3, [pc, #492]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a7a      	ldr	r2, [pc, #488]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4b78      	ldr	r3, [pc, #480]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a77      	ldr	r2, [pc, #476]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e01d      	b.n	8004014 <HAL_RCC_OscConfig+0xd4>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0xbc>
 8003fe2:	4b72      	ldr	r3, [pc, #456]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a71      	ldr	r2, [pc, #452]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCC_OscConfig+0xd4>
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a6a      	ldr	r2, [pc, #424]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8004002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b68      	ldr	r3, [pc, #416]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a67      	ldr	r2, [pc, #412]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fd f916 	bl	800124c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004024:	f7fd f912 	bl	800124c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e200      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	4b5d      	ldr	r3, [pc, #372]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0xe4>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fd f902 	bl	800124c <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800404c:	f7fd f8fe 	bl	800124c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b64      	cmp	r3, #100	; 0x64
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1ec      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x10c>
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d063      	beq.n	8004142 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800407a:	4b4c      	ldr	r3, [pc, #304]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004086:	4b49      	ldr	r3, [pc, #292]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b08      	cmp	r3, #8
 8004090:	d11c      	bne.n	80040cc <HAL_RCC_OscConfig+0x18c>
 8004092:	4b46      	ldr	r3, [pc, #280]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d116      	bne.n	80040cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	4b43      	ldr	r3, [pc, #268]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_RCC_OscConfig+0x176>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d001      	beq.n	80040b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e1c0      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b6:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4939      	ldr	r1, [pc, #228]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ca:	e03a      	b.n	8004142 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d020      	beq.n	8004116 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d4:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <HAL_RCC_OscConfig+0x270>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7fd f8b7 	bl	800124c <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e2:	f7fd f8b3 	bl	800124c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1a1      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004100:	4b2a      	ldr	r3, [pc, #168]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4927      	ldr	r1, [pc, #156]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]
 8004114:	e015      	b.n	8004142 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004116:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <HAL_RCC_OscConfig+0x270>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fd f896 	bl	800124c <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004124:	f7fd f892 	bl	800124c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e180      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d03a      	beq.n	80041c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d019      	beq.n	800418a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004156:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <HAL_RCC_OscConfig+0x274>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415c:	f7fd f876 	bl	800124c <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004164:	f7fd f872 	bl	800124c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e160      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <HAL_RCC_OscConfig+0x26c>)
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004182:	2001      	movs	r0, #1
 8004184:	f000 fad8 	bl	8004738 <RCC_Delay>
 8004188:	e01c      	b.n	80041c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <HAL_RCC_OscConfig+0x274>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004190:	f7fd f85c 	bl	800124c <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004196:	e00f      	b.n	80041b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004198:	f7fd f858 	bl	800124c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d908      	bls.n	80041b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e146      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	42420000 	.word	0x42420000
 80041b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b8:	4b92      	ldr	r3, [pc, #584]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e9      	bne.n	8004198 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80a6 	beq.w	800431e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d6:	4b8b      	ldr	r3, [pc, #556]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e2:	4b88      	ldr	r3, [pc, #544]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	4a87      	ldr	r2, [pc, #540]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	61d3      	str	r3, [r2, #28]
 80041ee:	4b85      	ldr	r3, [pc, #532]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fe:	4b82      	ldr	r3, [pc, #520]	; (8004408 <HAL_RCC_OscConfig+0x4c8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d118      	bne.n	800423c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800420a:	4b7f      	ldr	r3, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0x4c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7e      	ldr	r2, [pc, #504]	; (8004408 <HAL_RCC_OscConfig+0x4c8>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004216:	f7fd f819 	bl	800124c <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421e:	f7fd f815 	bl	800124c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	; 0x64
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e103      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	4b75      	ldr	r3, [pc, #468]	; (8004408 <HAL_RCC_OscConfig+0x4c8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d106      	bne.n	8004252 <HAL_RCC_OscConfig+0x312>
 8004244:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	4a6e      	ldr	r2, [pc, #440]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6213      	str	r3, [r2, #32]
 8004250:	e02d      	b.n	80042ae <HAL_RCC_OscConfig+0x36e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x334>
 800425a:	4b6a      	ldr	r3, [pc, #424]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4a69      	ldr	r2, [pc, #420]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	6213      	str	r3, [r2, #32]
 8004266:	4b67      	ldr	r3, [pc, #412]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	4a66      	ldr	r2, [pc, #408]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 800426c:	f023 0304 	bic.w	r3, r3, #4
 8004270:	6213      	str	r3, [r2, #32]
 8004272:	e01c      	b.n	80042ae <HAL_RCC_OscConfig+0x36e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b05      	cmp	r3, #5
 800427a:	d10c      	bne.n	8004296 <HAL_RCC_OscConfig+0x356>
 800427c:	4b61      	ldr	r3, [pc, #388]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	4a60      	ldr	r2, [pc, #384]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	6213      	str	r3, [r2, #32]
 8004288:	4b5e      	ldr	r3, [pc, #376]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	4a5d      	ldr	r2, [pc, #372]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6213      	str	r3, [r2, #32]
 8004294:	e00b      	b.n	80042ae <HAL_RCC_OscConfig+0x36e>
 8004296:	4b5b      	ldr	r3, [pc, #364]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	4a5a      	ldr	r2, [pc, #360]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	6213      	str	r3, [r2, #32]
 80042a2:	4b58      	ldr	r3, [pc, #352]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	4a57      	ldr	r2, [pc, #348]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	f023 0304 	bic.w	r3, r3, #4
 80042ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d015      	beq.n	80042e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b6:	f7fc ffc9 	bl	800124c <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fc ffc5 	bl	800124c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0b1      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d4:	4b4b      	ldr	r3, [pc, #300]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ee      	beq.n	80042be <HAL_RCC_OscConfig+0x37e>
 80042e0:	e014      	b.n	800430c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e2:	f7fc ffb3 	bl	800124c <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fc ffaf 	bl	800124c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e09b      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004300:	4b40      	ldr	r3, [pc, #256]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ee      	bne.n	80042ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004312:	4b3c      	ldr	r3, [pc, #240]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	4a3b      	ldr	r2, [pc, #236]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800431c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8087 	beq.w	8004436 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004328:	4b36      	ldr	r3, [pc, #216]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	d061      	beq.n	80043f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	2b02      	cmp	r3, #2
 800433a:	d146      	bne.n	80043ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433c:	4b33      	ldr	r3, [pc, #204]	; (800440c <HAL_RCC_OscConfig+0x4cc>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fc ff83 	bl	800124c <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434a:	f7fc ff7f 	bl	800124c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e06d      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435c:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f0      	bne.n	800434a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004370:	d108      	bne.n	8004384 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	4921      	ldr	r1, [pc, #132]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004384:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a19      	ldr	r1, [r3, #32]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	430b      	orrs	r3, r1
 8004396:	491b      	ldr	r1, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x4cc>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fc ff53 	bl	800124c <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fc ff4f 	bl	800124c <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e03d      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x46a>
 80043c8:	e035      	b.n	8004436 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <HAL_RCC_OscConfig+0x4cc>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fc ff3c 	bl	800124c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fc ff38 	bl	800124c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e026      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCC_OscConfig+0x4c4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x498>
 80043f6:	e01e      	b.n	8004436 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e019      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
 8004404:	40021000 	.word	0x40021000
 8004408:	40007000 	.word	0x40007000
 800440c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_OscConfig+0x500>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	429a      	cmp	r2, r3
 8004422:	d106      	bne.n	8004432 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d001      	beq.n	8004436 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40021000 	.word	0x40021000

08004444 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0d0      	b.n	80045fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d910      	bls.n	8004488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b67      	ldr	r3, [pc, #412]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 0207 	bic.w	r2, r3, #7
 800446e:	4965      	ldr	r1, [pc, #404]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b63      	ldr	r3, [pc, #396]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0b8      	b.n	80045fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a0:	4b59      	ldr	r3, [pc, #356]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4a58      	ldr	r2, [pc, #352]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80044a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b8:	4b53      	ldr	r3, [pc, #332]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4a52      	ldr	r2, [pc, #328]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80044be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c4:	4b50      	ldr	r3, [pc, #320]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	494d      	ldr	r1, [pc, #308]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d040      	beq.n	8004564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d115      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e07f      	b.n	80045fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	4b41      	ldr	r3, [pc, #260]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e073      	b.n	80045fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b3d      	ldr	r3, [pc, #244]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06b      	b.n	80045fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b39      	ldr	r3, [pc, #228]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4936      	ldr	r1, [pc, #216]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004534:	f7fc fe8a 	bl	800124c <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fc fe86 	bl	800124c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e053      	b.n	80045fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004564:	4b27      	ldr	r3, [pc, #156]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d210      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 0207 	bic.w	r2, r3, #7
 800457a:	4922      	ldr	r1, [pc, #136]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b20      	ldr	r3, [pc, #128]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e032      	b.n	80045fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4916      	ldr	r1, [pc, #88]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	490e      	ldr	r1, [pc, #56]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045d2:	f000 f821 	bl	8004618 <HAL_RCC_GetSysClockFreq>
 80045d6:	4602      	mov	r2, r0
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	490a      	ldr	r1, [pc, #40]	; (800460c <HAL_RCC_ClockConfig+0x1c8>)
 80045e4:	5ccb      	ldrb	r3, [r1, r3]
 80045e6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <HAL_RCC_ClockConfig+0x1cc>)
 80045ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_RCC_ClockConfig+0x1d0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fc fde8 	bl	80011c8 <HAL_InitTick>

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40022000 	.word	0x40022000
 8004608:	40021000 	.word	0x40021000
 800460c:	080073d0 	.word	0x080073d0
 8004610:	20000000 	.word	0x20000000
 8004614:	20000004 	.word	0x20000004

08004618 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004618:	b490      	push	{r4, r7}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800461e:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004620:	1d3c      	adds	r4, r7, #4
 8004622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004628:	f240 2301 	movw	r3, #513	; 0x201
 800462c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	2300      	movs	r3, #0
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	2300      	movs	r3, #0
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004642:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b04      	cmp	r3, #4
 8004650:	d002      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x40>
 8004652:	2b08      	cmp	r3, #8
 8004654:	d003      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0x46>
 8004656:	e02b      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004658:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800465a:	623b      	str	r3, [r7, #32]
      break;
 800465c:	e02b      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	0c9b      	lsrs	r3, r3, #18
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	3328      	adds	r3, #40	; 0x28
 8004668:	443b      	add	r3, r7
 800466a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800466e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d012      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	0c5b      	lsrs	r3, r3, #17
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	3328      	adds	r3, #40	; 0x28
 8004686:	443b      	add	r3, r7
 8004688:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800468c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	4a0e      	ldr	r2, [pc, #56]	; (80046cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004692:	fb03 f202 	mul.w	r2, r3, r2
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	e004      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4a0b      	ldr	r2, [pc, #44]	; (80046d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a4:	fb02 f303 	mul.w	r3, r2, r3
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	623b      	str	r3, [r7, #32]
      break;
 80046ae:	e002      	b.n	80046b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80046b2:	623b      	str	r3, [r7, #32]
      break;
 80046b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b6:	6a3b      	ldr	r3, [r7, #32]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc90      	pop	{r4, r7}
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	080073c0 	.word	0x080073c0
 80046c8:	40021000 	.word	0x40021000
 80046cc:	007a1200 	.word	0x007a1200
 80046d0:	003d0900 	.word	0x003d0900

080046d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d8:	4b02      	ldr	r3, [pc, #8]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	20000000 	.word	0x20000000

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff2 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	; (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000
 800470c:	080073e0 	.word	0x080073e0

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004714:	f7ff ffde 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	0adb      	lsrs	r3, r3, #11
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	080073e0 	.word	0x080073e0

08004738 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004740:	4b0a      	ldr	r3, [pc, #40]	; (800476c <RCC_Delay+0x34>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <RCC_Delay+0x38>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	0a5b      	lsrs	r3, r3, #9
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004754:	bf00      	nop
  }
  while (Delay --);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	60fa      	str	r2, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f9      	bne.n	8004754 <RCC_Delay+0x1c>
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr
 800476c:	20000000 	.word	0x20000000
 8004770:	10624dd3 	.word	0x10624dd3

08004774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e03f      	b.n	8004806 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fc fb82 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2224      	movs	r2, #36	; 0x24
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f829 	bl	8004810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800484a:	f023 030c 	bic.w	r3, r3, #12
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	430b      	orrs	r3, r1
 8004856:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2c      	ldr	r2, [pc, #176]	; (8004924 <UART_SetConfig+0x114>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d103      	bne.n	8004880 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004878:	f7ff ff4a 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	e002      	b.n	8004886 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004880:	f7ff ff32 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8004884:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009a      	lsls	r2, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	4a22      	ldr	r2, [pc, #136]	; (8004928 <UART_SetConfig+0x118>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	0119      	lsls	r1, r3, #4
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009a      	lsls	r2, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048bc:	4b1a      	ldr	r3, [pc, #104]	; (8004928 <UART_SetConfig+0x118>)
 80048be:	fba3 0302 	umull	r0, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2064      	movs	r0, #100	; 0x64
 80048c6:	fb00 f303 	mul.w	r3, r0, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	3332      	adds	r3, #50	; 0x32
 80048d0:	4a15      	ldr	r2, [pc, #84]	; (8004928 <UART_SetConfig+0x118>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048dc:	4419      	add	r1, r3
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009a      	lsls	r2, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <UART_SetConfig+0x118>)
 80048f6:	fba3 0302 	umull	r0, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2064      	movs	r0, #100	; 0x64
 80048fe:	fb00 f303 	mul.w	r3, r0, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	3332      	adds	r3, #50	; 0x32
 8004908:	4a07      	ldr	r2, [pc, #28]	; (8004928 <UART_SetConfig+0x118>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	440a      	add	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40013800 	.word	0x40013800
 8004928:	51eb851f 	.word	0x51eb851f

0800492c <__errno>:
 800492c:	4b01      	ldr	r3, [pc, #4]	; (8004934 <__errno+0x8>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	2000000c 	.word	0x2000000c

08004938 <__libc_init_array>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	2600      	movs	r6, #0
 800493c:	4d0c      	ldr	r5, [pc, #48]	; (8004970 <__libc_init_array+0x38>)
 800493e:	4c0d      	ldr	r4, [pc, #52]	; (8004974 <__libc_init_array+0x3c>)
 8004940:	1b64      	subs	r4, r4, r5
 8004942:	10a4      	asrs	r4, r4, #2
 8004944:	42a6      	cmp	r6, r4
 8004946:	d109      	bne.n	800495c <__libc_init_array+0x24>
 8004948:	f002 fd2e 	bl	80073a8 <_init>
 800494c:	2600      	movs	r6, #0
 800494e:	4d0a      	ldr	r5, [pc, #40]	; (8004978 <__libc_init_array+0x40>)
 8004950:	4c0a      	ldr	r4, [pc, #40]	; (800497c <__libc_init_array+0x44>)
 8004952:	1b64      	subs	r4, r4, r5
 8004954:	10a4      	asrs	r4, r4, #2
 8004956:	42a6      	cmp	r6, r4
 8004958:	d105      	bne.n	8004966 <__libc_init_array+0x2e>
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004960:	4798      	blx	r3
 8004962:	3601      	adds	r6, #1
 8004964:	e7ee      	b.n	8004944 <__libc_init_array+0xc>
 8004966:	f855 3b04 	ldr.w	r3, [r5], #4
 800496a:	4798      	blx	r3
 800496c:	3601      	adds	r6, #1
 800496e:	e7f2      	b.n	8004956 <__libc_init_array+0x1e>
 8004970:	080077c4 	.word	0x080077c4
 8004974:	080077c4 	.word	0x080077c4
 8004978:	080077c4 	.word	0x080077c4
 800497c:	080077c8 	.word	0x080077c8

08004980 <memset>:
 8004980:	4603      	mov	r3, r0
 8004982:	4402      	add	r2, r0
 8004984:	4293      	cmp	r3, r2
 8004986:	d100      	bne.n	800498a <memset+0xa>
 8004988:	4770      	bx	lr
 800498a:	f803 1b01 	strb.w	r1, [r3], #1
 800498e:	e7f9      	b.n	8004984 <memset+0x4>

08004990 <__cvt>:
 8004990:	2b00      	cmp	r3, #0
 8004992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004996:	461f      	mov	r7, r3
 8004998:	bfbb      	ittet	lt
 800499a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800499e:	461f      	movlt	r7, r3
 80049a0:	2300      	movge	r3, #0
 80049a2:	232d      	movlt	r3, #45	; 0x2d
 80049a4:	b088      	sub	sp, #32
 80049a6:	4614      	mov	r4, r2
 80049a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80049ac:	7013      	strb	r3, [r2, #0]
 80049ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80049b4:	f023 0820 	bic.w	r8, r3, #32
 80049b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049bc:	d005      	beq.n	80049ca <__cvt+0x3a>
 80049be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049c2:	d100      	bne.n	80049c6 <__cvt+0x36>
 80049c4:	3501      	adds	r5, #1
 80049c6:	2302      	movs	r3, #2
 80049c8:	e000      	b.n	80049cc <__cvt+0x3c>
 80049ca:	2303      	movs	r3, #3
 80049cc:	aa07      	add	r2, sp, #28
 80049ce:	9204      	str	r2, [sp, #16]
 80049d0:	aa06      	add	r2, sp, #24
 80049d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049d6:	e9cd 3500 	strd	r3, r5, [sp]
 80049da:	4622      	mov	r2, r4
 80049dc:	463b      	mov	r3, r7
 80049de:	f000 fcc3 	bl	8005368 <_dtoa_r>
 80049e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049e6:	4606      	mov	r6, r0
 80049e8:	d102      	bne.n	80049f0 <__cvt+0x60>
 80049ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049ec:	07db      	lsls	r3, r3, #31
 80049ee:	d522      	bpl.n	8004a36 <__cvt+0xa6>
 80049f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049f4:	eb06 0905 	add.w	r9, r6, r5
 80049f8:	d110      	bne.n	8004a1c <__cvt+0x8c>
 80049fa:	7833      	ldrb	r3, [r6, #0]
 80049fc:	2b30      	cmp	r3, #48	; 0x30
 80049fe:	d10a      	bne.n	8004a16 <__cvt+0x86>
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	4620      	mov	r0, r4
 8004a06:	4639      	mov	r1, r7
 8004a08:	f7fb ffce 	bl	80009a8 <__aeabi_dcmpeq>
 8004a0c:	b918      	cbnz	r0, 8004a16 <__cvt+0x86>
 8004a0e:	f1c5 0501 	rsb	r5, r5, #1
 8004a12:	f8ca 5000 	str.w	r5, [sl]
 8004a16:	f8da 3000 	ldr.w	r3, [sl]
 8004a1a:	4499      	add	r9, r3
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2300      	movs	r3, #0
 8004a20:	4620      	mov	r0, r4
 8004a22:	4639      	mov	r1, r7
 8004a24:	f7fb ffc0 	bl	80009a8 <__aeabi_dcmpeq>
 8004a28:	b108      	cbz	r0, 8004a2e <__cvt+0x9e>
 8004a2a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a2e:	2230      	movs	r2, #48	; 0x30
 8004a30:	9b07      	ldr	r3, [sp, #28]
 8004a32:	454b      	cmp	r3, r9
 8004a34:	d307      	bcc.n	8004a46 <__cvt+0xb6>
 8004a36:	4630      	mov	r0, r6
 8004a38:	9b07      	ldr	r3, [sp, #28]
 8004a3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a3c:	1b9b      	subs	r3, r3, r6
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	b008      	add	sp, #32
 8004a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a46:	1c59      	adds	r1, r3, #1
 8004a48:	9107      	str	r1, [sp, #28]
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	e7f0      	b.n	8004a30 <__cvt+0xa0>

08004a4e <__exponent>:
 8004a4e:	4603      	mov	r3, r0
 8004a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a52:	2900      	cmp	r1, #0
 8004a54:	f803 2b02 	strb.w	r2, [r3], #2
 8004a58:	bfb6      	itet	lt
 8004a5a:	222d      	movlt	r2, #45	; 0x2d
 8004a5c:	222b      	movge	r2, #43	; 0x2b
 8004a5e:	4249      	neglt	r1, r1
 8004a60:	2909      	cmp	r1, #9
 8004a62:	7042      	strb	r2, [r0, #1]
 8004a64:	dd2b      	ble.n	8004abe <__exponent+0x70>
 8004a66:	f10d 0407 	add.w	r4, sp, #7
 8004a6a:	46a4      	mov	ip, r4
 8004a6c:	270a      	movs	r7, #10
 8004a6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a72:	460a      	mov	r2, r1
 8004a74:	46a6      	mov	lr, r4
 8004a76:	fb07 1516 	mls	r5, r7, r6, r1
 8004a7a:	2a63      	cmp	r2, #99	; 0x63
 8004a7c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004a80:	4631      	mov	r1, r6
 8004a82:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a8a:	dcf0      	bgt.n	8004a6e <__exponent+0x20>
 8004a8c:	3130      	adds	r1, #48	; 0x30
 8004a8e:	f1ae 0502 	sub.w	r5, lr, #2
 8004a92:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a96:	4629      	mov	r1, r5
 8004a98:	1c44      	adds	r4, r0, #1
 8004a9a:	4561      	cmp	r1, ip
 8004a9c:	d30a      	bcc.n	8004ab4 <__exponent+0x66>
 8004a9e:	f10d 0209 	add.w	r2, sp, #9
 8004aa2:	eba2 020e 	sub.w	r2, r2, lr
 8004aa6:	4565      	cmp	r5, ip
 8004aa8:	bf88      	it	hi
 8004aaa:	2200      	movhi	r2, #0
 8004aac:	4413      	add	r3, r2
 8004aae:	1a18      	subs	r0, r3, r0
 8004ab0:	b003      	add	sp, #12
 8004ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ab8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004abc:	e7ed      	b.n	8004a9a <__exponent+0x4c>
 8004abe:	2330      	movs	r3, #48	; 0x30
 8004ac0:	3130      	adds	r1, #48	; 0x30
 8004ac2:	7083      	strb	r3, [r0, #2]
 8004ac4:	70c1      	strb	r1, [r0, #3]
 8004ac6:	1d03      	adds	r3, r0, #4
 8004ac8:	e7f1      	b.n	8004aae <__exponent+0x60>
	...

08004acc <_printf_float>:
 8004acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad0:	b091      	sub	sp, #68	; 0x44
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004ad8:	4616      	mov	r6, r2
 8004ada:	461f      	mov	r7, r3
 8004adc:	4605      	mov	r5, r0
 8004ade:	f001 fa31 	bl	8005f44 <_localeconv_r>
 8004ae2:	6803      	ldr	r3, [r0, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae8:	f7fb fb32 	bl	8000150 <strlen>
 8004aec:	2300      	movs	r3, #0
 8004aee:	930e      	str	r3, [sp, #56]	; 0x38
 8004af0:	f8d8 3000 	ldr.w	r3, [r8]
 8004af4:	900a      	str	r0, [sp, #40]	; 0x28
 8004af6:	3307      	adds	r3, #7
 8004af8:	f023 0307 	bic.w	r3, r3, #7
 8004afc:	f103 0208 	add.w	r2, r3, #8
 8004b00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004b04:	f8d4 b000 	ldr.w	fp, [r4]
 8004b08:	f8c8 2000 	str.w	r2, [r8]
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b14:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004b18:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004b1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b22:	4640      	mov	r0, r8
 8004b24:	4b9c      	ldr	r3, [pc, #624]	; (8004d98 <_printf_float+0x2cc>)
 8004b26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b28:	f7fb ff70 	bl	8000a0c <__aeabi_dcmpun>
 8004b2c:	bb70      	cbnz	r0, 8004b8c <_printf_float+0xc0>
 8004b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b32:	4640      	mov	r0, r8
 8004b34:	4b98      	ldr	r3, [pc, #608]	; (8004d98 <_printf_float+0x2cc>)
 8004b36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b38:	f7fb ff4a 	bl	80009d0 <__aeabi_dcmple>
 8004b3c:	bb30      	cbnz	r0, 8004b8c <_printf_float+0xc0>
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2300      	movs	r3, #0
 8004b42:	4640      	mov	r0, r8
 8004b44:	4651      	mov	r1, sl
 8004b46:	f7fb ff39 	bl	80009bc <__aeabi_dcmplt>
 8004b4a:	b110      	cbz	r0, 8004b52 <_printf_float+0x86>
 8004b4c:	232d      	movs	r3, #45	; 0x2d
 8004b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b52:	4b92      	ldr	r3, [pc, #584]	; (8004d9c <_printf_float+0x2d0>)
 8004b54:	4892      	ldr	r0, [pc, #584]	; (8004da0 <_printf_float+0x2d4>)
 8004b56:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b5a:	bf94      	ite	ls
 8004b5c:	4698      	movls	r8, r3
 8004b5e:	4680      	movhi	r8, r0
 8004b60:	2303      	movs	r3, #3
 8004b62:	f04f 0a00 	mov.w	sl, #0
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	f02b 0304 	bic.w	r3, fp, #4
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	4633      	mov	r3, r6
 8004b70:	4621      	mov	r1, r4
 8004b72:	4628      	mov	r0, r5
 8004b74:	9700      	str	r7, [sp, #0]
 8004b76:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b78:	f000 f9d4 	bl	8004f24 <_printf_common>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f040 8090 	bne.w	8004ca2 <_printf_float+0x1d6>
 8004b82:	f04f 30ff 	mov.w	r0, #4294967295
 8004b86:	b011      	add	sp, #68	; 0x44
 8004b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	4653      	mov	r3, sl
 8004b90:	4640      	mov	r0, r8
 8004b92:	4651      	mov	r1, sl
 8004b94:	f7fb ff3a 	bl	8000a0c <__aeabi_dcmpun>
 8004b98:	b148      	cbz	r0, 8004bae <_printf_float+0xe2>
 8004b9a:	f1ba 0f00 	cmp.w	sl, #0
 8004b9e:	bfb8      	it	lt
 8004ba0:	232d      	movlt	r3, #45	; 0x2d
 8004ba2:	4880      	ldr	r0, [pc, #512]	; (8004da4 <_printf_float+0x2d8>)
 8004ba4:	bfb8      	it	lt
 8004ba6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004baa:	4b7f      	ldr	r3, [pc, #508]	; (8004da8 <_printf_float+0x2dc>)
 8004bac:	e7d3      	b.n	8004b56 <_printf_float+0x8a>
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	d142      	bne.n	8004c3e <_printf_float+0x172>
 8004bb8:	2306      	movs	r3, #6
 8004bba:	6063      	str	r3, [r4, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	9206      	str	r2, [sp, #24]
 8004bc0:	aa0e      	add	r2, sp, #56	; 0x38
 8004bc2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004bc6:	aa0d      	add	r2, sp, #52	; 0x34
 8004bc8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004bcc:	9203      	str	r2, [sp, #12]
 8004bce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004bd2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	6863      	ldr	r3, [r4, #4]
 8004bda:	4642      	mov	r2, r8
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	4628      	mov	r0, r5
 8004be0:	4653      	mov	r3, sl
 8004be2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004be4:	f7ff fed4 	bl	8004990 <__cvt>
 8004be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bea:	4680      	mov	r8, r0
 8004bec:	2947      	cmp	r1, #71	; 0x47
 8004bee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004bf0:	d108      	bne.n	8004c04 <_printf_float+0x138>
 8004bf2:	1cc8      	adds	r0, r1, #3
 8004bf4:	db02      	blt.n	8004bfc <_printf_float+0x130>
 8004bf6:	6863      	ldr	r3, [r4, #4]
 8004bf8:	4299      	cmp	r1, r3
 8004bfa:	dd40      	ble.n	8004c7e <_printf_float+0x1b2>
 8004bfc:	f1a9 0902 	sub.w	r9, r9, #2
 8004c00:	fa5f f989 	uxtb.w	r9, r9
 8004c04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c08:	d81f      	bhi.n	8004c4a <_printf_float+0x17e>
 8004c0a:	464a      	mov	r2, r9
 8004c0c:	3901      	subs	r1, #1
 8004c0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c12:	910d      	str	r1, [sp, #52]	; 0x34
 8004c14:	f7ff ff1b 	bl	8004a4e <__exponent>
 8004c18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c1a:	4682      	mov	sl, r0
 8004c1c:	1813      	adds	r3, r2, r0
 8004c1e:	2a01      	cmp	r2, #1
 8004c20:	6123      	str	r3, [r4, #16]
 8004c22:	dc02      	bgt.n	8004c2a <_printf_float+0x15e>
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	07d2      	lsls	r2, r2, #31
 8004c28:	d501      	bpl.n	8004c2e <_printf_float+0x162>
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d09b      	beq.n	8004b6e <_printf_float+0xa2>
 8004c36:	232d      	movs	r3, #45	; 0x2d
 8004c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c3c:	e797      	b.n	8004b6e <_printf_float+0xa2>
 8004c3e:	2947      	cmp	r1, #71	; 0x47
 8004c40:	d1bc      	bne.n	8004bbc <_printf_float+0xf0>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1ba      	bne.n	8004bbc <_printf_float+0xf0>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e7b7      	b.n	8004bba <_printf_float+0xee>
 8004c4a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c4e:	d118      	bne.n	8004c82 <_printf_float+0x1b6>
 8004c50:	2900      	cmp	r1, #0
 8004c52:	6863      	ldr	r3, [r4, #4]
 8004c54:	dd0b      	ble.n	8004c6e <_printf_float+0x1a2>
 8004c56:	6121      	str	r1, [r4, #16]
 8004c58:	b913      	cbnz	r3, 8004c60 <_printf_float+0x194>
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	07d0      	lsls	r0, r2, #31
 8004c5e:	d502      	bpl.n	8004c66 <_printf_float+0x19a>
 8004c60:	3301      	adds	r3, #1
 8004c62:	440b      	add	r3, r1
 8004c64:	6123      	str	r3, [r4, #16]
 8004c66:	f04f 0a00 	mov.w	sl, #0
 8004c6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c6c:	e7df      	b.n	8004c2e <_printf_float+0x162>
 8004c6e:	b913      	cbnz	r3, 8004c76 <_printf_float+0x1aa>
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	07d2      	lsls	r2, r2, #31
 8004c74:	d501      	bpl.n	8004c7a <_printf_float+0x1ae>
 8004c76:	3302      	adds	r3, #2
 8004c78:	e7f4      	b.n	8004c64 <_printf_float+0x198>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e7f2      	b.n	8004c64 <_printf_float+0x198>
 8004c7e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c84:	4299      	cmp	r1, r3
 8004c86:	db05      	blt.n	8004c94 <_printf_float+0x1c8>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	6121      	str	r1, [r4, #16]
 8004c8c:	07d8      	lsls	r0, r3, #31
 8004c8e:	d5ea      	bpl.n	8004c66 <_printf_float+0x19a>
 8004c90:	1c4b      	adds	r3, r1, #1
 8004c92:	e7e7      	b.n	8004c64 <_printf_float+0x198>
 8004c94:	2900      	cmp	r1, #0
 8004c96:	bfcc      	ite	gt
 8004c98:	2201      	movgt	r2, #1
 8004c9a:	f1c1 0202 	rsble	r2, r1, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	e7e0      	b.n	8004c64 <_printf_float+0x198>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	055a      	lsls	r2, r3, #21
 8004ca6:	d407      	bmi.n	8004cb8 <_printf_float+0x1ec>
 8004ca8:	6923      	ldr	r3, [r4, #16]
 8004caa:	4642      	mov	r2, r8
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d12b      	bne.n	8004d0e <_printf_float+0x242>
 8004cb6:	e764      	b.n	8004b82 <_printf_float+0xb6>
 8004cb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cbc:	f240 80dd 	bls.w	8004e7a <_printf_float+0x3ae>
 8004cc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f7fb fe6e 	bl	80009a8 <__aeabi_dcmpeq>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d033      	beq.n	8004d38 <_printf_float+0x26c>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	4a35      	ldr	r2, [pc, #212]	; (8004dac <_printf_float+0x2e0>)
 8004cd8:	47b8      	blx	r7
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f43f af51 	beq.w	8004b82 <_printf_float+0xb6>
 8004ce0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	db02      	blt.n	8004cee <_printf_float+0x222>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	07d8      	lsls	r0, r3, #31
 8004cec:	d50f      	bpl.n	8004d0e <_printf_float+0x242>
 8004cee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	f43f af42 	beq.w	8004b82 <_printf_float+0xb6>
 8004cfe:	f04f 0800 	mov.w	r8, #0
 8004d02:	f104 091a 	add.w	r9, r4, #26
 8004d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	4543      	cmp	r3, r8
 8004d0c:	dc09      	bgt.n	8004d22 <_printf_float+0x256>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	079b      	lsls	r3, r3, #30
 8004d12:	f100 8102 	bmi.w	8004f1a <_printf_float+0x44e>
 8004d16:	68e0      	ldr	r0, [r4, #12]
 8004d18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d1a:	4298      	cmp	r0, r3
 8004d1c:	bfb8      	it	lt
 8004d1e:	4618      	movlt	r0, r3
 8004d20:	e731      	b.n	8004b86 <_printf_float+0xba>
 8004d22:	2301      	movs	r3, #1
 8004d24:	464a      	mov	r2, r9
 8004d26:	4631      	mov	r1, r6
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b8      	blx	r7
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f43f af28 	beq.w	8004b82 <_printf_float+0xb6>
 8004d32:	f108 0801 	add.w	r8, r8, #1
 8004d36:	e7e6      	b.n	8004d06 <_printf_float+0x23a>
 8004d38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dc38      	bgt.n	8004db0 <_printf_float+0x2e4>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	4631      	mov	r1, r6
 8004d42:	4628      	mov	r0, r5
 8004d44:	4a19      	ldr	r2, [pc, #100]	; (8004dac <_printf_float+0x2e0>)
 8004d46:	47b8      	blx	r7
 8004d48:	3001      	adds	r0, #1
 8004d4a:	f43f af1a 	beq.w	8004b82 <_printf_float+0xb6>
 8004d4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d52:	4313      	orrs	r3, r2
 8004d54:	d102      	bne.n	8004d5c <_printf_float+0x290>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	07d9      	lsls	r1, r3, #31
 8004d5a:	d5d8      	bpl.n	8004d0e <_printf_float+0x242>
 8004d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d60:	4631      	mov	r1, r6
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	f43f af0b 	beq.w	8004b82 <_printf_float+0xb6>
 8004d6c:	f04f 0900 	mov.w	r9, #0
 8004d70:	f104 0a1a 	add.w	sl, r4, #26
 8004d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d76:	425b      	negs	r3, r3
 8004d78:	454b      	cmp	r3, r9
 8004d7a:	dc01      	bgt.n	8004d80 <_printf_float+0x2b4>
 8004d7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d7e:	e794      	b.n	8004caa <_printf_float+0x1de>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4652      	mov	r2, sl
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f aef9 	beq.w	8004b82 <_printf_float+0xb6>
 8004d90:	f109 0901 	add.w	r9, r9, #1
 8004d94:	e7ee      	b.n	8004d74 <_printf_float+0x2a8>
 8004d96:	bf00      	nop
 8004d98:	7fefffff 	.word	0x7fefffff
 8004d9c:	080073ec 	.word	0x080073ec
 8004da0:	080073f0 	.word	0x080073f0
 8004da4:	080073f8 	.word	0x080073f8
 8004da8:	080073f4 	.word	0x080073f4
 8004dac:	080073fc 	.word	0x080073fc
 8004db0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004db2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004db4:	429a      	cmp	r2, r3
 8004db6:	bfa8      	it	ge
 8004db8:	461a      	movge	r2, r3
 8004dba:	2a00      	cmp	r2, #0
 8004dbc:	4691      	mov	r9, r2
 8004dbe:	dc37      	bgt.n	8004e30 <_printf_float+0x364>
 8004dc0:	f04f 0b00 	mov.w	fp, #0
 8004dc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dc8:	f104 021a 	add.w	r2, r4, #26
 8004dcc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004dd0:	ebaa 0309 	sub.w	r3, sl, r9
 8004dd4:	455b      	cmp	r3, fp
 8004dd6:	dc33      	bgt.n	8004e40 <_printf_float+0x374>
 8004dd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	db3b      	blt.n	8004e58 <_printf_float+0x38c>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07da      	lsls	r2, r3, #31
 8004de4:	d438      	bmi.n	8004e58 <_printf_float+0x38c>
 8004de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004de8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004dea:	eba3 020a 	sub.w	r2, r3, sl
 8004dee:	eba3 0901 	sub.w	r9, r3, r1
 8004df2:	4591      	cmp	r9, r2
 8004df4:	bfa8      	it	ge
 8004df6:	4691      	movge	r9, r2
 8004df8:	f1b9 0f00 	cmp.w	r9, #0
 8004dfc:	dc34      	bgt.n	8004e68 <_printf_float+0x39c>
 8004dfe:	f04f 0800 	mov.w	r8, #0
 8004e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e06:	f104 0a1a 	add.w	sl, r4, #26
 8004e0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	eba3 0309 	sub.w	r3, r3, r9
 8004e14:	4543      	cmp	r3, r8
 8004e16:	f77f af7a 	ble.w	8004d0e <_printf_float+0x242>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4628      	mov	r0, r5
 8004e22:	47b8      	blx	r7
 8004e24:	3001      	adds	r0, #1
 8004e26:	f43f aeac 	beq.w	8004b82 <_printf_float+0xb6>
 8004e2a:	f108 0801 	add.w	r8, r8, #1
 8004e2e:	e7ec      	b.n	8004e0a <_printf_float+0x33e>
 8004e30:	4613      	mov	r3, r2
 8004e32:	4631      	mov	r1, r6
 8004e34:	4642      	mov	r2, r8
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d1c0      	bne.n	8004dc0 <_printf_float+0x2f4>
 8004e3e:	e6a0      	b.n	8004b82 <_printf_float+0xb6>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f ae99 	beq.w	8004b82 <_printf_float+0xb6>
 8004e50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e52:	f10b 0b01 	add.w	fp, fp, #1
 8004e56:	e7b9      	b.n	8004dcc <_printf_float+0x300>
 8004e58:	4631      	mov	r1, r6
 8004e5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b8      	blx	r7
 8004e62:	3001      	adds	r0, #1
 8004e64:	d1bf      	bne.n	8004de6 <_printf_float+0x31a>
 8004e66:	e68c      	b.n	8004b82 <_printf_float+0xb6>
 8004e68:	464b      	mov	r3, r9
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	eb08 020a 	add.w	r2, r8, sl
 8004e72:	47b8      	blx	r7
 8004e74:	3001      	adds	r0, #1
 8004e76:	d1c2      	bne.n	8004dfe <_printf_float+0x332>
 8004e78:	e683      	b.n	8004b82 <_printf_float+0xb6>
 8004e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e7c:	2a01      	cmp	r2, #1
 8004e7e:	dc01      	bgt.n	8004e84 <_printf_float+0x3b8>
 8004e80:	07db      	lsls	r3, r3, #31
 8004e82:	d537      	bpl.n	8004ef4 <_printf_float+0x428>
 8004e84:	2301      	movs	r3, #1
 8004e86:	4642      	mov	r2, r8
 8004e88:	4631      	mov	r1, r6
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b8      	blx	r7
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f43f ae77 	beq.w	8004b82 <_printf_float+0xb6>
 8004e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e98:	4631      	mov	r1, r6
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	47b8      	blx	r7
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	f43f ae6f 	beq.w	8004b82 <_printf_float+0xb6>
 8004ea4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f7fb fd7c 	bl	80009a8 <__aeabi_dcmpeq>
 8004eb0:	b9d8      	cbnz	r0, 8004eea <_printf_float+0x41e>
 8004eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eb4:	f108 0201 	add.w	r2, r8, #1
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d10e      	bne.n	8004ee2 <_printf_float+0x416>
 8004ec4:	e65d      	b.n	8004b82 <_printf_float+0xb6>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	464a      	mov	r2, r9
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	47b8      	blx	r7
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	f43f ae56 	beq.w	8004b82 <_printf_float+0xb6>
 8004ed6:	f108 0801 	add.w	r8, r8, #1
 8004eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004edc:	3b01      	subs	r3, #1
 8004ede:	4543      	cmp	r3, r8
 8004ee0:	dcf1      	bgt.n	8004ec6 <_printf_float+0x3fa>
 8004ee2:	4653      	mov	r3, sl
 8004ee4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ee8:	e6e0      	b.n	8004cac <_printf_float+0x1e0>
 8004eea:	f04f 0800 	mov.w	r8, #0
 8004eee:	f104 091a 	add.w	r9, r4, #26
 8004ef2:	e7f2      	b.n	8004eda <_printf_float+0x40e>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	e7df      	b.n	8004eba <_printf_float+0x3ee>
 8004efa:	2301      	movs	r3, #1
 8004efc:	464a      	mov	r2, r9
 8004efe:	4631      	mov	r1, r6
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b8      	blx	r7
 8004f04:	3001      	adds	r0, #1
 8004f06:	f43f ae3c 	beq.w	8004b82 <_printf_float+0xb6>
 8004f0a:	f108 0801 	add.w	r8, r8, #1
 8004f0e:	68e3      	ldr	r3, [r4, #12]
 8004f10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f12:	1a5b      	subs	r3, r3, r1
 8004f14:	4543      	cmp	r3, r8
 8004f16:	dcf0      	bgt.n	8004efa <_printf_float+0x42e>
 8004f18:	e6fd      	b.n	8004d16 <_printf_float+0x24a>
 8004f1a:	f04f 0800 	mov.w	r8, #0
 8004f1e:	f104 0919 	add.w	r9, r4, #25
 8004f22:	e7f4      	b.n	8004f0e <_printf_float+0x442>

08004f24 <_printf_common>:
 8004f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	4616      	mov	r6, r2
 8004f2a:	4699      	mov	r9, r3
 8004f2c:	688a      	ldr	r2, [r1, #8]
 8004f2e:	690b      	ldr	r3, [r1, #16]
 8004f30:	4607      	mov	r7, r0
 8004f32:	4293      	cmp	r3, r2
 8004f34:	bfb8      	it	lt
 8004f36:	4613      	movlt	r3, r2
 8004f38:	6033      	str	r3, [r6, #0]
 8004f3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f3e:	460c      	mov	r4, r1
 8004f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f44:	b10a      	cbz	r2, 8004f4a <_printf_common+0x26>
 8004f46:	3301      	adds	r3, #1
 8004f48:	6033      	str	r3, [r6, #0]
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	0699      	lsls	r1, r3, #26
 8004f4e:	bf42      	ittt	mi
 8004f50:	6833      	ldrmi	r3, [r6, #0]
 8004f52:	3302      	addmi	r3, #2
 8004f54:	6033      	strmi	r3, [r6, #0]
 8004f56:	6825      	ldr	r5, [r4, #0]
 8004f58:	f015 0506 	ands.w	r5, r5, #6
 8004f5c:	d106      	bne.n	8004f6c <_printf_common+0x48>
 8004f5e:	f104 0a19 	add.w	sl, r4, #25
 8004f62:	68e3      	ldr	r3, [r4, #12]
 8004f64:	6832      	ldr	r2, [r6, #0]
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	42ab      	cmp	r3, r5
 8004f6a:	dc28      	bgt.n	8004fbe <_printf_common+0x9a>
 8004f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f70:	1e13      	subs	r3, r2, #0
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	bf18      	it	ne
 8004f76:	2301      	movne	r3, #1
 8004f78:	0692      	lsls	r2, r2, #26
 8004f7a:	d42d      	bmi.n	8004fd8 <_printf_common+0xb4>
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	4638      	mov	r0, r7
 8004f80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f84:	47c0      	blx	r8
 8004f86:	3001      	adds	r0, #1
 8004f88:	d020      	beq.n	8004fcc <_printf_common+0xa8>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	68e5      	ldr	r5, [r4, #12]
 8004f8e:	f003 0306 	and.w	r3, r3, #6
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	bf18      	it	ne
 8004f96:	2500      	movne	r5, #0
 8004f98:	6832      	ldr	r2, [r6, #0]
 8004f9a:	f04f 0600 	mov.w	r6, #0
 8004f9e:	68a3      	ldr	r3, [r4, #8]
 8004fa0:	bf08      	it	eq
 8004fa2:	1aad      	subeq	r5, r5, r2
 8004fa4:	6922      	ldr	r2, [r4, #16]
 8004fa6:	bf08      	it	eq
 8004fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fac:	4293      	cmp	r3, r2
 8004fae:	bfc4      	itt	gt
 8004fb0:	1a9b      	subgt	r3, r3, r2
 8004fb2:	18ed      	addgt	r5, r5, r3
 8004fb4:	341a      	adds	r4, #26
 8004fb6:	42b5      	cmp	r5, r6
 8004fb8:	d11a      	bne.n	8004ff0 <_printf_common+0xcc>
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e008      	b.n	8004fd0 <_printf_common+0xac>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	4652      	mov	r2, sl
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	47c0      	blx	r8
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d103      	bne.n	8004fd4 <_printf_common+0xb0>
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd4:	3501      	adds	r5, #1
 8004fd6:	e7c4      	b.n	8004f62 <_printf_common+0x3e>
 8004fd8:	2030      	movs	r0, #48	; 0x30
 8004fda:	18e1      	adds	r1, r4, r3
 8004fdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fe6:	4422      	add	r2, r4
 8004fe8:	3302      	adds	r3, #2
 8004fea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fee:	e7c5      	b.n	8004f7c <_printf_common+0x58>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	47c0      	blx	r8
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d0e6      	beq.n	8004fcc <_printf_common+0xa8>
 8004ffe:	3601      	adds	r6, #1
 8005000:	e7d9      	b.n	8004fb6 <_printf_common+0x92>
	...

08005004 <_printf_i>:
 8005004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005008:	7e0f      	ldrb	r7, [r1, #24]
 800500a:	4691      	mov	r9, r2
 800500c:	2f78      	cmp	r7, #120	; 0x78
 800500e:	4680      	mov	r8, r0
 8005010:	460c      	mov	r4, r1
 8005012:	469a      	mov	sl, r3
 8005014:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005016:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800501a:	d807      	bhi.n	800502c <_printf_i+0x28>
 800501c:	2f62      	cmp	r7, #98	; 0x62
 800501e:	d80a      	bhi.n	8005036 <_printf_i+0x32>
 8005020:	2f00      	cmp	r7, #0
 8005022:	f000 80d9 	beq.w	80051d8 <_printf_i+0x1d4>
 8005026:	2f58      	cmp	r7, #88	; 0x58
 8005028:	f000 80a4 	beq.w	8005174 <_printf_i+0x170>
 800502c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005034:	e03a      	b.n	80050ac <_printf_i+0xa8>
 8005036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800503a:	2b15      	cmp	r3, #21
 800503c:	d8f6      	bhi.n	800502c <_printf_i+0x28>
 800503e:	a101      	add	r1, pc, #4	; (adr r1, 8005044 <_printf_i+0x40>)
 8005040:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005044:	0800509d 	.word	0x0800509d
 8005048:	080050b1 	.word	0x080050b1
 800504c:	0800502d 	.word	0x0800502d
 8005050:	0800502d 	.word	0x0800502d
 8005054:	0800502d 	.word	0x0800502d
 8005058:	0800502d 	.word	0x0800502d
 800505c:	080050b1 	.word	0x080050b1
 8005060:	0800502d 	.word	0x0800502d
 8005064:	0800502d 	.word	0x0800502d
 8005068:	0800502d 	.word	0x0800502d
 800506c:	0800502d 	.word	0x0800502d
 8005070:	080051bf 	.word	0x080051bf
 8005074:	080050e1 	.word	0x080050e1
 8005078:	080051a1 	.word	0x080051a1
 800507c:	0800502d 	.word	0x0800502d
 8005080:	0800502d 	.word	0x0800502d
 8005084:	080051e1 	.word	0x080051e1
 8005088:	0800502d 	.word	0x0800502d
 800508c:	080050e1 	.word	0x080050e1
 8005090:	0800502d 	.word	0x0800502d
 8005094:	0800502d 	.word	0x0800502d
 8005098:	080051a9 	.word	0x080051a9
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	1d1a      	adds	r2, r3, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	602a      	str	r2, [r5, #0]
 80050a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0a4      	b.n	80051fa <_printf_i+0x1f6>
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	6829      	ldr	r1, [r5, #0]
 80050b4:	0606      	lsls	r6, r0, #24
 80050b6:	f101 0304 	add.w	r3, r1, #4
 80050ba:	d50a      	bpl.n	80050d2 <_printf_i+0xce>
 80050bc:	680e      	ldr	r6, [r1, #0]
 80050be:	602b      	str	r3, [r5, #0]
 80050c0:	2e00      	cmp	r6, #0
 80050c2:	da03      	bge.n	80050cc <_printf_i+0xc8>
 80050c4:	232d      	movs	r3, #45	; 0x2d
 80050c6:	4276      	negs	r6, r6
 80050c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050cc:	230a      	movs	r3, #10
 80050ce:	485e      	ldr	r0, [pc, #376]	; (8005248 <_printf_i+0x244>)
 80050d0:	e019      	b.n	8005106 <_printf_i+0x102>
 80050d2:	680e      	ldr	r6, [r1, #0]
 80050d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	bf18      	it	ne
 80050dc:	b236      	sxthne	r6, r6
 80050de:	e7ef      	b.n	80050c0 <_printf_i+0xbc>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	6820      	ldr	r0, [r4, #0]
 80050e4:	1d19      	adds	r1, r3, #4
 80050e6:	6029      	str	r1, [r5, #0]
 80050e8:	0601      	lsls	r1, r0, #24
 80050ea:	d501      	bpl.n	80050f0 <_printf_i+0xec>
 80050ec:	681e      	ldr	r6, [r3, #0]
 80050ee:	e002      	b.n	80050f6 <_printf_i+0xf2>
 80050f0:	0646      	lsls	r6, r0, #25
 80050f2:	d5fb      	bpl.n	80050ec <_printf_i+0xe8>
 80050f4:	881e      	ldrh	r6, [r3, #0]
 80050f6:	2f6f      	cmp	r7, #111	; 0x6f
 80050f8:	bf0c      	ite	eq
 80050fa:	2308      	moveq	r3, #8
 80050fc:	230a      	movne	r3, #10
 80050fe:	4852      	ldr	r0, [pc, #328]	; (8005248 <_printf_i+0x244>)
 8005100:	2100      	movs	r1, #0
 8005102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005106:	6865      	ldr	r5, [r4, #4]
 8005108:	2d00      	cmp	r5, #0
 800510a:	bfa8      	it	ge
 800510c:	6821      	ldrge	r1, [r4, #0]
 800510e:	60a5      	str	r5, [r4, #8]
 8005110:	bfa4      	itt	ge
 8005112:	f021 0104 	bicge.w	r1, r1, #4
 8005116:	6021      	strge	r1, [r4, #0]
 8005118:	b90e      	cbnz	r6, 800511e <_printf_i+0x11a>
 800511a:	2d00      	cmp	r5, #0
 800511c:	d04d      	beq.n	80051ba <_printf_i+0x1b6>
 800511e:	4615      	mov	r5, r2
 8005120:	fbb6 f1f3 	udiv	r1, r6, r3
 8005124:	fb03 6711 	mls	r7, r3, r1, r6
 8005128:	5dc7      	ldrb	r7, [r0, r7]
 800512a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800512e:	4637      	mov	r7, r6
 8005130:	42bb      	cmp	r3, r7
 8005132:	460e      	mov	r6, r1
 8005134:	d9f4      	bls.n	8005120 <_printf_i+0x11c>
 8005136:	2b08      	cmp	r3, #8
 8005138:	d10b      	bne.n	8005152 <_printf_i+0x14e>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	07de      	lsls	r6, r3, #31
 800513e:	d508      	bpl.n	8005152 <_printf_i+0x14e>
 8005140:	6923      	ldr	r3, [r4, #16]
 8005142:	6861      	ldr	r1, [r4, #4]
 8005144:	4299      	cmp	r1, r3
 8005146:	bfde      	ittt	le
 8005148:	2330      	movle	r3, #48	; 0x30
 800514a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800514e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005152:	1b52      	subs	r2, r2, r5
 8005154:	6122      	str	r2, [r4, #16]
 8005156:	464b      	mov	r3, r9
 8005158:	4621      	mov	r1, r4
 800515a:	4640      	mov	r0, r8
 800515c:	f8cd a000 	str.w	sl, [sp]
 8005160:	aa03      	add	r2, sp, #12
 8005162:	f7ff fedf 	bl	8004f24 <_printf_common>
 8005166:	3001      	adds	r0, #1
 8005168:	d14c      	bne.n	8005204 <_printf_i+0x200>
 800516a:	f04f 30ff 	mov.w	r0, #4294967295
 800516e:	b004      	add	sp, #16
 8005170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005174:	4834      	ldr	r0, [pc, #208]	; (8005248 <_printf_i+0x244>)
 8005176:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800517a:	6829      	ldr	r1, [r5, #0]
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005182:	6029      	str	r1, [r5, #0]
 8005184:	061d      	lsls	r5, r3, #24
 8005186:	d514      	bpl.n	80051b2 <_printf_i+0x1ae>
 8005188:	07df      	lsls	r7, r3, #31
 800518a:	bf44      	itt	mi
 800518c:	f043 0320 	orrmi.w	r3, r3, #32
 8005190:	6023      	strmi	r3, [r4, #0]
 8005192:	b91e      	cbnz	r6, 800519c <_printf_i+0x198>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	f023 0320 	bic.w	r3, r3, #32
 800519a:	6023      	str	r3, [r4, #0]
 800519c:	2310      	movs	r3, #16
 800519e:	e7af      	b.n	8005100 <_printf_i+0xfc>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	f043 0320 	orr.w	r3, r3, #32
 80051a6:	6023      	str	r3, [r4, #0]
 80051a8:	2378      	movs	r3, #120	; 0x78
 80051aa:	4828      	ldr	r0, [pc, #160]	; (800524c <_printf_i+0x248>)
 80051ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051b0:	e7e3      	b.n	800517a <_printf_i+0x176>
 80051b2:	0659      	lsls	r1, r3, #25
 80051b4:	bf48      	it	mi
 80051b6:	b2b6      	uxthmi	r6, r6
 80051b8:	e7e6      	b.n	8005188 <_printf_i+0x184>
 80051ba:	4615      	mov	r5, r2
 80051bc:	e7bb      	b.n	8005136 <_printf_i+0x132>
 80051be:	682b      	ldr	r3, [r5, #0]
 80051c0:	6826      	ldr	r6, [r4, #0]
 80051c2:	1d18      	adds	r0, r3, #4
 80051c4:	6961      	ldr	r1, [r4, #20]
 80051c6:	6028      	str	r0, [r5, #0]
 80051c8:	0635      	lsls	r5, r6, #24
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	d501      	bpl.n	80051d2 <_printf_i+0x1ce>
 80051ce:	6019      	str	r1, [r3, #0]
 80051d0:	e002      	b.n	80051d8 <_printf_i+0x1d4>
 80051d2:	0670      	lsls	r0, r6, #25
 80051d4:	d5fb      	bpl.n	80051ce <_printf_i+0x1ca>
 80051d6:	8019      	strh	r1, [r3, #0]
 80051d8:	2300      	movs	r3, #0
 80051da:	4615      	mov	r5, r2
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	e7ba      	b.n	8005156 <_printf_i+0x152>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	2100      	movs	r1, #0
 80051e4:	1d1a      	adds	r2, r3, #4
 80051e6:	602a      	str	r2, [r5, #0]
 80051e8:	681d      	ldr	r5, [r3, #0]
 80051ea:	6862      	ldr	r2, [r4, #4]
 80051ec:	4628      	mov	r0, r5
 80051ee:	f000 feb5 	bl	8005f5c <memchr>
 80051f2:	b108      	cbz	r0, 80051f8 <_printf_i+0x1f4>
 80051f4:	1b40      	subs	r0, r0, r5
 80051f6:	6060      	str	r0, [r4, #4]
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	6123      	str	r3, [r4, #16]
 80051fc:	2300      	movs	r3, #0
 80051fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005202:	e7a8      	b.n	8005156 <_printf_i+0x152>
 8005204:	462a      	mov	r2, r5
 8005206:	4649      	mov	r1, r9
 8005208:	4640      	mov	r0, r8
 800520a:	6923      	ldr	r3, [r4, #16]
 800520c:	47d0      	blx	sl
 800520e:	3001      	adds	r0, #1
 8005210:	d0ab      	beq.n	800516a <_printf_i+0x166>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	079b      	lsls	r3, r3, #30
 8005216:	d413      	bmi.n	8005240 <_printf_i+0x23c>
 8005218:	68e0      	ldr	r0, [r4, #12]
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	4298      	cmp	r0, r3
 800521e:	bfb8      	it	lt
 8005220:	4618      	movlt	r0, r3
 8005222:	e7a4      	b.n	800516e <_printf_i+0x16a>
 8005224:	2301      	movs	r3, #1
 8005226:	4632      	mov	r2, r6
 8005228:	4649      	mov	r1, r9
 800522a:	4640      	mov	r0, r8
 800522c:	47d0      	blx	sl
 800522e:	3001      	adds	r0, #1
 8005230:	d09b      	beq.n	800516a <_printf_i+0x166>
 8005232:	3501      	adds	r5, #1
 8005234:	68e3      	ldr	r3, [r4, #12]
 8005236:	9903      	ldr	r1, [sp, #12]
 8005238:	1a5b      	subs	r3, r3, r1
 800523a:	42ab      	cmp	r3, r5
 800523c:	dcf2      	bgt.n	8005224 <_printf_i+0x220>
 800523e:	e7eb      	b.n	8005218 <_printf_i+0x214>
 8005240:	2500      	movs	r5, #0
 8005242:	f104 0619 	add.w	r6, r4, #25
 8005246:	e7f5      	b.n	8005234 <_printf_i+0x230>
 8005248:	080073fe 	.word	0x080073fe
 800524c:	0800740f 	.word	0x0800740f

08005250 <quorem>:
 8005250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	6903      	ldr	r3, [r0, #16]
 8005256:	690c      	ldr	r4, [r1, #16]
 8005258:	4607      	mov	r7, r0
 800525a:	42a3      	cmp	r3, r4
 800525c:	f2c0 8082 	blt.w	8005364 <quorem+0x114>
 8005260:	3c01      	subs	r4, #1
 8005262:	f100 0514 	add.w	r5, r0, #20
 8005266:	f101 0814 	add.w	r8, r1, #20
 800526a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005274:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005278:	3301      	adds	r3, #1
 800527a:	429a      	cmp	r2, r3
 800527c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005280:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005284:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005288:	d331      	bcc.n	80052ee <quorem+0x9e>
 800528a:	f04f 0e00 	mov.w	lr, #0
 800528e:	4640      	mov	r0, r8
 8005290:	46ac      	mov	ip, r5
 8005292:	46f2      	mov	sl, lr
 8005294:	f850 2b04 	ldr.w	r2, [r0], #4
 8005298:	b293      	uxth	r3, r2
 800529a:	fb06 e303 	mla	r3, r6, r3, lr
 800529e:	0c12      	lsrs	r2, r2, #16
 80052a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	fb06 e202 	mla	r2, r6, r2, lr
 80052aa:	ebaa 0303 	sub.w	r3, sl, r3
 80052ae:	f8dc a000 	ldr.w	sl, [ip]
 80052b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052b6:	fa1f fa8a 	uxth.w	sl, sl
 80052ba:	4453      	add	r3, sl
 80052bc:	f8dc a000 	ldr.w	sl, [ip]
 80052c0:	b292      	uxth	r2, r2
 80052c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052d0:	4581      	cmp	r9, r0
 80052d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052d6:	f84c 3b04 	str.w	r3, [ip], #4
 80052da:	d2db      	bcs.n	8005294 <quorem+0x44>
 80052dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80052e0:	b92b      	cbnz	r3, 80052ee <quorem+0x9e>
 80052e2:	9b01      	ldr	r3, [sp, #4]
 80052e4:	3b04      	subs	r3, #4
 80052e6:	429d      	cmp	r5, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	d32f      	bcc.n	800534c <quorem+0xfc>
 80052ec:	613c      	str	r4, [r7, #16]
 80052ee:	4638      	mov	r0, r7
 80052f0:	f001 f8ce 	bl	8006490 <__mcmp>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	db25      	blt.n	8005344 <quorem+0xf4>
 80052f8:	4628      	mov	r0, r5
 80052fa:	f04f 0c00 	mov.w	ip, #0
 80052fe:	3601      	adds	r6, #1
 8005300:	f858 1b04 	ldr.w	r1, [r8], #4
 8005304:	f8d0 e000 	ldr.w	lr, [r0]
 8005308:	b28b      	uxth	r3, r1
 800530a:	ebac 0303 	sub.w	r3, ip, r3
 800530e:	fa1f f28e 	uxth.w	r2, lr
 8005312:	4413      	add	r3, r2
 8005314:	0c0a      	lsrs	r2, r1, #16
 8005316:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800531a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800531e:	b29b      	uxth	r3, r3
 8005320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005324:	45c1      	cmp	r9, r8
 8005326:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800532a:	f840 3b04 	str.w	r3, [r0], #4
 800532e:	d2e7      	bcs.n	8005300 <quorem+0xb0>
 8005330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005334:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005338:	b922      	cbnz	r2, 8005344 <quorem+0xf4>
 800533a:	3b04      	subs	r3, #4
 800533c:	429d      	cmp	r5, r3
 800533e:	461a      	mov	r2, r3
 8005340:	d30a      	bcc.n	8005358 <quorem+0x108>
 8005342:	613c      	str	r4, [r7, #16]
 8005344:	4630      	mov	r0, r6
 8005346:	b003      	add	sp, #12
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	3b04      	subs	r3, #4
 8005350:	2a00      	cmp	r2, #0
 8005352:	d1cb      	bne.n	80052ec <quorem+0x9c>
 8005354:	3c01      	subs	r4, #1
 8005356:	e7c6      	b.n	80052e6 <quorem+0x96>
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	3b04      	subs	r3, #4
 800535c:	2a00      	cmp	r2, #0
 800535e:	d1f0      	bne.n	8005342 <quorem+0xf2>
 8005360:	3c01      	subs	r4, #1
 8005362:	e7eb      	b.n	800533c <quorem+0xec>
 8005364:	2000      	movs	r0, #0
 8005366:	e7ee      	b.n	8005346 <quorem+0xf6>

08005368 <_dtoa_r>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	4616      	mov	r6, r2
 800536e:	461f      	mov	r7, r3
 8005370:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005372:	b099      	sub	sp, #100	; 0x64
 8005374:	4605      	mov	r5, r0
 8005376:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800537a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800537e:	b974      	cbnz	r4, 800539e <_dtoa_r+0x36>
 8005380:	2010      	movs	r0, #16
 8005382:	f000 fde3 	bl	8005f4c <malloc>
 8005386:	4602      	mov	r2, r0
 8005388:	6268      	str	r0, [r5, #36]	; 0x24
 800538a:	b920      	cbnz	r0, 8005396 <_dtoa_r+0x2e>
 800538c:	21ea      	movs	r1, #234	; 0xea
 800538e:	4ba8      	ldr	r3, [pc, #672]	; (8005630 <_dtoa_r+0x2c8>)
 8005390:	48a8      	ldr	r0, [pc, #672]	; (8005634 <_dtoa_r+0x2cc>)
 8005392:	f001 fa81 	bl	8006898 <__assert_func>
 8005396:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800539a:	6004      	str	r4, [r0, #0]
 800539c:	60c4      	str	r4, [r0, #12]
 800539e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053a0:	6819      	ldr	r1, [r3, #0]
 80053a2:	b151      	cbz	r1, 80053ba <_dtoa_r+0x52>
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	2301      	movs	r3, #1
 80053a8:	4093      	lsls	r3, r2
 80053aa:	604a      	str	r2, [r1, #4]
 80053ac:	608b      	str	r3, [r1, #8]
 80053ae:	4628      	mov	r0, r5
 80053b0:	f000 fe30 	bl	8006014 <_Bfree>
 80053b4:	2200      	movs	r2, #0
 80053b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	1e3b      	subs	r3, r7, #0
 80053bc:	bfaf      	iteee	ge
 80053be:	2300      	movge	r3, #0
 80053c0:	2201      	movlt	r2, #1
 80053c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053c6:	9305      	strlt	r3, [sp, #20]
 80053c8:	bfa8      	it	ge
 80053ca:	f8c8 3000 	strge.w	r3, [r8]
 80053ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80053d2:	4b99      	ldr	r3, [pc, #612]	; (8005638 <_dtoa_r+0x2d0>)
 80053d4:	bfb8      	it	lt
 80053d6:	f8c8 2000 	strlt.w	r2, [r8]
 80053da:	ea33 0309 	bics.w	r3, r3, r9
 80053de:	d119      	bne.n	8005414 <_dtoa_r+0xac>
 80053e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80053e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053ec:	4333      	orrs	r3, r6
 80053ee:	f000 857f 	beq.w	8005ef0 <_dtoa_r+0xb88>
 80053f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053f4:	b953      	cbnz	r3, 800540c <_dtoa_r+0xa4>
 80053f6:	4b91      	ldr	r3, [pc, #580]	; (800563c <_dtoa_r+0x2d4>)
 80053f8:	e022      	b.n	8005440 <_dtoa_r+0xd8>
 80053fa:	4b91      	ldr	r3, [pc, #580]	; (8005640 <_dtoa_r+0x2d8>)
 80053fc:	9303      	str	r3, [sp, #12]
 80053fe:	3308      	adds	r3, #8
 8005400:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	9803      	ldr	r0, [sp, #12]
 8005406:	b019      	add	sp, #100	; 0x64
 8005408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540c:	4b8b      	ldr	r3, [pc, #556]	; (800563c <_dtoa_r+0x2d4>)
 800540e:	9303      	str	r3, [sp, #12]
 8005410:	3303      	adds	r3, #3
 8005412:	e7f5      	b.n	8005400 <_dtoa_r+0x98>
 8005414:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005418:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800541c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005420:	2200      	movs	r2, #0
 8005422:	2300      	movs	r3, #0
 8005424:	f7fb fac0 	bl	80009a8 <__aeabi_dcmpeq>
 8005428:	4680      	mov	r8, r0
 800542a:	b158      	cbz	r0, 8005444 <_dtoa_r+0xdc>
 800542c:	2301      	movs	r3, #1
 800542e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8558 	beq.w	8005eea <_dtoa_r+0xb82>
 800543a:	4882      	ldr	r0, [pc, #520]	; (8005644 <_dtoa_r+0x2dc>)
 800543c:	6018      	str	r0, [r3, #0]
 800543e:	1e43      	subs	r3, r0, #1
 8005440:	9303      	str	r3, [sp, #12]
 8005442:	e7df      	b.n	8005404 <_dtoa_r+0x9c>
 8005444:	ab16      	add	r3, sp, #88	; 0x58
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	ab17      	add	r3, sp, #92	; 0x5c
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	4628      	mov	r0, r5
 800544e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005452:	f001 f8c5 	bl	80065e0 <__d2b>
 8005456:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800545a:	4683      	mov	fp, r0
 800545c:	2c00      	cmp	r4, #0
 800545e:	d07f      	beq.n	8005560 <_dtoa_r+0x1f8>
 8005460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005466:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800546a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800546e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005472:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005476:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800547a:	2200      	movs	r2, #0
 800547c:	4b72      	ldr	r3, [pc, #456]	; (8005648 <_dtoa_r+0x2e0>)
 800547e:	f7fa fe73 	bl	8000168 <__aeabi_dsub>
 8005482:	a365      	add	r3, pc, #404	; (adr r3, 8005618 <_dtoa_r+0x2b0>)
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	f7fb f826 	bl	80004d8 <__aeabi_dmul>
 800548c:	a364      	add	r3, pc, #400	; (adr r3, 8005620 <_dtoa_r+0x2b8>)
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f7fa fe6b 	bl	800016c <__adddf3>
 8005496:	4606      	mov	r6, r0
 8005498:	4620      	mov	r0, r4
 800549a:	460f      	mov	r7, r1
 800549c:	f7fa ffb2 	bl	8000404 <__aeabi_i2d>
 80054a0:	a361      	add	r3, pc, #388	; (adr r3, 8005628 <_dtoa_r+0x2c0>)
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f7fb f817 	bl	80004d8 <__aeabi_dmul>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4630      	mov	r0, r6
 80054b0:	4639      	mov	r1, r7
 80054b2:	f7fa fe5b 	bl	800016c <__adddf3>
 80054b6:	4606      	mov	r6, r0
 80054b8:	460f      	mov	r7, r1
 80054ba:	f7fb fabd 	bl	8000a38 <__aeabi_d2iz>
 80054be:	2200      	movs	r2, #0
 80054c0:	4682      	mov	sl, r0
 80054c2:	2300      	movs	r3, #0
 80054c4:	4630      	mov	r0, r6
 80054c6:	4639      	mov	r1, r7
 80054c8:	f7fb fa78 	bl	80009bc <__aeabi_dcmplt>
 80054cc:	b148      	cbz	r0, 80054e2 <_dtoa_r+0x17a>
 80054ce:	4650      	mov	r0, sl
 80054d0:	f7fa ff98 	bl	8000404 <__aeabi_i2d>
 80054d4:	4632      	mov	r2, r6
 80054d6:	463b      	mov	r3, r7
 80054d8:	f7fb fa66 	bl	80009a8 <__aeabi_dcmpeq>
 80054dc:	b908      	cbnz	r0, 80054e2 <_dtoa_r+0x17a>
 80054de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054e2:	f1ba 0f16 	cmp.w	sl, #22
 80054e6:	d858      	bhi.n	800559a <_dtoa_r+0x232>
 80054e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054ec:	4b57      	ldr	r3, [pc, #348]	; (800564c <_dtoa_r+0x2e4>)
 80054ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fb fa61 	bl	80009bc <__aeabi_dcmplt>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d04f      	beq.n	800559e <_dtoa_r+0x236>
 80054fe:	2300      	movs	r3, #0
 8005500:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005504:	930f      	str	r3, [sp, #60]	; 0x3c
 8005506:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005508:	1b1c      	subs	r4, r3, r4
 800550a:	1e63      	subs	r3, r4, #1
 800550c:	9309      	str	r3, [sp, #36]	; 0x24
 800550e:	bf49      	itett	mi
 8005510:	f1c4 0301 	rsbmi	r3, r4, #1
 8005514:	2300      	movpl	r3, #0
 8005516:	9306      	strmi	r3, [sp, #24]
 8005518:	2300      	movmi	r3, #0
 800551a:	bf54      	ite	pl
 800551c:	9306      	strpl	r3, [sp, #24]
 800551e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005520:	f1ba 0f00 	cmp.w	sl, #0
 8005524:	db3d      	blt.n	80055a2 <_dtoa_r+0x23a>
 8005526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005528:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800552c:	4453      	add	r3, sl
 800552e:	9309      	str	r3, [sp, #36]	; 0x24
 8005530:	2300      	movs	r3, #0
 8005532:	930a      	str	r3, [sp, #40]	; 0x28
 8005534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005536:	2b09      	cmp	r3, #9
 8005538:	f200 808c 	bhi.w	8005654 <_dtoa_r+0x2ec>
 800553c:	2b05      	cmp	r3, #5
 800553e:	bfc4      	itt	gt
 8005540:	3b04      	subgt	r3, #4
 8005542:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005546:	bfc8      	it	gt
 8005548:	2400      	movgt	r4, #0
 800554a:	f1a3 0302 	sub.w	r3, r3, #2
 800554e:	bfd8      	it	le
 8005550:	2401      	movle	r4, #1
 8005552:	2b03      	cmp	r3, #3
 8005554:	f200 808a 	bhi.w	800566c <_dtoa_r+0x304>
 8005558:	e8df f003 	tbb	[pc, r3]
 800555c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005560:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005564:	441c      	add	r4, r3
 8005566:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800556a:	2b20      	cmp	r3, #32
 800556c:	bfc3      	ittte	gt
 800556e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005572:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005576:	fa09 f303 	lslgt.w	r3, r9, r3
 800557a:	f1c3 0320 	rsble	r3, r3, #32
 800557e:	bfc6      	itte	gt
 8005580:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005584:	4318      	orrgt	r0, r3
 8005586:	fa06 f003 	lslle.w	r0, r6, r3
 800558a:	f7fa ff2b 	bl	80003e4 <__aeabi_ui2d>
 800558e:	2301      	movs	r3, #1
 8005590:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005594:	3c01      	subs	r4, #1
 8005596:	9313      	str	r3, [sp, #76]	; 0x4c
 8005598:	e76f      	b.n	800547a <_dtoa_r+0x112>
 800559a:	2301      	movs	r3, #1
 800559c:	e7b2      	b.n	8005504 <_dtoa_r+0x19c>
 800559e:	900f      	str	r0, [sp, #60]	; 0x3c
 80055a0:	e7b1      	b.n	8005506 <_dtoa_r+0x19e>
 80055a2:	9b06      	ldr	r3, [sp, #24]
 80055a4:	eba3 030a 	sub.w	r3, r3, sl
 80055a8:	9306      	str	r3, [sp, #24]
 80055aa:	f1ca 0300 	rsb	r3, sl, #0
 80055ae:	930a      	str	r3, [sp, #40]	; 0x28
 80055b0:	2300      	movs	r3, #0
 80055b2:	930e      	str	r3, [sp, #56]	; 0x38
 80055b4:	e7be      	b.n	8005534 <_dtoa_r+0x1cc>
 80055b6:	2300      	movs	r3, #0
 80055b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80055ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	dc58      	bgt.n	8005672 <_dtoa_r+0x30a>
 80055c0:	f04f 0901 	mov.w	r9, #1
 80055c4:	464b      	mov	r3, r9
 80055c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80055ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80055ce:	2200      	movs	r2, #0
 80055d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80055d2:	6042      	str	r2, [r0, #4]
 80055d4:	2204      	movs	r2, #4
 80055d6:	f102 0614 	add.w	r6, r2, #20
 80055da:	429e      	cmp	r6, r3
 80055dc:	6841      	ldr	r1, [r0, #4]
 80055de:	d94e      	bls.n	800567e <_dtoa_r+0x316>
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 fcd7 	bl	8005f94 <_Balloc>
 80055e6:	9003      	str	r0, [sp, #12]
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d14c      	bne.n	8005686 <_dtoa_r+0x31e>
 80055ec:	4602      	mov	r2, r0
 80055ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80055f2:	4b17      	ldr	r3, [pc, #92]	; (8005650 <_dtoa_r+0x2e8>)
 80055f4:	e6cc      	b.n	8005390 <_dtoa_r+0x28>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e7de      	b.n	80055b8 <_dtoa_r+0x250>
 80055fa:	2300      	movs	r3, #0
 80055fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80055fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005600:	eb0a 0903 	add.w	r9, sl, r3
 8005604:	f109 0301 	add.w	r3, r9, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	9308      	str	r3, [sp, #32]
 800560c:	bfb8      	it	lt
 800560e:	2301      	movlt	r3, #1
 8005610:	e7dd      	b.n	80055ce <_dtoa_r+0x266>
 8005612:	2301      	movs	r3, #1
 8005614:	e7f2      	b.n	80055fc <_dtoa_r+0x294>
 8005616:	bf00      	nop
 8005618:	636f4361 	.word	0x636f4361
 800561c:	3fd287a7 	.word	0x3fd287a7
 8005620:	8b60c8b3 	.word	0x8b60c8b3
 8005624:	3fc68a28 	.word	0x3fc68a28
 8005628:	509f79fb 	.word	0x509f79fb
 800562c:	3fd34413 	.word	0x3fd34413
 8005630:	0800742d 	.word	0x0800742d
 8005634:	08007444 	.word	0x08007444
 8005638:	7ff00000 	.word	0x7ff00000
 800563c:	08007429 	.word	0x08007429
 8005640:	08007420 	.word	0x08007420
 8005644:	080073fd 	.word	0x080073fd
 8005648:	3ff80000 	.word	0x3ff80000
 800564c:	08007538 	.word	0x08007538
 8005650:	0800749f 	.word	0x0800749f
 8005654:	2401      	movs	r4, #1
 8005656:	2300      	movs	r3, #0
 8005658:	940b      	str	r4, [sp, #44]	; 0x2c
 800565a:	9322      	str	r3, [sp, #136]	; 0x88
 800565c:	f04f 39ff 	mov.w	r9, #4294967295
 8005660:	2200      	movs	r2, #0
 8005662:	2312      	movs	r3, #18
 8005664:	f8cd 9020 	str.w	r9, [sp, #32]
 8005668:	9223      	str	r2, [sp, #140]	; 0x8c
 800566a:	e7b0      	b.n	80055ce <_dtoa_r+0x266>
 800566c:	2301      	movs	r3, #1
 800566e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005670:	e7f4      	b.n	800565c <_dtoa_r+0x2f4>
 8005672:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005676:	464b      	mov	r3, r9
 8005678:	f8cd 9020 	str.w	r9, [sp, #32]
 800567c:	e7a7      	b.n	80055ce <_dtoa_r+0x266>
 800567e:	3101      	adds	r1, #1
 8005680:	6041      	str	r1, [r0, #4]
 8005682:	0052      	lsls	r2, r2, #1
 8005684:	e7a7      	b.n	80055d6 <_dtoa_r+0x26e>
 8005686:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005688:	9a03      	ldr	r2, [sp, #12]
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	9b08      	ldr	r3, [sp, #32]
 800568e:	2b0e      	cmp	r3, #14
 8005690:	f200 80a8 	bhi.w	80057e4 <_dtoa_r+0x47c>
 8005694:	2c00      	cmp	r4, #0
 8005696:	f000 80a5 	beq.w	80057e4 <_dtoa_r+0x47c>
 800569a:	f1ba 0f00 	cmp.w	sl, #0
 800569e:	dd34      	ble.n	800570a <_dtoa_r+0x3a2>
 80056a0:	4a9a      	ldr	r2, [pc, #616]	; (800590c <_dtoa_r+0x5a4>)
 80056a2:	f00a 030f 	and.w	r3, sl, #15
 80056a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056aa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80056ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80056ba:	d016      	beq.n	80056ea <_dtoa_r+0x382>
 80056bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056c0:	4b93      	ldr	r3, [pc, #588]	; (8005910 <_dtoa_r+0x5a8>)
 80056c2:	2703      	movs	r7, #3
 80056c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056c8:	f7fb f830 	bl	800072c <__aeabi_ddiv>
 80056cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056d0:	f004 040f 	and.w	r4, r4, #15
 80056d4:	4e8e      	ldr	r6, [pc, #568]	; (8005910 <_dtoa_r+0x5a8>)
 80056d6:	b954      	cbnz	r4, 80056ee <_dtoa_r+0x386>
 80056d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056e0:	f7fb f824 	bl	800072c <__aeabi_ddiv>
 80056e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056e8:	e029      	b.n	800573e <_dtoa_r+0x3d6>
 80056ea:	2702      	movs	r7, #2
 80056ec:	e7f2      	b.n	80056d4 <_dtoa_r+0x36c>
 80056ee:	07e1      	lsls	r1, r4, #31
 80056f0:	d508      	bpl.n	8005704 <_dtoa_r+0x39c>
 80056f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056fa:	f7fa feed 	bl	80004d8 <__aeabi_dmul>
 80056fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005702:	3701      	adds	r7, #1
 8005704:	1064      	asrs	r4, r4, #1
 8005706:	3608      	adds	r6, #8
 8005708:	e7e5      	b.n	80056d6 <_dtoa_r+0x36e>
 800570a:	f000 80a5 	beq.w	8005858 <_dtoa_r+0x4f0>
 800570e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005712:	f1ca 0400 	rsb	r4, sl, #0
 8005716:	4b7d      	ldr	r3, [pc, #500]	; (800590c <_dtoa_r+0x5a4>)
 8005718:	f004 020f 	and.w	r2, r4, #15
 800571c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f7fa fed8 	bl	80004d8 <__aeabi_dmul>
 8005728:	2702      	movs	r7, #2
 800572a:	2300      	movs	r3, #0
 800572c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005730:	4e77      	ldr	r6, [pc, #476]	; (8005910 <_dtoa_r+0x5a8>)
 8005732:	1124      	asrs	r4, r4, #4
 8005734:	2c00      	cmp	r4, #0
 8005736:	f040 8084 	bne.w	8005842 <_dtoa_r+0x4da>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1d2      	bne.n	80056e4 <_dtoa_r+0x37c>
 800573e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 808b 	beq.w	800585c <_dtoa_r+0x4f4>
 8005746:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800574a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800574e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005752:	2200      	movs	r2, #0
 8005754:	4b6f      	ldr	r3, [pc, #444]	; (8005914 <_dtoa_r+0x5ac>)
 8005756:	f7fb f931 	bl	80009bc <__aeabi_dcmplt>
 800575a:	2800      	cmp	r0, #0
 800575c:	d07e      	beq.n	800585c <_dtoa_r+0x4f4>
 800575e:	9b08      	ldr	r3, [sp, #32]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d07b      	beq.n	800585c <_dtoa_r+0x4f4>
 8005764:	f1b9 0f00 	cmp.w	r9, #0
 8005768:	dd38      	ble.n	80057dc <_dtoa_r+0x474>
 800576a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800576e:	2200      	movs	r2, #0
 8005770:	4b69      	ldr	r3, [pc, #420]	; (8005918 <_dtoa_r+0x5b0>)
 8005772:	f7fa feb1 	bl	80004d8 <__aeabi_dmul>
 8005776:	464c      	mov	r4, r9
 8005778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800577c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005780:	3701      	adds	r7, #1
 8005782:	4638      	mov	r0, r7
 8005784:	f7fa fe3e 	bl	8000404 <__aeabi_i2d>
 8005788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800578c:	f7fa fea4 	bl	80004d8 <__aeabi_dmul>
 8005790:	2200      	movs	r2, #0
 8005792:	4b62      	ldr	r3, [pc, #392]	; (800591c <_dtoa_r+0x5b4>)
 8005794:	f7fa fcea 	bl	800016c <__adddf3>
 8005798:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800579c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057a0:	9611      	str	r6, [sp, #68]	; 0x44
 80057a2:	2c00      	cmp	r4, #0
 80057a4:	d15d      	bne.n	8005862 <_dtoa_r+0x4fa>
 80057a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057aa:	2200      	movs	r2, #0
 80057ac:	4b5c      	ldr	r3, [pc, #368]	; (8005920 <_dtoa_r+0x5b8>)
 80057ae:	f7fa fcdb 	bl	8000168 <__aeabi_dsub>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057ba:	4633      	mov	r3, r6
 80057bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057be:	f7fb f91b 	bl	80009f8 <__aeabi_dcmpgt>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	f040 829c 	bne.w	8005d00 <_dtoa_r+0x998>
 80057c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057d2:	f7fb f8f3 	bl	80009bc <__aeabi_dcmplt>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	f040 8290 	bne.w	8005cfc <_dtoa_r+0x994>
 80057dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80057e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80057e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f2c0 8152 	blt.w	8005a90 <_dtoa_r+0x728>
 80057ec:	f1ba 0f0e 	cmp.w	sl, #14
 80057f0:	f300 814e 	bgt.w	8005a90 <_dtoa_r+0x728>
 80057f4:	4b45      	ldr	r3, [pc, #276]	; (800590c <_dtoa_r+0x5a4>)
 80057f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005802:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005804:	2b00      	cmp	r3, #0
 8005806:	f280 80db 	bge.w	80059c0 <_dtoa_r+0x658>
 800580a:	9b08      	ldr	r3, [sp, #32]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f300 80d7 	bgt.w	80059c0 <_dtoa_r+0x658>
 8005812:	f040 8272 	bne.w	8005cfa <_dtoa_r+0x992>
 8005816:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800581a:	2200      	movs	r2, #0
 800581c:	4b40      	ldr	r3, [pc, #256]	; (8005920 <_dtoa_r+0x5b8>)
 800581e:	f7fa fe5b 	bl	80004d8 <__aeabi_dmul>
 8005822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005826:	f7fb f8dd 	bl	80009e4 <__aeabi_dcmpge>
 800582a:	9c08      	ldr	r4, [sp, #32]
 800582c:	4626      	mov	r6, r4
 800582e:	2800      	cmp	r0, #0
 8005830:	f040 8248 	bne.w	8005cc4 <_dtoa_r+0x95c>
 8005834:	2331      	movs	r3, #49	; 0x31
 8005836:	9f03      	ldr	r7, [sp, #12]
 8005838:	f10a 0a01 	add.w	sl, sl, #1
 800583c:	f807 3b01 	strb.w	r3, [r7], #1
 8005840:	e244      	b.n	8005ccc <_dtoa_r+0x964>
 8005842:	07e2      	lsls	r2, r4, #31
 8005844:	d505      	bpl.n	8005852 <_dtoa_r+0x4ea>
 8005846:	e9d6 2300 	ldrd	r2, r3, [r6]
 800584a:	f7fa fe45 	bl	80004d8 <__aeabi_dmul>
 800584e:	2301      	movs	r3, #1
 8005850:	3701      	adds	r7, #1
 8005852:	1064      	asrs	r4, r4, #1
 8005854:	3608      	adds	r6, #8
 8005856:	e76d      	b.n	8005734 <_dtoa_r+0x3cc>
 8005858:	2702      	movs	r7, #2
 800585a:	e770      	b.n	800573e <_dtoa_r+0x3d6>
 800585c:	46d0      	mov	r8, sl
 800585e:	9c08      	ldr	r4, [sp, #32]
 8005860:	e78f      	b.n	8005782 <_dtoa_r+0x41a>
 8005862:	9903      	ldr	r1, [sp, #12]
 8005864:	4b29      	ldr	r3, [pc, #164]	; (800590c <_dtoa_r+0x5a4>)
 8005866:	4421      	add	r1, r4
 8005868:	9112      	str	r1, [sp, #72]	; 0x48
 800586a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800586c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005870:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005874:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005878:	2900      	cmp	r1, #0
 800587a:	d055      	beq.n	8005928 <_dtoa_r+0x5c0>
 800587c:	2000      	movs	r0, #0
 800587e:	4929      	ldr	r1, [pc, #164]	; (8005924 <_dtoa_r+0x5bc>)
 8005880:	f7fa ff54 	bl	800072c <__aeabi_ddiv>
 8005884:	463b      	mov	r3, r7
 8005886:	4632      	mov	r2, r6
 8005888:	f7fa fc6e 	bl	8000168 <__aeabi_dsub>
 800588c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005890:	9f03      	ldr	r7, [sp, #12]
 8005892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005896:	f7fb f8cf 	bl	8000a38 <__aeabi_d2iz>
 800589a:	4604      	mov	r4, r0
 800589c:	f7fa fdb2 	bl	8000404 <__aeabi_i2d>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058a8:	f7fa fc5e 	bl	8000168 <__aeabi_dsub>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	3430      	adds	r4, #48	; 0x30
 80058b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058ba:	f807 4b01 	strb.w	r4, [r7], #1
 80058be:	f7fb f87d 	bl	80009bc <__aeabi_dcmplt>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d174      	bne.n	80059b0 <_dtoa_r+0x648>
 80058c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ca:	2000      	movs	r0, #0
 80058cc:	4911      	ldr	r1, [pc, #68]	; (8005914 <_dtoa_r+0x5ac>)
 80058ce:	f7fa fc4b 	bl	8000168 <__aeabi_dsub>
 80058d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058d6:	f7fb f871 	bl	80009bc <__aeabi_dcmplt>
 80058da:	2800      	cmp	r0, #0
 80058dc:	f040 80b7 	bne.w	8005a4e <_dtoa_r+0x6e6>
 80058e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058e2:	429f      	cmp	r7, r3
 80058e4:	f43f af7a 	beq.w	80057dc <_dtoa_r+0x474>
 80058e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058ec:	2200      	movs	r2, #0
 80058ee:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <_dtoa_r+0x5b0>)
 80058f0:	f7fa fdf2 	bl	80004d8 <__aeabi_dmul>
 80058f4:	2200      	movs	r2, #0
 80058f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <_dtoa_r+0x5b0>)
 8005900:	f7fa fdea 	bl	80004d8 <__aeabi_dmul>
 8005904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005908:	e7c3      	b.n	8005892 <_dtoa_r+0x52a>
 800590a:	bf00      	nop
 800590c:	08007538 	.word	0x08007538
 8005910:	08007510 	.word	0x08007510
 8005914:	3ff00000 	.word	0x3ff00000
 8005918:	40240000 	.word	0x40240000
 800591c:	401c0000 	.word	0x401c0000
 8005920:	40140000 	.word	0x40140000
 8005924:	3fe00000 	.word	0x3fe00000
 8005928:	4630      	mov	r0, r6
 800592a:	4639      	mov	r1, r7
 800592c:	f7fa fdd4 	bl	80004d8 <__aeabi_dmul>
 8005930:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005932:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005936:	9c03      	ldr	r4, [sp, #12]
 8005938:	9314      	str	r3, [sp, #80]	; 0x50
 800593a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800593e:	f7fb f87b 	bl	8000a38 <__aeabi_d2iz>
 8005942:	9015      	str	r0, [sp, #84]	; 0x54
 8005944:	f7fa fd5e 	bl	8000404 <__aeabi_i2d>
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005950:	f7fa fc0a 	bl	8000168 <__aeabi_dsub>
 8005954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005956:	4606      	mov	r6, r0
 8005958:	3330      	adds	r3, #48	; 0x30
 800595a:	f804 3b01 	strb.w	r3, [r4], #1
 800595e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005960:	460f      	mov	r7, r1
 8005962:	429c      	cmp	r4, r3
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	d124      	bne.n	80059b4 <_dtoa_r+0x64c>
 800596a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800596e:	4bb0      	ldr	r3, [pc, #704]	; (8005c30 <_dtoa_r+0x8c8>)
 8005970:	f7fa fbfc 	bl	800016c <__adddf3>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4630      	mov	r0, r6
 800597a:	4639      	mov	r1, r7
 800597c:	f7fb f83c 	bl	80009f8 <__aeabi_dcmpgt>
 8005980:	2800      	cmp	r0, #0
 8005982:	d163      	bne.n	8005a4c <_dtoa_r+0x6e4>
 8005984:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005988:	2000      	movs	r0, #0
 800598a:	49a9      	ldr	r1, [pc, #676]	; (8005c30 <_dtoa_r+0x8c8>)
 800598c:	f7fa fbec 	bl	8000168 <__aeabi_dsub>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4630      	mov	r0, r6
 8005996:	4639      	mov	r1, r7
 8005998:	f7fb f810 	bl	80009bc <__aeabi_dcmplt>
 800599c:	2800      	cmp	r0, #0
 800599e:	f43f af1d 	beq.w	80057dc <_dtoa_r+0x474>
 80059a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80059a4:	1e7b      	subs	r3, r7, #1
 80059a6:	9314      	str	r3, [sp, #80]	; 0x50
 80059a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80059ac:	2b30      	cmp	r3, #48	; 0x30
 80059ae:	d0f8      	beq.n	80059a2 <_dtoa_r+0x63a>
 80059b0:	46c2      	mov	sl, r8
 80059b2:	e03b      	b.n	8005a2c <_dtoa_r+0x6c4>
 80059b4:	4b9f      	ldr	r3, [pc, #636]	; (8005c34 <_dtoa_r+0x8cc>)
 80059b6:	f7fa fd8f 	bl	80004d8 <__aeabi_dmul>
 80059ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059be:	e7bc      	b.n	800593a <_dtoa_r+0x5d2>
 80059c0:	9f03      	ldr	r7, [sp, #12]
 80059c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80059c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059ca:	4640      	mov	r0, r8
 80059cc:	4649      	mov	r1, r9
 80059ce:	f7fa fead 	bl	800072c <__aeabi_ddiv>
 80059d2:	f7fb f831 	bl	8000a38 <__aeabi_d2iz>
 80059d6:	4604      	mov	r4, r0
 80059d8:	f7fa fd14 	bl	8000404 <__aeabi_i2d>
 80059dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059e0:	f7fa fd7a 	bl	80004d8 <__aeabi_dmul>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4640      	mov	r0, r8
 80059ea:	4649      	mov	r1, r9
 80059ec:	f7fa fbbc 	bl	8000168 <__aeabi_dsub>
 80059f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80059f4:	f807 6b01 	strb.w	r6, [r7], #1
 80059f8:	9e03      	ldr	r6, [sp, #12]
 80059fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80059fe:	1bbe      	subs	r6, r7, r6
 8005a00:	45b4      	cmp	ip, r6
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	d136      	bne.n	8005a76 <_dtoa_r+0x70e>
 8005a08:	f7fa fbb0 	bl	800016c <__adddf3>
 8005a0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a10:	4680      	mov	r8, r0
 8005a12:	4689      	mov	r9, r1
 8005a14:	f7fa fff0 	bl	80009f8 <__aeabi_dcmpgt>
 8005a18:	bb58      	cbnz	r0, 8005a72 <_dtoa_r+0x70a>
 8005a1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a1e:	4640      	mov	r0, r8
 8005a20:	4649      	mov	r1, r9
 8005a22:	f7fa ffc1 	bl	80009a8 <__aeabi_dcmpeq>
 8005a26:	b108      	cbz	r0, 8005a2c <_dtoa_r+0x6c4>
 8005a28:	07e1      	lsls	r1, r4, #31
 8005a2a:	d422      	bmi.n	8005a72 <_dtoa_r+0x70a>
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	4659      	mov	r1, fp
 8005a30:	f000 faf0 	bl	8006014 <_Bfree>
 8005a34:	2300      	movs	r3, #0
 8005a36:	703b      	strb	r3, [r7, #0]
 8005a38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005a3a:	f10a 0001 	add.w	r0, sl, #1
 8005a3e:	6018      	str	r0, [r3, #0]
 8005a40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f43f acde 	beq.w	8005404 <_dtoa_r+0x9c>
 8005a48:	601f      	str	r7, [r3, #0]
 8005a4a:	e4db      	b.n	8005404 <_dtoa_r+0x9c>
 8005a4c:	4627      	mov	r7, r4
 8005a4e:	463b      	mov	r3, r7
 8005a50:	461f      	mov	r7, r3
 8005a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a56:	2a39      	cmp	r2, #57	; 0x39
 8005a58:	d107      	bne.n	8005a6a <_dtoa_r+0x702>
 8005a5a:	9a03      	ldr	r2, [sp, #12]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1f7      	bne.n	8005a50 <_dtoa_r+0x6e8>
 8005a60:	2230      	movs	r2, #48	; 0x30
 8005a62:	9903      	ldr	r1, [sp, #12]
 8005a64:	f108 0801 	add.w	r8, r8, #1
 8005a68:	700a      	strb	r2, [r1, #0]
 8005a6a:	781a      	ldrb	r2, [r3, #0]
 8005a6c:	3201      	adds	r2, #1
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	e79e      	b.n	80059b0 <_dtoa_r+0x648>
 8005a72:	46d0      	mov	r8, sl
 8005a74:	e7eb      	b.n	8005a4e <_dtoa_r+0x6e6>
 8005a76:	2200      	movs	r2, #0
 8005a78:	4b6e      	ldr	r3, [pc, #440]	; (8005c34 <_dtoa_r+0x8cc>)
 8005a7a:	f7fa fd2d 	bl	80004d8 <__aeabi_dmul>
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2300      	movs	r3, #0
 8005a82:	4680      	mov	r8, r0
 8005a84:	4689      	mov	r9, r1
 8005a86:	f7fa ff8f 	bl	80009a8 <__aeabi_dcmpeq>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d09b      	beq.n	80059c6 <_dtoa_r+0x65e>
 8005a8e:	e7cd      	b.n	8005a2c <_dtoa_r+0x6c4>
 8005a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	f000 80d0 	beq.w	8005c38 <_dtoa_r+0x8d0>
 8005a98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a9a:	2a01      	cmp	r2, #1
 8005a9c:	f300 80ae 	bgt.w	8005bfc <_dtoa_r+0x894>
 8005aa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	f000 80a6 	beq.w	8005bf4 <_dtoa_r+0x88c>
 8005aa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005aac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005aae:	9f06      	ldr	r7, [sp, #24]
 8005ab0:	9a06      	ldr	r2, [sp, #24]
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	441a      	add	r2, r3
 8005ab6:	9206      	str	r2, [sp, #24]
 8005ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aba:	4628      	mov	r0, r5
 8005abc:	441a      	add	r2, r3
 8005abe:	9209      	str	r2, [sp, #36]	; 0x24
 8005ac0:	f000 fb5e 	bl	8006180 <__i2b>
 8005ac4:	4606      	mov	r6, r0
 8005ac6:	2f00      	cmp	r7, #0
 8005ac8:	dd0c      	ble.n	8005ae4 <_dtoa_r+0x77c>
 8005aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	dd09      	ble.n	8005ae4 <_dtoa_r+0x77c>
 8005ad0:	42bb      	cmp	r3, r7
 8005ad2:	bfa8      	it	ge
 8005ad4:	463b      	movge	r3, r7
 8005ad6:	9a06      	ldr	r2, [sp, #24]
 8005ad8:	1aff      	subs	r7, r7, r3
 8005ada:	1ad2      	subs	r2, r2, r3
 8005adc:	9206      	str	r2, [sp, #24]
 8005ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae6:	b1f3      	cbz	r3, 8005b26 <_dtoa_r+0x7be>
 8005ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80a8 	beq.w	8005c40 <_dtoa_r+0x8d8>
 8005af0:	2c00      	cmp	r4, #0
 8005af2:	dd10      	ble.n	8005b16 <_dtoa_r+0x7ae>
 8005af4:	4631      	mov	r1, r6
 8005af6:	4622      	mov	r2, r4
 8005af8:	4628      	mov	r0, r5
 8005afa:	f000 fbff 	bl	80062fc <__pow5mult>
 8005afe:	465a      	mov	r2, fp
 8005b00:	4601      	mov	r1, r0
 8005b02:	4606      	mov	r6, r0
 8005b04:	4628      	mov	r0, r5
 8005b06:	f000 fb51 	bl	80061ac <__multiply>
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	4659      	mov	r1, fp
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 fa80 	bl	8006014 <_Bfree>
 8005b14:	46c3      	mov	fp, r8
 8005b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b18:	1b1a      	subs	r2, r3, r4
 8005b1a:	d004      	beq.n	8005b26 <_dtoa_r+0x7be>
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f000 fbec 	bl	80062fc <__pow5mult>
 8005b24:	4683      	mov	fp, r0
 8005b26:	2101      	movs	r1, #1
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f000 fb29 	bl	8006180 <__i2b>
 8005b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b30:	4604      	mov	r4, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f340 8086 	ble.w	8005c44 <_dtoa_r+0x8dc>
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4601      	mov	r1, r0
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f000 fbdd 	bl	80062fc <__pow5mult>
 8005b42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b44:	4604      	mov	r4, r0
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	dd7f      	ble.n	8005c4a <_dtoa_r+0x8e2>
 8005b4a:	f04f 0800 	mov.w	r8, #0
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b54:	6918      	ldr	r0, [r3, #16]
 8005b56:	f000 fac5 	bl	80060e4 <__hi0bits>
 8005b5a:	f1c0 0020 	rsb	r0, r0, #32
 8005b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b60:	4418      	add	r0, r3
 8005b62:	f010 001f 	ands.w	r0, r0, #31
 8005b66:	f000 8092 	beq.w	8005c8e <_dtoa_r+0x926>
 8005b6a:	f1c0 0320 	rsb	r3, r0, #32
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	f340 808a 	ble.w	8005c88 <_dtoa_r+0x920>
 8005b74:	f1c0 001c 	rsb	r0, r0, #28
 8005b78:	9b06      	ldr	r3, [sp, #24]
 8005b7a:	4407      	add	r7, r0
 8005b7c:	4403      	add	r3, r0
 8005b7e:	9306      	str	r3, [sp, #24]
 8005b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b82:	4403      	add	r3, r0
 8005b84:	9309      	str	r3, [sp, #36]	; 0x24
 8005b86:	9b06      	ldr	r3, [sp, #24]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dd05      	ble.n	8005b98 <_dtoa_r+0x830>
 8005b8c:	4659      	mov	r1, fp
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4628      	mov	r0, r5
 8005b92:	f000 fc0d 	bl	80063b0 <__lshift>
 8005b96:	4683      	mov	fp, r0
 8005b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	dd05      	ble.n	8005baa <_dtoa_r+0x842>
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 fc04 	bl	80063b0 <__lshift>
 8005ba8:	4604      	mov	r4, r0
 8005baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d070      	beq.n	8005c92 <_dtoa_r+0x92a>
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	4658      	mov	r0, fp
 8005bb4:	f000 fc6c 	bl	8006490 <__mcmp>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	da6a      	bge.n	8005c92 <_dtoa_r+0x92a>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4659      	mov	r1, fp
 8005bc0:	220a      	movs	r2, #10
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f000 fa48 	bl	8006058 <__multadd>
 8005bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bca:	4683      	mov	fp, r0
 8005bcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 8194 	beq.w	8005efe <_dtoa_r+0xb96>
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	2300      	movs	r3, #0
 8005bda:	220a      	movs	r2, #10
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f000 fa3b 	bl	8006058 <__multadd>
 8005be2:	f1b9 0f00 	cmp.w	r9, #0
 8005be6:	4606      	mov	r6, r0
 8005be8:	f300 8093 	bgt.w	8005d12 <_dtoa_r+0x9aa>
 8005bec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	dc57      	bgt.n	8005ca2 <_dtoa_r+0x93a>
 8005bf2:	e08e      	b.n	8005d12 <_dtoa_r+0x9aa>
 8005bf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005bf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bfa:	e757      	b.n	8005aac <_dtoa_r+0x744>
 8005bfc:	9b08      	ldr	r3, [sp, #32]
 8005bfe:	1e5c      	subs	r4, r3, #1
 8005c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	bfb7      	itett	lt
 8005c06:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c08:	1b1c      	subge	r4, r3, r4
 8005c0a:	1ae2      	sublt	r2, r4, r3
 8005c0c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005c0e:	bfbe      	ittt	lt
 8005c10:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005c12:	189b      	addlt	r3, r3, r2
 8005c14:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005c16:	9b08      	ldr	r3, [sp, #32]
 8005c18:	bfb8      	it	lt
 8005c1a:	2400      	movlt	r4, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bfbb      	ittet	lt
 8005c20:	9b06      	ldrlt	r3, [sp, #24]
 8005c22:	9a08      	ldrlt	r2, [sp, #32]
 8005c24:	9f06      	ldrge	r7, [sp, #24]
 8005c26:	1a9f      	sublt	r7, r3, r2
 8005c28:	bfac      	ite	ge
 8005c2a:	9b08      	ldrge	r3, [sp, #32]
 8005c2c:	2300      	movlt	r3, #0
 8005c2e:	e73f      	b.n	8005ab0 <_dtoa_r+0x748>
 8005c30:	3fe00000 	.word	0x3fe00000
 8005c34:	40240000 	.word	0x40240000
 8005c38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c3a:	9f06      	ldr	r7, [sp, #24]
 8005c3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005c3e:	e742      	b.n	8005ac6 <_dtoa_r+0x75e>
 8005c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c42:	e76b      	b.n	8005b1c <_dtoa_r+0x7b4>
 8005c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	dc19      	bgt.n	8005c7e <_dtoa_r+0x916>
 8005c4a:	9b04      	ldr	r3, [sp, #16]
 8005c4c:	b9bb      	cbnz	r3, 8005c7e <_dtoa_r+0x916>
 8005c4e:	9b05      	ldr	r3, [sp, #20]
 8005c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c54:	b99b      	cbnz	r3, 8005c7e <_dtoa_r+0x916>
 8005c56:	9b05      	ldr	r3, [sp, #20]
 8005c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c5c:	0d1b      	lsrs	r3, r3, #20
 8005c5e:	051b      	lsls	r3, r3, #20
 8005c60:	b183      	cbz	r3, 8005c84 <_dtoa_r+0x91c>
 8005c62:	f04f 0801 	mov.w	r8, #1
 8005c66:	9b06      	ldr	r3, [sp, #24]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	9306      	str	r3, [sp, #24]
 8005c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6e:	3301      	adds	r3, #1
 8005c70:	9309      	str	r3, [sp, #36]	; 0x24
 8005c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f47f af6a 	bne.w	8005b4e <_dtoa_r+0x7e6>
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	e76f      	b.n	8005b5e <_dtoa_r+0x7f6>
 8005c7e:	f04f 0800 	mov.w	r8, #0
 8005c82:	e7f6      	b.n	8005c72 <_dtoa_r+0x90a>
 8005c84:	4698      	mov	r8, r3
 8005c86:	e7f4      	b.n	8005c72 <_dtoa_r+0x90a>
 8005c88:	f43f af7d 	beq.w	8005b86 <_dtoa_r+0x81e>
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	301c      	adds	r0, #28
 8005c90:	e772      	b.n	8005b78 <_dtoa_r+0x810>
 8005c92:	9b08      	ldr	r3, [sp, #32]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dc36      	bgt.n	8005d06 <_dtoa_r+0x99e>
 8005c98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	dd33      	ble.n	8005d06 <_dtoa_r+0x99e>
 8005c9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ca2:	f1b9 0f00 	cmp.w	r9, #0
 8005ca6:	d10d      	bne.n	8005cc4 <_dtoa_r+0x95c>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	464b      	mov	r3, r9
 8005cac:	2205      	movs	r2, #5
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 f9d2 	bl	8006058 <__multadd>
 8005cb4:	4601      	mov	r1, r0
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4658      	mov	r0, fp
 8005cba:	f000 fbe9 	bl	8006490 <__mcmp>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	f73f adb8 	bgt.w	8005834 <_dtoa_r+0x4cc>
 8005cc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cc6:	9f03      	ldr	r7, [sp, #12]
 8005cc8:	ea6f 0a03 	mvn.w	sl, r3
 8005ccc:	f04f 0800 	mov.w	r8, #0
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f000 f99e 	bl	8006014 <_Bfree>
 8005cd8:	2e00      	cmp	r6, #0
 8005cda:	f43f aea7 	beq.w	8005a2c <_dtoa_r+0x6c4>
 8005cde:	f1b8 0f00 	cmp.w	r8, #0
 8005ce2:	d005      	beq.n	8005cf0 <_dtoa_r+0x988>
 8005ce4:	45b0      	cmp	r8, r6
 8005ce6:	d003      	beq.n	8005cf0 <_dtoa_r+0x988>
 8005ce8:	4641      	mov	r1, r8
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 f992 	bl	8006014 <_Bfree>
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 f98e 	bl	8006014 <_Bfree>
 8005cf8:	e698      	b.n	8005a2c <_dtoa_r+0x6c4>
 8005cfa:	2400      	movs	r4, #0
 8005cfc:	4626      	mov	r6, r4
 8005cfe:	e7e1      	b.n	8005cc4 <_dtoa_r+0x95c>
 8005d00:	46c2      	mov	sl, r8
 8005d02:	4626      	mov	r6, r4
 8005d04:	e596      	b.n	8005834 <_dtoa_r+0x4cc>
 8005d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 80fd 	beq.w	8005f0c <_dtoa_r+0xba4>
 8005d12:	2f00      	cmp	r7, #0
 8005d14:	dd05      	ble.n	8005d22 <_dtoa_r+0x9ba>
 8005d16:	4631      	mov	r1, r6
 8005d18:	463a      	mov	r2, r7
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 fb48 	bl	80063b0 <__lshift>
 8005d20:	4606      	mov	r6, r0
 8005d22:	f1b8 0f00 	cmp.w	r8, #0
 8005d26:	d05c      	beq.n	8005de2 <_dtoa_r+0xa7a>
 8005d28:	4628      	mov	r0, r5
 8005d2a:	6871      	ldr	r1, [r6, #4]
 8005d2c:	f000 f932 	bl	8005f94 <_Balloc>
 8005d30:	4607      	mov	r7, r0
 8005d32:	b928      	cbnz	r0, 8005d40 <_dtoa_r+0x9d8>
 8005d34:	4602      	mov	r2, r0
 8005d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d3a:	4b7f      	ldr	r3, [pc, #508]	; (8005f38 <_dtoa_r+0xbd0>)
 8005d3c:	f7ff bb28 	b.w	8005390 <_dtoa_r+0x28>
 8005d40:	6932      	ldr	r2, [r6, #16]
 8005d42:	f106 010c 	add.w	r1, r6, #12
 8005d46:	3202      	adds	r2, #2
 8005d48:	0092      	lsls	r2, r2, #2
 8005d4a:	300c      	adds	r0, #12
 8005d4c:	f000 f914 	bl	8005f78 <memcpy>
 8005d50:	2201      	movs	r2, #1
 8005d52:	4639      	mov	r1, r7
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 fb2b 	bl	80063b0 <__lshift>
 8005d5a:	46b0      	mov	r8, r6
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	9b03      	ldr	r3, [sp, #12]
 8005d60:	3301      	adds	r3, #1
 8005d62:	9308      	str	r3, [sp, #32]
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	444b      	add	r3, r9
 8005d68:	930a      	str	r3, [sp, #40]	; 0x28
 8005d6a:	9b04      	ldr	r3, [sp, #16]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	9309      	str	r3, [sp, #36]	; 0x24
 8005d72:	9b08      	ldr	r3, [sp, #32]
 8005d74:	4621      	mov	r1, r4
 8005d76:	3b01      	subs	r3, #1
 8005d78:	4658      	mov	r0, fp
 8005d7a:	9304      	str	r3, [sp, #16]
 8005d7c:	f7ff fa68 	bl	8005250 <quorem>
 8005d80:	4603      	mov	r3, r0
 8005d82:	4641      	mov	r1, r8
 8005d84:	3330      	adds	r3, #48	; 0x30
 8005d86:	9006      	str	r0, [sp, #24]
 8005d88:	4658      	mov	r0, fp
 8005d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d8c:	f000 fb80 	bl	8006490 <__mcmp>
 8005d90:	4632      	mov	r2, r6
 8005d92:	4681      	mov	r9, r0
 8005d94:	4621      	mov	r1, r4
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 fb96 	bl	80064c8 <__mdiff>
 8005d9c:	68c2      	ldr	r2, [r0, #12]
 8005d9e:	4607      	mov	r7, r0
 8005da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da2:	bb02      	cbnz	r2, 8005de6 <_dtoa_r+0xa7e>
 8005da4:	4601      	mov	r1, r0
 8005da6:	4658      	mov	r0, fp
 8005da8:	f000 fb72 	bl	8006490 <__mcmp>
 8005dac:	4602      	mov	r2, r0
 8005dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005db0:	4639      	mov	r1, r7
 8005db2:	4628      	mov	r0, r5
 8005db4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005db8:	f000 f92c 	bl	8006014 <_Bfree>
 8005dbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dc0:	9f08      	ldr	r7, [sp, #32]
 8005dc2:	ea43 0102 	orr.w	r1, r3, r2
 8005dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dcc:	d10d      	bne.n	8005dea <_dtoa_r+0xa82>
 8005dce:	2b39      	cmp	r3, #57	; 0x39
 8005dd0:	d029      	beq.n	8005e26 <_dtoa_r+0xabe>
 8005dd2:	f1b9 0f00 	cmp.w	r9, #0
 8005dd6:	dd01      	ble.n	8005ddc <_dtoa_r+0xa74>
 8005dd8:	9b06      	ldr	r3, [sp, #24]
 8005dda:	3331      	adds	r3, #49	; 0x31
 8005ddc:	9a04      	ldr	r2, [sp, #16]
 8005dde:	7013      	strb	r3, [r2, #0]
 8005de0:	e776      	b.n	8005cd0 <_dtoa_r+0x968>
 8005de2:	4630      	mov	r0, r6
 8005de4:	e7b9      	b.n	8005d5a <_dtoa_r+0x9f2>
 8005de6:	2201      	movs	r2, #1
 8005de8:	e7e2      	b.n	8005db0 <_dtoa_r+0xa48>
 8005dea:	f1b9 0f00 	cmp.w	r9, #0
 8005dee:	db06      	blt.n	8005dfe <_dtoa_r+0xa96>
 8005df0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005df2:	ea41 0909 	orr.w	r9, r1, r9
 8005df6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005df8:	ea59 0101 	orrs.w	r1, r9, r1
 8005dfc:	d120      	bne.n	8005e40 <_dtoa_r+0xad8>
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	ddec      	ble.n	8005ddc <_dtoa_r+0xa74>
 8005e02:	4659      	mov	r1, fp
 8005e04:	2201      	movs	r2, #1
 8005e06:	4628      	mov	r0, r5
 8005e08:	9308      	str	r3, [sp, #32]
 8005e0a:	f000 fad1 	bl	80063b0 <__lshift>
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4683      	mov	fp, r0
 8005e12:	f000 fb3d 	bl	8006490 <__mcmp>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	9b08      	ldr	r3, [sp, #32]
 8005e1a:	dc02      	bgt.n	8005e22 <_dtoa_r+0xaba>
 8005e1c:	d1de      	bne.n	8005ddc <_dtoa_r+0xa74>
 8005e1e:	07da      	lsls	r2, r3, #31
 8005e20:	d5dc      	bpl.n	8005ddc <_dtoa_r+0xa74>
 8005e22:	2b39      	cmp	r3, #57	; 0x39
 8005e24:	d1d8      	bne.n	8005dd8 <_dtoa_r+0xa70>
 8005e26:	2339      	movs	r3, #57	; 0x39
 8005e28:	9a04      	ldr	r2, [sp, #16]
 8005e2a:	7013      	strb	r3, [r2, #0]
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	461f      	mov	r7, r3
 8005e30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	2a39      	cmp	r2, #57	; 0x39
 8005e38:	d050      	beq.n	8005edc <_dtoa_r+0xb74>
 8005e3a:	3201      	adds	r2, #1
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	e747      	b.n	8005cd0 <_dtoa_r+0x968>
 8005e40:	2a00      	cmp	r2, #0
 8005e42:	dd03      	ble.n	8005e4c <_dtoa_r+0xae4>
 8005e44:	2b39      	cmp	r3, #57	; 0x39
 8005e46:	d0ee      	beq.n	8005e26 <_dtoa_r+0xabe>
 8005e48:	3301      	adds	r3, #1
 8005e4a:	e7c7      	b.n	8005ddc <_dtoa_r+0xa74>
 8005e4c:	9a08      	ldr	r2, [sp, #32]
 8005e4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e54:	428a      	cmp	r2, r1
 8005e56:	d02a      	beq.n	8005eae <_dtoa_r+0xb46>
 8005e58:	4659      	mov	r1, fp
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	220a      	movs	r2, #10
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 f8fa 	bl	8006058 <__multadd>
 8005e64:	45b0      	cmp	r8, r6
 8005e66:	4683      	mov	fp, r0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	f04f 020a 	mov.w	r2, #10
 8005e70:	4641      	mov	r1, r8
 8005e72:	4628      	mov	r0, r5
 8005e74:	d107      	bne.n	8005e86 <_dtoa_r+0xb1e>
 8005e76:	f000 f8ef 	bl	8006058 <__multadd>
 8005e7a:	4680      	mov	r8, r0
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	9b08      	ldr	r3, [sp, #32]
 8005e80:	3301      	adds	r3, #1
 8005e82:	9308      	str	r3, [sp, #32]
 8005e84:	e775      	b.n	8005d72 <_dtoa_r+0xa0a>
 8005e86:	f000 f8e7 	bl	8006058 <__multadd>
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	2300      	movs	r3, #0
 8005e90:	220a      	movs	r2, #10
 8005e92:	4628      	mov	r0, r5
 8005e94:	f000 f8e0 	bl	8006058 <__multadd>
 8005e98:	4606      	mov	r6, r0
 8005e9a:	e7f0      	b.n	8005e7e <_dtoa_r+0xb16>
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	bfcc      	ite	gt
 8005ea2:	464f      	movgt	r7, r9
 8005ea4:	2701      	movle	r7, #1
 8005ea6:	f04f 0800 	mov.w	r8, #0
 8005eaa:	9a03      	ldr	r2, [sp, #12]
 8005eac:	4417      	add	r7, r2
 8005eae:	4659      	mov	r1, fp
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	9308      	str	r3, [sp, #32]
 8005eb6:	f000 fa7b 	bl	80063b0 <__lshift>
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4683      	mov	fp, r0
 8005ebe:	f000 fae7 	bl	8006490 <__mcmp>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	dcb2      	bgt.n	8005e2c <_dtoa_r+0xac4>
 8005ec6:	d102      	bne.n	8005ece <_dtoa_r+0xb66>
 8005ec8:	9b08      	ldr	r3, [sp, #32]
 8005eca:	07db      	lsls	r3, r3, #31
 8005ecc:	d4ae      	bmi.n	8005e2c <_dtoa_r+0xac4>
 8005ece:	463b      	mov	r3, r7
 8005ed0:	461f      	mov	r7, r3
 8005ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ed6:	2a30      	cmp	r2, #48	; 0x30
 8005ed8:	d0fa      	beq.n	8005ed0 <_dtoa_r+0xb68>
 8005eda:	e6f9      	b.n	8005cd0 <_dtoa_r+0x968>
 8005edc:	9a03      	ldr	r2, [sp, #12]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d1a5      	bne.n	8005e2e <_dtoa_r+0xac6>
 8005ee2:	2331      	movs	r3, #49	; 0x31
 8005ee4:	f10a 0a01 	add.w	sl, sl, #1
 8005ee8:	e779      	b.n	8005dde <_dtoa_r+0xa76>
 8005eea:	4b14      	ldr	r3, [pc, #80]	; (8005f3c <_dtoa_r+0xbd4>)
 8005eec:	f7ff baa8 	b.w	8005440 <_dtoa_r+0xd8>
 8005ef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f47f aa81 	bne.w	80053fa <_dtoa_r+0x92>
 8005ef8:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <_dtoa_r+0xbd8>)
 8005efa:	f7ff baa1 	b.w	8005440 <_dtoa_r+0xd8>
 8005efe:	f1b9 0f00 	cmp.w	r9, #0
 8005f02:	dc03      	bgt.n	8005f0c <_dtoa_r+0xba4>
 8005f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	f73f aecb 	bgt.w	8005ca2 <_dtoa_r+0x93a>
 8005f0c:	9f03      	ldr	r7, [sp, #12]
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4658      	mov	r0, fp
 8005f12:	f7ff f99d 	bl	8005250 <quorem>
 8005f16:	9a03      	ldr	r2, [sp, #12]
 8005f18:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f1c:	f807 3b01 	strb.w	r3, [r7], #1
 8005f20:	1aba      	subs	r2, r7, r2
 8005f22:	4591      	cmp	r9, r2
 8005f24:	ddba      	ble.n	8005e9c <_dtoa_r+0xb34>
 8005f26:	4659      	mov	r1, fp
 8005f28:	2300      	movs	r3, #0
 8005f2a:	220a      	movs	r2, #10
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f000 f893 	bl	8006058 <__multadd>
 8005f32:	4683      	mov	fp, r0
 8005f34:	e7eb      	b.n	8005f0e <_dtoa_r+0xba6>
 8005f36:	bf00      	nop
 8005f38:	0800749f 	.word	0x0800749f
 8005f3c:	080073fc 	.word	0x080073fc
 8005f40:	08007420 	.word	0x08007420

08005f44 <_localeconv_r>:
 8005f44:	4800      	ldr	r0, [pc, #0]	; (8005f48 <_localeconv_r+0x4>)
 8005f46:	4770      	bx	lr
 8005f48:	20000160 	.word	0x20000160

08005f4c <malloc>:
 8005f4c:	4b02      	ldr	r3, [pc, #8]	; (8005f58 <malloc+0xc>)
 8005f4e:	4601      	mov	r1, r0
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	f000 bc1d 	b.w	8006790 <_malloc_r>
 8005f56:	bf00      	nop
 8005f58:	2000000c 	.word	0x2000000c

08005f5c <memchr>:
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	b2c9      	uxtb	r1, r1
 8005f62:	4402      	add	r2, r0
 8005f64:	4293      	cmp	r3, r2
 8005f66:	4618      	mov	r0, r3
 8005f68:	d101      	bne.n	8005f6e <memchr+0x12>
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	e003      	b.n	8005f76 <memchr+0x1a>
 8005f6e:	7804      	ldrb	r4, [r0, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	428c      	cmp	r4, r1
 8005f74:	d1f6      	bne.n	8005f64 <memchr+0x8>
 8005f76:	bd10      	pop	{r4, pc}

08005f78 <memcpy>:
 8005f78:	440a      	add	r2, r1
 8005f7a:	4291      	cmp	r1, r2
 8005f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f80:	d100      	bne.n	8005f84 <memcpy+0xc>
 8005f82:	4770      	bx	lr
 8005f84:	b510      	push	{r4, lr}
 8005f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f8a:	4291      	cmp	r1, r2
 8005f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f90:	d1f9      	bne.n	8005f86 <memcpy+0xe>
 8005f92:	bd10      	pop	{r4, pc}

08005f94 <_Balloc>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f98:	4604      	mov	r4, r0
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	b976      	cbnz	r6, 8005fbc <_Balloc+0x28>
 8005f9e:	2010      	movs	r0, #16
 8005fa0:	f7ff ffd4 	bl	8005f4c <malloc>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6260      	str	r0, [r4, #36]	; 0x24
 8005fa8:	b920      	cbnz	r0, 8005fb4 <_Balloc+0x20>
 8005faa:	2166      	movs	r1, #102	; 0x66
 8005fac:	4b17      	ldr	r3, [pc, #92]	; (800600c <_Balloc+0x78>)
 8005fae:	4818      	ldr	r0, [pc, #96]	; (8006010 <_Balloc+0x7c>)
 8005fb0:	f000 fc72 	bl	8006898 <__assert_func>
 8005fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fb8:	6006      	str	r6, [r0, #0]
 8005fba:	60c6      	str	r6, [r0, #12]
 8005fbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005fbe:	68f3      	ldr	r3, [r6, #12]
 8005fc0:	b183      	cbz	r3, 8005fe4 <_Balloc+0x50>
 8005fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fca:	b9b8      	cbnz	r0, 8005ffc <_Balloc+0x68>
 8005fcc:	2101      	movs	r1, #1
 8005fce:	fa01 f605 	lsl.w	r6, r1, r5
 8005fd2:	1d72      	adds	r2, r6, #5
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	0092      	lsls	r2, r2, #2
 8005fd8:	f000 fb5e 	bl	8006698 <_calloc_r>
 8005fdc:	b160      	cbz	r0, 8005ff8 <_Balloc+0x64>
 8005fde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fe2:	e00e      	b.n	8006002 <_Balloc+0x6e>
 8005fe4:	2221      	movs	r2, #33	; 0x21
 8005fe6:	2104      	movs	r1, #4
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 fb55 	bl	8006698 <_calloc_r>
 8005fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff0:	60f0      	str	r0, [r6, #12]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e4      	bne.n	8005fc2 <_Balloc+0x2e>
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	6802      	ldr	r2, [r0, #0]
 8005ffe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006002:	2300      	movs	r3, #0
 8006004:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006008:	e7f7      	b.n	8005ffa <_Balloc+0x66>
 800600a:	bf00      	nop
 800600c:	0800742d 	.word	0x0800742d
 8006010:	080074b0 	.word	0x080074b0

08006014 <_Bfree>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006018:	4605      	mov	r5, r0
 800601a:	460c      	mov	r4, r1
 800601c:	b976      	cbnz	r6, 800603c <_Bfree+0x28>
 800601e:	2010      	movs	r0, #16
 8006020:	f7ff ff94 	bl	8005f4c <malloc>
 8006024:	4602      	mov	r2, r0
 8006026:	6268      	str	r0, [r5, #36]	; 0x24
 8006028:	b920      	cbnz	r0, 8006034 <_Bfree+0x20>
 800602a:	218a      	movs	r1, #138	; 0x8a
 800602c:	4b08      	ldr	r3, [pc, #32]	; (8006050 <_Bfree+0x3c>)
 800602e:	4809      	ldr	r0, [pc, #36]	; (8006054 <_Bfree+0x40>)
 8006030:	f000 fc32 	bl	8006898 <__assert_func>
 8006034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006038:	6006      	str	r6, [r0, #0]
 800603a:	60c6      	str	r6, [r0, #12]
 800603c:	b13c      	cbz	r4, 800604e <_Bfree+0x3a>
 800603e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006040:	6862      	ldr	r2, [r4, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006048:	6021      	str	r1, [r4, #0]
 800604a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800604e:	bd70      	pop	{r4, r5, r6, pc}
 8006050:	0800742d 	.word	0x0800742d
 8006054:	080074b0 	.word	0x080074b0

08006058 <__multadd>:
 8006058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800605c:	4607      	mov	r7, r0
 800605e:	460c      	mov	r4, r1
 8006060:	461e      	mov	r6, r3
 8006062:	2000      	movs	r0, #0
 8006064:	690d      	ldr	r5, [r1, #16]
 8006066:	f101 0c14 	add.w	ip, r1, #20
 800606a:	f8dc 3000 	ldr.w	r3, [ip]
 800606e:	3001      	adds	r0, #1
 8006070:	b299      	uxth	r1, r3
 8006072:	fb02 6101 	mla	r1, r2, r1, r6
 8006076:	0c1e      	lsrs	r6, r3, #16
 8006078:	0c0b      	lsrs	r3, r1, #16
 800607a:	fb02 3306 	mla	r3, r2, r6, r3
 800607e:	b289      	uxth	r1, r1
 8006080:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006084:	4285      	cmp	r5, r0
 8006086:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800608a:	f84c 1b04 	str.w	r1, [ip], #4
 800608e:	dcec      	bgt.n	800606a <__multadd+0x12>
 8006090:	b30e      	cbz	r6, 80060d6 <__multadd+0x7e>
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	42ab      	cmp	r3, r5
 8006096:	dc19      	bgt.n	80060cc <__multadd+0x74>
 8006098:	6861      	ldr	r1, [r4, #4]
 800609a:	4638      	mov	r0, r7
 800609c:	3101      	adds	r1, #1
 800609e:	f7ff ff79 	bl	8005f94 <_Balloc>
 80060a2:	4680      	mov	r8, r0
 80060a4:	b928      	cbnz	r0, 80060b2 <__multadd+0x5a>
 80060a6:	4602      	mov	r2, r0
 80060a8:	21b5      	movs	r1, #181	; 0xb5
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <__multadd+0x84>)
 80060ac:	480c      	ldr	r0, [pc, #48]	; (80060e0 <__multadd+0x88>)
 80060ae:	f000 fbf3 	bl	8006898 <__assert_func>
 80060b2:	6922      	ldr	r2, [r4, #16]
 80060b4:	f104 010c 	add.w	r1, r4, #12
 80060b8:	3202      	adds	r2, #2
 80060ba:	0092      	lsls	r2, r2, #2
 80060bc:	300c      	adds	r0, #12
 80060be:	f7ff ff5b 	bl	8005f78 <memcpy>
 80060c2:	4621      	mov	r1, r4
 80060c4:	4638      	mov	r0, r7
 80060c6:	f7ff ffa5 	bl	8006014 <_Bfree>
 80060ca:	4644      	mov	r4, r8
 80060cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060d0:	3501      	adds	r5, #1
 80060d2:	615e      	str	r6, [r3, #20]
 80060d4:	6125      	str	r5, [r4, #16]
 80060d6:	4620      	mov	r0, r4
 80060d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060dc:	0800749f 	.word	0x0800749f
 80060e0:	080074b0 	.word	0x080074b0

080060e4 <__hi0bits>:
 80060e4:	0c02      	lsrs	r2, r0, #16
 80060e6:	0412      	lsls	r2, r2, #16
 80060e8:	4603      	mov	r3, r0
 80060ea:	b9ca      	cbnz	r2, 8006120 <__hi0bits+0x3c>
 80060ec:	0403      	lsls	r3, r0, #16
 80060ee:	2010      	movs	r0, #16
 80060f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80060f4:	bf04      	itt	eq
 80060f6:	021b      	lsleq	r3, r3, #8
 80060f8:	3008      	addeq	r0, #8
 80060fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80060fe:	bf04      	itt	eq
 8006100:	011b      	lsleq	r3, r3, #4
 8006102:	3004      	addeq	r0, #4
 8006104:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006108:	bf04      	itt	eq
 800610a:	009b      	lsleq	r3, r3, #2
 800610c:	3002      	addeq	r0, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	db05      	blt.n	800611e <__hi0bits+0x3a>
 8006112:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006116:	f100 0001 	add.w	r0, r0, #1
 800611a:	bf08      	it	eq
 800611c:	2020      	moveq	r0, #32
 800611e:	4770      	bx	lr
 8006120:	2000      	movs	r0, #0
 8006122:	e7e5      	b.n	80060f0 <__hi0bits+0xc>

08006124 <__lo0bits>:
 8006124:	6803      	ldr	r3, [r0, #0]
 8006126:	4602      	mov	r2, r0
 8006128:	f013 0007 	ands.w	r0, r3, #7
 800612c:	d00b      	beq.n	8006146 <__lo0bits+0x22>
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d421      	bmi.n	8006176 <__lo0bits+0x52>
 8006132:	0798      	lsls	r0, r3, #30
 8006134:	bf49      	itett	mi
 8006136:	085b      	lsrmi	r3, r3, #1
 8006138:	089b      	lsrpl	r3, r3, #2
 800613a:	2001      	movmi	r0, #1
 800613c:	6013      	strmi	r3, [r2, #0]
 800613e:	bf5c      	itt	pl
 8006140:	2002      	movpl	r0, #2
 8006142:	6013      	strpl	r3, [r2, #0]
 8006144:	4770      	bx	lr
 8006146:	b299      	uxth	r1, r3
 8006148:	b909      	cbnz	r1, 800614e <__lo0bits+0x2a>
 800614a:	2010      	movs	r0, #16
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	b2d9      	uxtb	r1, r3
 8006150:	b909      	cbnz	r1, 8006156 <__lo0bits+0x32>
 8006152:	3008      	adds	r0, #8
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	0719      	lsls	r1, r3, #28
 8006158:	bf04      	itt	eq
 800615a:	091b      	lsreq	r3, r3, #4
 800615c:	3004      	addeq	r0, #4
 800615e:	0799      	lsls	r1, r3, #30
 8006160:	bf04      	itt	eq
 8006162:	089b      	lsreq	r3, r3, #2
 8006164:	3002      	addeq	r0, #2
 8006166:	07d9      	lsls	r1, r3, #31
 8006168:	d403      	bmi.n	8006172 <__lo0bits+0x4e>
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	f100 0001 	add.w	r0, r0, #1
 8006170:	d003      	beq.n	800617a <__lo0bits+0x56>
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	4770      	bx	lr
 8006176:	2000      	movs	r0, #0
 8006178:	4770      	bx	lr
 800617a:	2020      	movs	r0, #32
 800617c:	4770      	bx	lr
	...

08006180 <__i2b>:
 8006180:	b510      	push	{r4, lr}
 8006182:	460c      	mov	r4, r1
 8006184:	2101      	movs	r1, #1
 8006186:	f7ff ff05 	bl	8005f94 <_Balloc>
 800618a:	4602      	mov	r2, r0
 800618c:	b928      	cbnz	r0, 800619a <__i2b+0x1a>
 800618e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006192:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <__i2b+0x24>)
 8006194:	4804      	ldr	r0, [pc, #16]	; (80061a8 <__i2b+0x28>)
 8006196:	f000 fb7f 	bl	8006898 <__assert_func>
 800619a:	2301      	movs	r3, #1
 800619c:	6144      	str	r4, [r0, #20]
 800619e:	6103      	str	r3, [r0, #16]
 80061a0:	bd10      	pop	{r4, pc}
 80061a2:	bf00      	nop
 80061a4:	0800749f 	.word	0x0800749f
 80061a8:	080074b0 	.word	0x080074b0

080061ac <__multiply>:
 80061ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	4691      	mov	r9, r2
 80061b2:	690a      	ldr	r2, [r1, #16]
 80061b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061b8:	460c      	mov	r4, r1
 80061ba:	429a      	cmp	r2, r3
 80061bc:	bfbe      	ittt	lt
 80061be:	460b      	movlt	r3, r1
 80061c0:	464c      	movlt	r4, r9
 80061c2:	4699      	movlt	r9, r3
 80061c4:	6927      	ldr	r7, [r4, #16]
 80061c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	6861      	ldr	r1, [r4, #4]
 80061ce:	eb07 060a 	add.w	r6, r7, sl
 80061d2:	42b3      	cmp	r3, r6
 80061d4:	b085      	sub	sp, #20
 80061d6:	bfb8      	it	lt
 80061d8:	3101      	addlt	r1, #1
 80061da:	f7ff fedb 	bl	8005f94 <_Balloc>
 80061de:	b930      	cbnz	r0, 80061ee <__multiply+0x42>
 80061e0:	4602      	mov	r2, r0
 80061e2:	f240 115d 	movw	r1, #349	; 0x15d
 80061e6:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <__multiply+0x148>)
 80061e8:	4843      	ldr	r0, [pc, #268]	; (80062f8 <__multiply+0x14c>)
 80061ea:	f000 fb55 	bl	8006898 <__assert_func>
 80061ee:	f100 0514 	add.w	r5, r0, #20
 80061f2:	462b      	mov	r3, r5
 80061f4:	2200      	movs	r2, #0
 80061f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061fa:	4543      	cmp	r3, r8
 80061fc:	d321      	bcc.n	8006242 <__multiply+0x96>
 80061fe:	f104 0314 	add.w	r3, r4, #20
 8006202:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006206:	f109 0314 	add.w	r3, r9, #20
 800620a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800620e:	9202      	str	r2, [sp, #8]
 8006210:	1b3a      	subs	r2, r7, r4
 8006212:	3a15      	subs	r2, #21
 8006214:	f022 0203 	bic.w	r2, r2, #3
 8006218:	3204      	adds	r2, #4
 800621a:	f104 0115 	add.w	r1, r4, #21
 800621e:	428f      	cmp	r7, r1
 8006220:	bf38      	it	cc
 8006222:	2204      	movcc	r2, #4
 8006224:	9201      	str	r2, [sp, #4]
 8006226:	9a02      	ldr	r2, [sp, #8]
 8006228:	9303      	str	r3, [sp, #12]
 800622a:	429a      	cmp	r2, r3
 800622c:	d80c      	bhi.n	8006248 <__multiply+0x9c>
 800622e:	2e00      	cmp	r6, #0
 8006230:	dd03      	ble.n	800623a <__multiply+0x8e>
 8006232:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006236:	2b00      	cmp	r3, #0
 8006238:	d059      	beq.n	80062ee <__multiply+0x142>
 800623a:	6106      	str	r6, [r0, #16]
 800623c:	b005      	add	sp, #20
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	f843 2b04 	str.w	r2, [r3], #4
 8006246:	e7d8      	b.n	80061fa <__multiply+0x4e>
 8006248:	f8b3 a000 	ldrh.w	sl, [r3]
 800624c:	f1ba 0f00 	cmp.w	sl, #0
 8006250:	d023      	beq.n	800629a <__multiply+0xee>
 8006252:	46a9      	mov	r9, r5
 8006254:	f04f 0c00 	mov.w	ip, #0
 8006258:	f104 0e14 	add.w	lr, r4, #20
 800625c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006260:	f8d9 1000 	ldr.w	r1, [r9]
 8006264:	fa1f fb82 	uxth.w	fp, r2
 8006268:	b289      	uxth	r1, r1
 800626a:	fb0a 110b 	mla	r1, sl, fp, r1
 800626e:	4461      	add	r1, ip
 8006270:	f8d9 c000 	ldr.w	ip, [r9]
 8006274:	0c12      	lsrs	r2, r2, #16
 8006276:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800627a:	fb0a c202 	mla	r2, sl, r2, ip
 800627e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006282:	b289      	uxth	r1, r1
 8006284:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006288:	4577      	cmp	r7, lr
 800628a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800628e:	f849 1b04 	str.w	r1, [r9], #4
 8006292:	d8e3      	bhi.n	800625c <__multiply+0xb0>
 8006294:	9a01      	ldr	r2, [sp, #4]
 8006296:	f845 c002 	str.w	ip, [r5, r2]
 800629a:	9a03      	ldr	r2, [sp, #12]
 800629c:	3304      	adds	r3, #4
 800629e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062a2:	f1b9 0f00 	cmp.w	r9, #0
 80062a6:	d020      	beq.n	80062ea <__multiply+0x13e>
 80062a8:	46ae      	mov	lr, r5
 80062aa:	f04f 0a00 	mov.w	sl, #0
 80062ae:	6829      	ldr	r1, [r5, #0]
 80062b0:	f104 0c14 	add.w	ip, r4, #20
 80062b4:	f8bc b000 	ldrh.w	fp, [ip]
 80062b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80062bc:	b289      	uxth	r1, r1
 80062be:	fb09 220b 	mla	r2, r9, fp, r2
 80062c2:	4492      	add	sl, r2
 80062c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80062c8:	f84e 1b04 	str.w	r1, [lr], #4
 80062cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80062d0:	f8be 1000 	ldrh.w	r1, [lr]
 80062d4:	0c12      	lsrs	r2, r2, #16
 80062d6:	fb09 1102 	mla	r1, r9, r2, r1
 80062da:	4567      	cmp	r7, ip
 80062dc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80062e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062e4:	d8e6      	bhi.n	80062b4 <__multiply+0x108>
 80062e6:	9a01      	ldr	r2, [sp, #4]
 80062e8:	50a9      	str	r1, [r5, r2]
 80062ea:	3504      	adds	r5, #4
 80062ec:	e79b      	b.n	8006226 <__multiply+0x7a>
 80062ee:	3e01      	subs	r6, #1
 80062f0:	e79d      	b.n	800622e <__multiply+0x82>
 80062f2:	bf00      	nop
 80062f4:	0800749f 	.word	0x0800749f
 80062f8:	080074b0 	.word	0x080074b0

080062fc <__pow5mult>:
 80062fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006300:	4615      	mov	r5, r2
 8006302:	f012 0203 	ands.w	r2, r2, #3
 8006306:	4606      	mov	r6, r0
 8006308:	460f      	mov	r7, r1
 800630a:	d007      	beq.n	800631c <__pow5mult+0x20>
 800630c:	4c25      	ldr	r4, [pc, #148]	; (80063a4 <__pow5mult+0xa8>)
 800630e:	3a01      	subs	r2, #1
 8006310:	2300      	movs	r3, #0
 8006312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006316:	f7ff fe9f 	bl	8006058 <__multadd>
 800631a:	4607      	mov	r7, r0
 800631c:	10ad      	asrs	r5, r5, #2
 800631e:	d03d      	beq.n	800639c <__pow5mult+0xa0>
 8006320:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006322:	b97c      	cbnz	r4, 8006344 <__pow5mult+0x48>
 8006324:	2010      	movs	r0, #16
 8006326:	f7ff fe11 	bl	8005f4c <malloc>
 800632a:	4602      	mov	r2, r0
 800632c:	6270      	str	r0, [r6, #36]	; 0x24
 800632e:	b928      	cbnz	r0, 800633c <__pow5mult+0x40>
 8006330:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006334:	4b1c      	ldr	r3, [pc, #112]	; (80063a8 <__pow5mult+0xac>)
 8006336:	481d      	ldr	r0, [pc, #116]	; (80063ac <__pow5mult+0xb0>)
 8006338:	f000 faae 	bl	8006898 <__assert_func>
 800633c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006340:	6004      	str	r4, [r0, #0]
 8006342:	60c4      	str	r4, [r0, #12]
 8006344:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800634c:	b94c      	cbnz	r4, 8006362 <__pow5mult+0x66>
 800634e:	f240 2171 	movw	r1, #625	; 0x271
 8006352:	4630      	mov	r0, r6
 8006354:	f7ff ff14 	bl	8006180 <__i2b>
 8006358:	2300      	movs	r3, #0
 800635a:	4604      	mov	r4, r0
 800635c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006360:	6003      	str	r3, [r0, #0]
 8006362:	f04f 0900 	mov.w	r9, #0
 8006366:	07eb      	lsls	r3, r5, #31
 8006368:	d50a      	bpl.n	8006380 <__pow5mult+0x84>
 800636a:	4639      	mov	r1, r7
 800636c:	4622      	mov	r2, r4
 800636e:	4630      	mov	r0, r6
 8006370:	f7ff ff1c 	bl	80061ac <__multiply>
 8006374:	4680      	mov	r8, r0
 8006376:	4639      	mov	r1, r7
 8006378:	4630      	mov	r0, r6
 800637a:	f7ff fe4b 	bl	8006014 <_Bfree>
 800637e:	4647      	mov	r7, r8
 8006380:	106d      	asrs	r5, r5, #1
 8006382:	d00b      	beq.n	800639c <__pow5mult+0xa0>
 8006384:	6820      	ldr	r0, [r4, #0]
 8006386:	b938      	cbnz	r0, 8006398 <__pow5mult+0x9c>
 8006388:	4622      	mov	r2, r4
 800638a:	4621      	mov	r1, r4
 800638c:	4630      	mov	r0, r6
 800638e:	f7ff ff0d 	bl	80061ac <__multiply>
 8006392:	6020      	str	r0, [r4, #0]
 8006394:	f8c0 9000 	str.w	r9, [r0]
 8006398:	4604      	mov	r4, r0
 800639a:	e7e4      	b.n	8006366 <__pow5mult+0x6a>
 800639c:	4638      	mov	r0, r7
 800639e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a2:	bf00      	nop
 80063a4:	08007600 	.word	0x08007600
 80063a8:	0800742d 	.word	0x0800742d
 80063ac:	080074b0 	.word	0x080074b0

080063b0 <__lshift>:
 80063b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	460c      	mov	r4, r1
 80063b6:	4607      	mov	r7, r0
 80063b8:	4691      	mov	r9, r2
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	6849      	ldr	r1, [r1, #4]
 80063be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063c2:	68a3      	ldr	r3, [r4, #8]
 80063c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063c8:	f108 0601 	add.w	r6, r8, #1
 80063cc:	42b3      	cmp	r3, r6
 80063ce:	db0b      	blt.n	80063e8 <__lshift+0x38>
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff fddf 	bl	8005f94 <_Balloc>
 80063d6:	4605      	mov	r5, r0
 80063d8:	b948      	cbnz	r0, 80063ee <__lshift+0x3e>
 80063da:	4602      	mov	r2, r0
 80063dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80063e0:	4b29      	ldr	r3, [pc, #164]	; (8006488 <__lshift+0xd8>)
 80063e2:	482a      	ldr	r0, [pc, #168]	; (800648c <__lshift+0xdc>)
 80063e4:	f000 fa58 	bl	8006898 <__assert_func>
 80063e8:	3101      	adds	r1, #1
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	e7ee      	b.n	80063cc <__lshift+0x1c>
 80063ee:	2300      	movs	r3, #0
 80063f0:	f100 0114 	add.w	r1, r0, #20
 80063f4:	f100 0210 	add.w	r2, r0, #16
 80063f8:	4618      	mov	r0, r3
 80063fa:	4553      	cmp	r3, sl
 80063fc:	db37      	blt.n	800646e <__lshift+0xbe>
 80063fe:	6920      	ldr	r0, [r4, #16]
 8006400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006404:	f104 0314 	add.w	r3, r4, #20
 8006408:	f019 091f 	ands.w	r9, r9, #31
 800640c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006414:	d02f      	beq.n	8006476 <__lshift+0xc6>
 8006416:	468a      	mov	sl, r1
 8006418:	f04f 0c00 	mov.w	ip, #0
 800641c:	f1c9 0e20 	rsb	lr, r9, #32
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	fa02 f209 	lsl.w	r2, r2, r9
 8006426:	ea42 020c 	orr.w	r2, r2, ip
 800642a:	f84a 2b04 	str.w	r2, [sl], #4
 800642e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006432:	4298      	cmp	r0, r3
 8006434:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006438:	d8f2      	bhi.n	8006420 <__lshift+0x70>
 800643a:	1b03      	subs	r3, r0, r4
 800643c:	3b15      	subs	r3, #21
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	3304      	adds	r3, #4
 8006444:	f104 0215 	add.w	r2, r4, #21
 8006448:	4290      	cmp	r0, r2
 800644a:	bf38      	it	cc
 800644c:	2304      	movcc	r3, #4
 800644e:	f841 c003 	str.w	ip, [r1, r3]
 8006452:	f1bc 0f00 	cmp.w	ip, #0
 8006456:	d001      	beq.n	800645c <__lshift+0xac>
 8006458:	f108 0602 	add.w	r6, r8, #2
 800645c:	3e01      	subs	r6, #1
 800645e:	4638      	mov	r0, r7
 8006460:	4621      	mov	r1, r4
 8006462:	612e      	str	r6, [r5, #16]
 8006464:	f7ff fdd6 	bl	8006014 <_Bfree>
 8006468:	4628      	mov	r0, r5
 800646a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006472:	3301      	adds	r3, #1
 8006474:	e7c1      	b.n	80063fa <__lshift+0x4a>
 8006476:	3904      	subs	r1, #4
 8006478:	f853 2b04 	ldr.w	r2, [r3], #4
 800647c:	4298      	cmp	r0, r3
 800647e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006482:	d8f9      	bhi.n	8006478 <__lshift+0xc8>
 8006484:	e7ea      	b.n	800645c <__lshift+0xac>
 8006486:	bf00      	nop
 8006488:	0800749f 	.word	0x0800749f
 800648c:	080074b0 	.word	0x080074b0

08006490 <__mcmp>:
 8006490:	4603      	mov	r3, r0
 8006492:	690a      	ldr	r2, [r1, #16]
 8006494:	6900      	ldr	r0, [r0, #16]
 8006496:	b530      	push	{r4, r5, lr}
 8006498:	1a80      	subs	r0, r0, r2
 800649a:	d10d      	bne.n	80064b8 <__mcmp+0x28>
 800649c:	3314      	adds	r3, #20
 800649e:	3114      	adds	r1, #20
 80064a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80064a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80064a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064b0:	4295      	cmp	r5, r2
 80064b2:	d002      	beq.n	80064ba <__mcmp+0x2a>
 80064b4:	d304      	bcc.n	80064c0 <__mcmp+0x30>
 80064b6:	2001      	movs	r0, #1
 80064b8:	bd30      	pop	{r4, r5, pc}
 80064ba:	42a3      	cmp	r3, r4
 80064bc:	d3f4      	bcc.n	80064a8 <__mcmp+0x18>
 80064be:	e7fb      	b.n	80064b8 <__mcmp+0x28>
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	e7f8      	b.n	80064b8 <__mcmp+0x28>
	...

080064c8 <__mdiff>:
 80064c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	460d      	mov	r5, r1
 80064ce:	4607      	mov	r7, r0
 80064d0:	4611      	mov	r1, r2
 80064d2:	4628      	mov	r0, r5
 80064d4:	4614      	mov	r4, r2
 80064d6:	f7ff ffdb 	bl	8006490 <__mcmp>
 80064da:	1e06      	subs	r6, r0, #0
 80064dc:	d111      	bne.n	8006502 <__mdiff+0x3a>
 80064de:	4631      	mov	r1, r6
 80064e0:	4638      	mov	r0, r7
 80064e2:	f7ff fd57 	bl	8005f94 <_Balloc>
 80064e6:	4602      	mov	r2, r0
 80064e8:	b928      	cbnz	r0, 80064f6 <__mdiff+0x2e>
 80064ea:	f240 2132 	movw	r1, #562	; 0x232
 80064ee:	4b3a      	ldr	r3, [pc, #232]	; (80065d8 <__mdiff+0x110>)
 80064f0:	483a      	ldr	r0, [pc, #232]	; (80065dc <__mdiff+0x114>)
 80064f2:	f000 f9d1 	bl	8006898 <__assert_func>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80064fc:	4610      	mov	r0, r2
 80064fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	bfa4      	itt	ge
 8006504:	4623      	movge	r3, r4
 8006506:	462c      	movge	r4, r5
 8006508:	4638      	mov	r0, r7
 800650a:	6861      	ldr	r1, [r4, #4]
 800650c:	bfa6      	itte	ge
 800650e:	461d      	movge	r5, r3
 8006510:	2600      	movge	r6, #0
 8006512:	2601      	movlt	r6, #1
 8006514:	f7ff fd3e 	bl	8005f94 <_Balloc>
 8006518:	4602      	mov	r2, r0
 800651a:	b918      	cbnz	r0, 8006524 <__mdiff+0x5c>
 800651c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006520:	4b2d      	ldr	r3, [pc, #180]	; (80065d8 <__mdiff+0x110>)
 8006522:	e7e5      	b.n	80064f0 <__mdiff+0x28>
 8006524:	f102 0814 	add.w	r8, r2, #20
 8006528:	46c2      	mov	sl, r8
 800652a:	f04f 0c00 	mov.w	ip, #0
 800652e:	6927      	ldr	r7, [r4, #16]
 8006530:	60c6      	str	r6, [r0, #12]
 8006532:	692e      	ldr	r6, [r5, #16]
 8006534:	f104 0014 	add.w	r0, r4, #20
 8006538:	f105 0914 	add.w	r9, r5, #20
 800653c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006540:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006544:	3410      	adds	r4, #16
 8006546:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800654a:	f859 3b04 	ldr.w	r3, [r9], #4
 800654e:	fa1f f18b 	uxth.w	r1, fp
 8006552:	448c      	add	ip, r1
 8006554:	b299      	uxth	r1, r3
 8006556:	0c1b      	lsrs	r3, r3, #16
 8006558:	ebac 0101 	sub.w	r1, ip, r1
 800655c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006560:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006564:	b289      	uxth	r1, r1
 8006566:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800656a:	454e      	cmp	r6, r9
 800656c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006570:	f84a 3b04 	str.w	r3, [sl], #4
 8006574:	d8e7      	bhi.n	8006546 <__mdiff+0x7e>
 8006576:	1b73      	subs	r3, r6, r5
 8006578:	3b15      	subs	r3, #21
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	3515      	adds	r5, #21
 8006580:	3304      	adds	r3, #4
 8006582:	42ae      	cmp	r6, r5
 8006584:	bf38      	it	cc
 8006586:	2304      	movcc	r3, #4
 8006588:	4418      	add	r0, r3
 800658a:	4443      	add	r3, r8
 800658c:	461e      	mov	r6, r3
 800658e:	4605      	mov	r5, r0
 8006590:	4575      	cmp	r5, lr
 8006592:	d30e      	bcc.n	80065b2 <__mdiff+0xea>
 8006594:	f10e 0103 	add.w	r1, lr, #3
 8006598:	1a09      	subs	r1, r1, r0
 800659a:	f021 0103 	bic.w	r1, r1, #3
 800659e:	3803      	subs	r0, #3
 80065a0:	4586      	cmp	lr, r0
 80065a2:	bf38      	it	cc
 80065a4:	2100      	movcc	r1, #0
 80065a6:	4419      	add	r1, r3
 80065a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80065ac:	b18b      	cbz	r3, 80065d2 <__mdiff+0x10a>
 80065ae:	6117      	str	r7, [r2, #16]
 80065b0:	e7a4      	b.n	80064fc <__mdiff+0x34>
 80065b2:	f855 8b04 	ldr.w	r8, [r5], #4
 80065b6:	fa1f f188 	uxth.w	r1, r8
 80065ba:	4461      	add	r1, ip
 80065bc:	140c      	asrs	r4, r1, #16
 80065be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80065c2:	b289      	uxth	r1, r1
 80065c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80065c8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80065cc:	f846 1b04 	str.w	r1, [r6], #4
 80065d0:	e7de      	b.n	8006590 <__mdiff+0xc8>
 80065d2:	3f01      	subs	r7, #1
 80065d4:	e7e8      	b.n	80065a8 <__mdiff+0xe0>
 80065d6:	bf00      	nop
 80065d8:	0800749f 	.word	0x0800749f
 80065dc:	080074b0 	.word	0x080074b0

080065e0 <__d2b>:
 80065e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80065e4:	2101      	movs	r1, #1
 80065e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80065ea:	4690      	mov	r8, r2
 80065ec:	461d      	mov	r5, r3
 80065ee:	f7ff fcd1 	bl	8005f94 <_Balloc>
 80065f2:	4604      	mov	r4, r0
 80065f4:	b930      	cbnz	r0, 8006604 <__d2b+0x24>
 80065f6:	4602      	mov	r2, r0
 80065f8:	f240 310a 	movw	r1, #778	; 0x30a
 80065fc:	4b24      	ldr	r3, [pc, #144]	; (8006690 <__d2b+0xb0>)
 80065fe:	4825      	ldr	r0, [pc, #148]	; (8006694 <__d2b+0xb4>)
 8006600:	f000 f94a 	bl	8006898 <__assert_func>
 8006604:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006608:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800660c:	bb2d      	cbnz	r5, 800665a <__d2b+0x7a>
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	f1b8 0300 	subs.w	r3, r8, #0
 8006614:	d026      	beq.n	8006664 <__d2b+0x84>
 8006616:	4668      	mov	r0, sp
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	f7ff fd83 	bl	8006124 <__lo0bits>
 800661e:	9900      	ldr	r1, [sp, #0]
 8006620:	b1f0      	cbz	r0, 8006660 <__d2b+0x80>
 8006622:	9a01      	ldr	r2, [sp, #4]
 8006624:	f1c0 0320 	rsb	r3, r0, #32
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	430b      	orrs	r3, r1
 800662e:	40c2      	lsrs	r2, r0
 8006630:	6163      	str	r3, [r4, #20]
 8006632:	9201      	str	r2, [sp, #4]
 8006634:	9b01      	ldr	r3, [sp, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	bf14      	ite	ne
 800663a:	2102      	movne	r1, #2
 800663c:	2101      	moveq	r1, #1
 800663e:	61a3      	str	r3, [r4, #24]
 8006640:	6121      	str	r1, [r4, #16]
 8006642:	b1c5      	cbz	r5, 8006676 <__d2b+0x96>
 8006644:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006648:	4405      	add	r5, r0
 800664a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800664e:	603d      	str	r5, [r7, #0]
 8006650:	6030      	str	r0, [r6, #0]
 8006652:	4620      	mov	r0, r4
 8006654:	b002      	add	sp, #8
 8006656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800665a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800665e:	e7d6      	b.n	800660e <__d2b+0x2e>
 8006660:	6161      	str	r1, [r4, #20]
 8006662:	e7e7      	b.n	8006634 <__d2b+0x54>
 8006664:	a801      	add	r0, sp, #4
 8006666:	f7ff fd5d 	bl	8006124 <__lo0bits>
 800666a:	2101      	movs	r1, #1
 800666c:	9b01      	ldr	r3, [sp, #4]
 800666e:	6121      	str	r1, [r4, #16]
 8006670:	6163      	str	r3, [r4, #20]
 8006672:	3020      	adds	r0, #32
 8006674:	e7e5      	b.n	8006642 <__d2b+0x62>
 8006676:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800667a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800667e:	6038      	str	r0, [r7, #0]
 8006680:	6918      	ldr	r0, [r3, #16]
 8006682:	f7ff fd2f 	bl	80060e4 <__hi0bits>
 8006686:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800668a:	6031      	str	r1, [r6, #0]
 800668c:	e7e1      	b.n	8006652 <__d2b+0x72>
 800668e:	bf00      	nop
 8006690:	0800749f 	.word	0x0800749f
 8006694:	080074b0 	.word	0x080074b0

08006698 <_calloc_r>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	fba1 5402 	umull	r5, r4, r1, r2
 800669e:	b934      	cbnz	r4, 80066ae <_calloc_r+0x16>
 80066a0:	4629      	mov	r1, r5
 80066a2:	f000 f875 	bl	8006790 <_malloc_r>
 80066a6:	4606      	mov	r6, r0
 80066a8:	b928      	cbnz	r0, 80066b6 <_calloc_r+0x1e>
 80066aa:	4630      	mov	r0, r6
 80066ac:	bd70      	pop	{r4, r5, r6, pc}
 80066ae:	220c      	movs	r2, #12
 80066b0:	2600      	movs	r6, #0
 80066b2:	6002      	str	r2, [r0, #0]
 80066b4:	e7f9      	b.n	80066aa <_calloc_r+0x12>
 80066b6:	462a      	mov	r2, r5
 80066b8:	4621      	mov	r1, r4
 80066ba:	f7fe f961 	bl	8004980 <memset>
 80066be:	e7f4      	b.n	80066aa <_calloc_r+0x12>

080066c0 <_free_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4605      	mov	r5, r0
 80066c4:	2900      	cmp	r1, #0
 80066c6:	d040      	beq.n	800674a <_free_r+0x8a>
 80066c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066cc:	1f0c      	subs	r4, r1, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bfb8      	it	lt
 80066d2:	18e4      	addlt	r4, r4, r3
 80066d4:	f000 f922 	bl	800691c <__malloc_lock>
 80066d8:	4a1c      	ldr	r2, [pc, #112]	; (800674c <_free_r+0x8c>)
 80066da:	6813      	ldr	r3, [r2, #0]
 80066dc:	b933      	cbnz	r3, 80066ec <_free_r+0x2c>
 80066de:	6063      	str	r3, [r4, #4]
 80066e0:	6014      	str	r4, [r2, #0]
 80066e2:	4628      	mov	r0, r5
 80066e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e8:	f000 b91e 	b.w	8006928 <__malloc_unlock>
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d908      	bls.n	8006702 <_free_r+0x42>
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	1821      	adds	r1, r4, r0
 80066f4:	428b      	cmp	r3, r1
 80066f6:	bf01      	itttt	eq
 80066f8:	6819      	ldreq	r1, [r3, #0]
 80066fa:	685b      	ldreq	r3, [r3, #4]
 80066fc:	1809      	addeq	r1, r1, r0
 80066fe:	6021      	streq	r1, [r4, #0]
 8006700:	e7ed      	b.n	80066de <_free_r+0x1e>
 8006702:	461a      	mov	r2, r3
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	b10b      	cbz	r3, 800670c <_free_r+0x4c>
 8006708:	42a3      	cmp	r3, r4
 800670a:	d9fa      	bls.n	8006702 <_free_r+0x42>
 800670c:	6811      	ldr	r1, [r2, #0]
 800670e:	1850      	adds	r0, r2, r1
 8006710:	42a0      	cmp	r0, r4
 8006712:	d10b      	bne.n	800672c <_free_r+0x6c>
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	4401      	add	r1, r0
 8006718:	1850      	adds	r0, r2, r1
 800671a:	4283      	cmp	r3, r0
 800671c:	6011      	str	r1, [r2, #0]
 800671e:	d1e0      	bne.n	80066e2 <_free_r+0x22>
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4401      	add	r1, r0
 8006726:	6011      	str	r1, [r2, #0]
 8006728:	6053      	str	r3, [r2, #4]
 800672a:	e7da      	b.n	80066e2 <_free_r+0x22>
 800672c:	d902      	bls.n	8006734 <_free_r+0x74>
 800672e:	230c      	movs	r3, #12
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	e7d6      	b.n	80066e2 <_free_r+0x22>
 8006734:	6820      	ldr	r0, [r4, #0]
 8006736:	1821      	adds	r1, r4, r0
 8006738:	428b      	cmp	r3, r1
 800673a:	bf01      	itttt	eq
 800673c:	6819      	ldreq	r1, [r3, #0]
 800673e:	685b      	ldreq	r3, [r3, #4]
 8006740:	1809      	addeq	r1, r1, r0
 8006742:	6021      	streq	r1, [r4, #0]
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	6054      	str	r4, [r2, #4]
 8006748:	e7cb      	b.n	80066e2 <_free_r+0x22>
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	200002dc 	.word	0x200002dc

08006750 <sbrk_aligned>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4e0e      	ldr	r6, [pc, #56]	; (800678c <sbrk_aligned+0x3c>)
 8006754:	460c      	mov	r4, r1
 8006756:	6831      	ldr	r1, [r6, #0]
 8006758:	4605      	mov	r5, r0
 800675a:	b911      	cbnz	r1, 8006762 <sbrk_aligned+0x12>
 800675c:	f000 f88c 	bl	8006878 <_sbrk_r>
 8006760:	6030      	str	r0, [r6, #0]
 8006762:	4621      	mov	r1, r4
 8006764:	4628      	mov	r0, r5
 8006766:	f000 f887 	bl	8006878 <_sbrk_r>
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d00a      	beq.n	8006784 <sbrk_aligned+0x34>
 800676e:	1cc4      	adds	r4, r0, #3
 8006770:	f024 0403 	bic.w	r4, r4, #3
 8006774:	42a0      	cmp	r0, r4
 8006776:	d007      	beq.n	8006788 <sbrk_aligned+0x38>
 8006778:	1a21      	subs	r1, r4, r0
 800677a:	4628      	mov	r0, r5
 800677c:	f000 f87c 	bl	8006878 <_sbrk_r>
 8006780:	3001      	adds	r0, #1
 8006782:	d101      	bne.n	8006788 <sbrk_aligned+0x38>
 8006784:	f04f 34ff 	mov.w	r4, #4294967295
 8006788:	4620      	mov	r0, r4
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	200002e0 	.word	0x200002e0

08006790 <_malloc_r>:
 8006790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006794:	1ccd      	adds	r5, r1, #3
 8006796:	f025 0503 	bic.w	r5, r5, #3
 800679a:	3508      	adds	r5, #8
 800679c:	2d0c      	cmp	r5, #12
 800679e:	bf38      	it	cc
 80067a0:	250c      	movcc	r5, #12
 80067a2:	2d00      	cmp	r5, #0
 80067a4:	4607      	mov	r7, r0
 80067a6:	db01      	blt.n	80067ac <_malloc_r+0x1c>
 80067a8:	42a9      	cmp	r1, r5
 80067aa:	d905      	bls.n	80067b8 <_malloc_r+0x28>
 80067ac:	230c      	movs	r3, #12
 80067ae:	2600      	movs	r6, #0
 80067b0:	603b      	str	r3, [r7, #0]
 80067b2:	4630      	mov	r0, r6
 80067b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b8:	4e2e      	ldr	r6, [pc, #184]	; (8006874 <_malloc_r+0xe4>)
 80067ba:	f000 f8af 	bl	800691c <__malloc_lock>
 80067be:	6833      	ldr	r3, [r6, #0]
 80067c0:	461c      	mov	r4, r3
 80067c2:	bb34      	cbnz	r4, 8006812 <_malloc_r+0x82>
 80067c4:	4629      	mov	r1, r5
 80067c6:	4638      	mov	r0, r7
 80067c8:	f7ff ffc2 	bl	8006750 <sbrk_aligned>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	4604      	mov	r4, r0
 80067d0:	d14d      	bne.n	800686e <_malloc_r+0xde>
 80067d2:	6834      	ldr	r4, [r6, #0]
 80067d4:	4626      	mov	r6, r4
 80067d6:	2e00      	cmp	r6, #0
 80067d8:	d140      	bne.n	800685c <_malloc_r+0xcc>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	4631      	mov	r1, r6
 80067de:	4638      	mov	r0, r7
 80067e0:	eb04 0803 	add.w	r8, r4, r3
 80067e4:	f000 f848 	bl	8006878 <_sbrk_r>
 80067e8:	4580      	cmp	r8, r0
 80067ea:	d13a      	bne.n	8006862 <_malloc_r+0xd2>
 80067ec:	6821      	ldr	r1, [r4, #0]
 80067ee:	3503      	adds	r5, #3
 80067f0:	1a6d      	subs	r5, r5, r1
 80067f2:	f025 0503 	bic.w	r5, r5, #3
 80067f6:	3508      	adds	r5, #8
 80067f8:	2d0c      	cmp	r5, #12
 80067fa:	bf38      	it	cc
 80067fc:	250c      	movcc	r5, #12
 80067fe:	4638      	mov	r0, r7
 8006800:	4629      	mov	r1, r5
 8006802:	f7ff ffa5 	bl	8006750 <sbrk_aligned>
 8006806:	3001      	adds	r0, #1
 8006808:	d02b      	beq.n	8006862 <_malloc_r+0xd2>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	442b      	add	r3, r5
 800680e:	6023      	str	r3, [r4, #0]
 8006810:	e00e      	b.n	8006830 <_malloc_r+0xa0>
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	1b52      	subs	r2, r2, r5
 8006816:	d41e      	bmi.n	8006856 <_malloc_r+0xc6>
 8006818:	2a0b      	cmp	r2, #11
 800681a:	d916      	bls.n	800684a <_malloc_r+0xba>
 800681c:	1961      	adds	r1, r4, r5
 800681e:	42a3      	cmp	r3, r4
 8006820:	6025      	str	r5, [r4, #0]
 8006822:	bf18      	it	ne
 8006824:	6059      	strne	r1, [r3, #4]
 8006826:	6863      	ldr	r3, [r4, #4]
 8006828:	bf08      	it	eq
 800682a:	6031      	streq	r1, [r6, #0]
 800682c:	5162      	str	r2, [r4, r5]
 800682e:	604b      	str	r3, [r1, #4]
 8006830:	4638      	mov	r0, r7
 8006832:	f104 060b 	add.w	r6, r4, #11
 8006836:	f000 f877 	bl	8006928 <__malloc_unlock>
 800683a:	f026 0607 	bic.w	r6, r6, #7
 800683e:	1d23      	adds	r3, r4, #4
 8006840:	1af2      	subs	r2, r6, r3
 8006842:	d0b6      	beq.n	80067b2 <_malloc_r+0x22>
 8006844:	1b9b      	subs	r3, r3, r6
 8006846:	50a3      	str	r3, [r4, r2]
 8006848:	e7b3      	b.n	80067b2 <_malloc_r+0x22>
 800684a:	6862      	ldr	r2, [r4, #4]
 800684c:	42a3      	cmp	r3, r4
 800684e:	bf0c      	ite	eq
 8006850:	6032      	streq	r2, [r6, #0]
 8006852:	605a      	strne	r2, [r3, #4]
 8006854:	e7ec      	b.n	8006830 <_malloc_r+0xa0>
 8006856:	4623      	mov	r3, r4
 8006858:	6864      	ldr	r4, [r4, #4]
 800685a:	e7b2      	b.n	80067c2 <_malloc_r+0x32>
 800685c:	4634      	mov	r4, r6
 800685e:	6876      	ldr	r6, [r6, #4]
 8006860:	e7b9      	b.n	80067d6 <_malloc_r+0x46>
 8006862:	230c      	movs	r3, #12
 8006864:	4638      	mov	r0, r7
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	f000 f85e 	bl	8006928 <__malloc_unlock>
 800686c:	e7a1      	b.n	80067b2 <_malloc_r+0x22>
 800686e:	6025      	str	r5, [r4, #0]
 8006870:	e7de      	b.n	8006830 <_malloc_r+0xa0>
 8006872:	bf00      	nop
 8006874:	200002dc 	.word	0x200002dc

08006878 <_sbrk_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	2300      	movs	r3, #0
 800687c:	4d05      	ldr	r5, [pc, #20]	; (8006894 <_sbrk_r+0x1c>)
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	f7fa fc28 	bl	80010d8 <_sbrk>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_sbrk_r+0x1a>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_sbrk_r+0x1a>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	200002e4 	.word	0x200002e4

08006898 <__assert_func>:
 8006898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800689a:	4614      	mov	r4, r2
 800689c:	461a      	mov	r2, r3
 800689e:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <__assert_func+0x2c>)
 80068a0:	4605      	mov	r5, r0
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68d8      	ldr	r0, [r3, #12]
 80068a6:	b14c      	cbz	r4, 80068bc <__assert_func+0x24>
 80068a8:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <__assert_func+0x30>)
 80068aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068ae:	9100      	str	r1, [sp, #0]
 80068b0:	462b      	mov	r3, r5
 80068b2:	4906      	ldr	r1, [pc, #24]	; (80068cc <__assert_func+0x34>)
 80068b4:	f000 f80e 	bl	80068d4 <fiprintf>
 80068b8:	f000 fa62 	bl	8006d80 <abort>
 80068bc:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <__assert_func+0x38>)
 80068be:	461c      	mov	r4, r3
 80068c0:	e7f3      	b.n	80068aa <__assert_func+0x12>
 80068c2:	bf00      	nop
 80068c4:	2000000c 	.word	0x2000000c
 80068c8:	0800760c 	.word	0x0800760c
 80068cc:	08007619 	.word	0x08007619
 80068d0:	08007647 	.word	0x08007647

080068d4 <fiprintf>:
 80068d4:	b40e      	push	{r1, r2, r3}
 80068d6:	b503      	push	{r0, r1, lr}
 80068d8:	4601      	mov	r1, r0
 80068da:	ab03      	add	r3, sp, #12
 80068dc:	4805      	ldr	r0, [pc, #20]	; (80068f4 <fiprintf+0x20>)
 80068de:	f853 2b04 	ldr.w	r2, [r3], #4
 80068e2:	6800      	ldr	r0, [r0, #0]
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	f000 f84d 	bl	8006984 <_vfiprintf_r>
 80068ea:	b002      	add	sp, #8
 80068ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80068f0:	b003      	add	sp, #12
 80068f2:	4770      	bx	lr
 80068f4:	2000000c 	.word	0x2000000c

080068f8 <__ascii_mbtowc>:
 80068f8:	b082      	sub	sp, #8
 80068fa:	b901      	cbnz	r1, 80068fe <__ascii_mbtowc+0x6>
 80068fc:	a901      	add	r1, sp, #4
 80068fe:	b142      	cbz	r2, 8006912 <__ascii_mbtowc+0x1a>
 8006900:	b14b      	cbz	r3, 8006916 <__ascii_mbtowc+0x1e>
 8006902:	7813      	ldrb	r3, [r2, #0]
 8006904:	600b      	str	r3, [r1, #0]
 8006906:	7812      	ldrb	r2, [r2, #0]
 8006908:	1e10      	subs	r0, r2, #0
 800690a:	bf18      	it	ne
 800690c:	2001      	movne	r0, #1
 800690e:	b002      	add	sp, #8
 8006910:	4770      	bx	lr
 8006912:	4610      	mov	r0, r2
 8006914:	e7fb      	b.n	800690e <__ascii_mbtowc+0x16>
 8006916:	f06f 0001 	mvn.w	r0, #1
 800691a:	e7f8      	b.n	800690e <__ascii_mbtowc+0x16>

0800691c <__malloc_lock>:
 800691c:	4801      	ldr	r0, [pc, #4]	; (8006924 <__malloc_lock+0x8>)
 800691e:	f000 bbeb 	b.w	80070f8 <__retarget_lock_acquire_recursive>
 8006922:	bf00      	nop
 8006924:	200002e8 	.word	0x200002e8

08006928 <__malloc_unlock>:
 8006928:	4801      	ldr	r0, [pc, #4]	; (8006930 <__malloc_unlock+0x8>)
 800692a:	f000 bbe6 	b.w	80070fa <__retarget_lock_release_recursive>
 800692e:	bf00      	nop
 8006930:	200002e8 	.word	0x200002e8

08006934 <__sfputc_r>:
 8006934:	6893      	ldr	r3, [r2, #8]
 8006936:	b410      	push	{r4}
 8006938:	3b01      	subs	r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	6093      	str	r3, [r2, #8]
 800693e:	da07      	bge.n	8006950 <__sfputc_r+0x1c>
 8006940:	6994      	ldr	r4, [r2, #24]
 8006942:	42a3      	cmp	r3, r4
 8006944:	db01      	blt.n	800694a <__sfputc_r+0x16>
 8006946:	290a      	cmp	r1, #10
 8006948:	d102      	bne.n	8006950 <__sfputc_r+0x1c>
 800694a:	bc10      	pop	{r4}
 800694c:	f000 b94a 	b.w	8006be4 <__swbuf_r>
 8006950:	6813      	ldr	r3, [r2, #0]
 8006952:	1c58      	adds	r0, r3, #1
 8006954:	6010      	str	r0, [r2, #0]
 8006956:	7019      	strb	r1, [r3, #0]
 8006958:	4608      	mov	r0, r1
 800695a:	bc10      	pop	{r4}
 800695c:	4770      	bx	lr

0800695e <__sfputs_r>:
 800695e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006960:	4606      	mov	r6, r0
 8006962:	460f      	mov	r7, r1
 8006964:	4614      	mov	r4, r2
 8006966:	18d5      	adds	r5, r2, r3
 8006968:	42ac      	cmp	r4, r5
 800696a:	d101      	bne.n	8006970 <__sfputs_r+0x12>
 800696c:	2000      	movs	r0, #0
 800696e:	e007      	b.n	8006980 <__sfputs_r+0x22>
 8006970:	463a      	mov	r2, r7
 8006972:	4630      	mov	r0, r6
 8006974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006978:	f7ff ffdc 	bl	8006934 <__sfputc_r>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d1f3      	bne.n	8006968 <__sfputs_r+0xa>
 8006980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006984 <_vfiprintf_r>:
 8006984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	460d      	mov	r5, r1
 800698a:	4614      	mov	r4, r2
 800698c:	4698      	mov	r8, r3
 800698e:	4606      	mov	r6, r0
 8006990:	b09d      	sub	sp, #116	; 0x74
 8006992:	b118      	cbz	r0, 800699c <_vfiprintf_r+0x18>
 8006994:	6983      	ldr	r3, [r0, #24]
 8006996:	b90b      	cbnz	r3, 800699c <_vfiprintf_r+0x18>
 8006998:	f000 fb10 	bl	8006fbc <__sinit>
 800699c:	4b89      	ldr	r3, [pc, #548]	; (8006bc4 <_vfiprintf_r+0x240>)
 800699e:	429d      	cmp	r5, r3
 80069a0:	d11b      	bne.n	80069da <_vfiprintf_r+0x56>
 80069a2:	6875      	ldr	r5, [r6, #4]
 80069a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069a6:	07d9      	lsls	r1, r3, #31
 80069a8:	d405      	bmi.n	80069b6 <_vfiprintf_r+0x32>
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	059a      	lsls	r2, r3, #22
 80069ae:	d402      	bmi.n	80069b6 <_vfiprintf_r+0x32>
 80069b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069b2:	f000 fba1 	bl	80070f8 <__retarget_lock_acquire_recursive>
 80069b6:	89ab      	ldrh	r3, [r5, #12]
 80069b8:	071b      	lsls	r3, r3, #28
 80069ba:	d501      	bpl.n	80069c0 <_vfiprintf_r+0x3c>
 80069bc:	692b      	ldr	r3, [r5, #16]
 80069be:	b9eb      	cbnz	r3, 80069fc <_vfiprintf_r+0x78>
 80069c0:	4629      	mov	r1, r5
 80069c2:	4630      	mov	r0, r6
 80069c4:	f000 f96e 	bl	8006ca4 <__swsetup_r>
 80069c8:	b1c0      	cbz	r0, 80069fc <_vfiprintf_r+0x78>
 80069ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069cc:	07dc      	lsls	r4, r3, #31
 80069ce:	d50e      	bpl.n	80069ee <_vfiprintf_r+0x6a>
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	b01d      	add	sp, #116	; 0x74
 80069d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069da:	4b7b      	ldr	r3, [pc, #492]	; (8006bc8 <_vfiprintf_r+0x244>)
 80069dc:	429d      	cmp	r5, r3
 80069de:	d101      	bne.n	80069e4 <_vfiprintf_r+0x60>
 80069e0:	68b5      	ldr	r5, [r6, #8]
 80069e2:	e7df      	b.n	80069a4 <_vfiprintf_r+0x20>
 80069e4:	4b79      	ldr	r3, [pc, #484]	; (8006bcc <_vfiprintf_r+0x248>)
 80069e6:	429d      	cmp	r5, r3
 80069e8:	bf08      	it	eq
 80069ea:	68f5      	ldreq	r5, [r6, #12]
 80069ec:	e7da      	b.n	80069a4 <_vfiprintf_r+0x20>
 80069ee:	89ab      	ldrh	r3, [r5, #12]
 80069f0:	0598      	lsls	r0, r3, #22
 80069f2:	d4ed      	bmi.n	80069d0 <_vfiprintf_r+0x4c>
 80069f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069f6:	f000 fb80 	bl	80070fa <__retarget_lock_release_recursive>
 80069fa:	e7e9      	b.n	80069d0 <_vfiprintf_r+0x4c>
 80069fc:	2300      	movs	r3, #0
 80069fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006a00:	2320      	movs	r3, #32
 8006a02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a06:	2330      	movs	r3, #48	; 0x30
 8006a08:	f04f 0901 	mov.w	r9, #1
 8006a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006bd0 <_vfiprintf_r+0x24c>
 8006a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a18:	4623      	mov	r3, r4
 8006a1a:	469a      	mov	sl, r3
 8006a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a20:	b10a      	cbz	r2, 8006a26 <_vfiprintf_r+0xa2>
 8006a22:	2a25      	cmp	r2, #37	; 0x25
 8006a24:	d1f9      	bne.n	8006a1a <_vfiprintf_r+0x96>
 8006a26:	ebba 0b04 	subs.w	fp, sl, r4
 8006a2a:	d00b      	beq.n	8006a44 <_vfiprintf_r+0xc0>
 8006a2c:	465b      	mov	r3, fp
 8006a2e:	4622      	mov	r2, r4
 8006a30:	4629      	mov	r1, r5
 8006a32:	4630      	mov	r0, r6
 8006a34:	f7ff ff93 	bl	800695e <__sfputs_r>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f000 80aa 	beq.w	8006b92 <_vfiprintf_r+0x20e>
 8006a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a40:	445a      	add	r2, fp
 8006a42:	9209      	str	r2, [sp, #36]	; 0x24
 8006a44:	f89a 3000 	ldrb.w	r3, [sl]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80a2 	beq.w	8006b92 <_vfiprintf_r+0x20e>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f04f 32ff 	mov.w	r2, #4294967295
 8006a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a58:	f10a 0a01 	add.w	sl, sl, #1
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	9307      	str	r3, [sp, #28]
 8006a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a64:	931a      	str	r3, [sp, #104]	; 0x68
 8006a66:	4654      	mov	r4, sl
 8006a68:	2205      	movs	r2, #5
 8006a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6e:	4858      	ldr	r0, [pc, #352]	; (8006bd0 <_vfiprintf_r+0x24c>)
 8006a70:	f7ff fa74 	bl	8005f5c <memchr>
 8006a74:	9a04      	ldr	r2, [sp, #16]
 8006a76:	b9d8      	cbnz	r0, 8006ab0 <_vfiprintf_r+0x12c>
 8006a78:	06d1      	lsls	r1, r2, #27
 8006a7a:	bf44      	itt	mi
 8006a7c:	2320      	movmi	r3, #32
 8006a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a82:	0713      	lsls	r3, r2, #28
 8006a84:	bf44      	itt	mi
 8006a86:	232b      	movmi	r3, #43	; 0x2b
 8006a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a90:	2b2a      	cmp	r3, #42	; 0x2a
 8006a92:	d015      	beq.n	8006ac0 <_vfiprintf_r+0x13c>
 8006a94:	4654      	mov	r4, sl
 8006a96:	2000      	movs	r0, #0
 8006a98:	f04f 0c0a 	mov.w	ip, #10
 8006a9c:	9a07      	ldr	r2, [sp, #28]
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aa4:	3b30      	subs	r3, #48	; 0x30
 8006aa6:	2b09      	cmp	r3, #9
 8006aa8:	d94e      	bls.n	8006b48 <_vfiprintf_r+0x1c4>
 8006aaa:	b1b0      	cbz	r0, 8006ada <_vfiprintf_r+0x156>
 8006aac:	9207      	str	r2, [sp, #28]
 8006aae:	e014      	b.n	8006ada <_vfiprintf_r+0x156>
 8006ab0:	eba0 0308 	sub.w	r3, r0, r8
 8006ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	46a2      	mov	sl, r4
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	e7d2      	b.n	8006a66 <_vfiprintf_r+0xe2>
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	1d19      	adds	r1, r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	9103      	str	r1, [sp, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bfbb      	ittet	lt
 8006acc:	425b      	neglt	r3, r3
 8006ace:	f042 0202 	orrlt.w	r2, r2, #2
 8006ad2:	9307      	strge	r3, [sp, #28]
 8006ad4:	9307      	strlt	r3, [sp, #28]
 8006ad6:	bfb8      	it	lt
 8006ad8:	9204      	strlt	r2, [sp, #16]
 8006ada:	7823      	ldrb	r3, [r4, #0]
 8006adc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ade:	d10c      	bne.n	8006afa <_vfiprintf_r+0x176>
 8006ae0:	7863      	ldrb	r3, [r4, #1]
 8006ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae4:	d135      	bne.n	8006b52 <_vfiprintf_r+0x1ce>
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	3402      	adds	r4, #2
 8006aea:	1d1a      	adds	r2, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	9203      	str	r2, [sp, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	bfb8      	it	lt
 8006af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006af8:	9305      	str	r3, [sp, #20]
 8006afa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006bd4 <_vfiprintf_r+0x250>
 8006afe:	2203      	movs	r2, #3
 8006b00:	4650      	mov	r0, sl
 8006b02:	7821      	ldrb	r1, [r4, #0]
 8006b04:	f7ff fa2a 	bl	8005f5c <memchr>
 8006b08:	b140      	cbz	r0, 8006b1c <_vfiprintf_r+0x198>
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	eba0 000a 	sub.w	r0, r0, sl
 8006b10:	fa03 f000 	lsl.w	r0, r3, r0
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	3401      	adds	r4, #1
 8006b18:	4303      	orrs	r3, r0
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b20:	2206      	movs	r2, #6
 8006b22:	482d      	ldr	r0, [pc, #180]	; (8006bd8 <_vfiprintf_r+0x254>)
 8006b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b28:	f7ff fa18 	bl	8005f5c <memchr>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d03f      	beq.n	8006bb0 <_vfiprintf_r+0x22c>
 8006b30:	4b2a      	ldr	r3, [pc, #168]	; (8006bdc <_vfiprintf_r+0x258>)
 8006b32:	bb1b      	cbnz	r3, 8006b7c <_vfiprintf_r+0x1f8>
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	3307      	adds	r3, #7
 8006b38:	f023 0307 	bic.w	r3, r3, #7
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	9303      	str	r3, [sp, #12]
 8006b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b42:	443b      	add	r3, r7
 8006b44:	9309      	str	r3, [sp, #36]	; 0x24
 8006b46:	e767      	b.n	8006a18 <_vfiprintf_r+0x94>
 8006b48:	460c      	mov	r4, r1
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b50:	e7a5      	b.n	8006a9e <_vfiprintf_r+0x11a>
 8006b52:	2300      	movs	r3, #0
 8006b54:	f04f 0c0a 	mov.w	ip, #10
 8006b58:	4619      	mov	r1, r3
 8006b5a:	3401      	adds	r4, #1
 8006b5c:	9305      	str	r3, [sp, #20]
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b64:	3a30      	subs	r2, #48	; 0x30
 8006b66:	2a09      	cmp	r2, #9
 8006b68:	d903      	bls.n	8006b72 <_vfiprintf_r+0x1ee>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0c5      	beq.n	8006afa <_vfiprintf_r+0x176>
 8006b6e:	9105      	str	r1, [sp, #20]
 8006b70:	e7c3      	b.n	8006afa <_vfiprintf_r+0x176>
 8006b72:	4604      	mov	r4, r0
 8006b74:	2301      	movs	r3, #1
 8006b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b7a:	e7f0      	b.n	8006b5e <_vfiprintf_r+0x1da>
 8006b7c:	ab03      	add	r3, sp, #12
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	462a      	mov	r2, r5
 8006b82:	4630      	mov	r0, r6
 8006b84:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <_vfiprintf_r+0x25c>)
 8006b86:	a904      	add	r1, sp, #16
 8006b88:	f7fd ffa0 	bl	8004acc <_printf_float>
 8006b8c:	4607      	mov	r7, r0
 8006b8e:	1c78      	adds	r0, r7, #1
 8006b90:	d1d6      	bne.n	8006b40 <_vfiprintf_r+0x1bc>
 8006b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b94:	07d9      	lsls	r1, r3, #31
 8006b96:	d405      	bmi.n	8006ba4 <_vfiprintf_r+0x220>
 8006b98:	89ab      	ldrh	r3, [r5, #12]
 8006b9a:	059a      	lsls	r2, r3, #22
 8006b9c:	d402      	bmi.n	8006ba4 <_vfiprintf_r+0x220>
 8006b9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ba0:	f000 faab 	bl	80070fa <__retarget_lock_release_recursive>
 8006ba4:	89ab      	ldrh	r3, [r5, #12]
 8006ba6:	065b      	lsls	r3, r3, #25
 8006ba8:	f53f af12 	bmi.w	80069d0 <_vfiprintf_r+0x4c>
 8006bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bae:	e711      	b.n	80069d4 <_vfiprintf_r+0x50>
 8006bb0:	ab03      	add	r3, sp, #12
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	462a      	mov	r2, r5
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <_vfiprintf_r+0x25c>)
 8006bba:	a904      	add	r1, sp, #16
 8006bbc:	f7fe fa22 	bl	8005004 <_printf_i>
 8006bc0:	e7e4      	b.n	8006b8c <_vfiprintf_r+0x208>
 8006bc2:	bf00      	nop
 8006bc4:	08007784 	.word	0x08007784
 8006bc8:	080077a4 	.word	0x080077a4
 8006bcc:	08007764 	.word	0x08007764
 8006bd0:	08007652 	.word	0x08007652
 8006bd4:	08007658 	.word	0x08007658
 8006bd8:	0800765c 	.word	0x0800765c
 8006bdc:	08004acd 	.word	0x08004acd
 8006be0:	0800695f 	.word	0x0800695f

08006be4 <__swbuf_r>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	460e      	mov	r6, r1
 8006be8:	4614      	mov	r4, r2
 8006bea:	4605      	mov	r5, r0
 8006bec:	b118      	cbz	r0, 8006bf6 <__swbuf_r+0x12>
 8006bee:	6983      	ldr	r3, [r0, #24]
 8006bf0:	b90b      	cbnz	r3, 8006bf6 <__swbuf_r+0x12>
 8006bf2:	f000 f9e3 	bl	8006fbc <__sinit>
 8006bf6:	4b21      	ldr	r3, [pc, #132]	; (8006c7c <__swbuf_r+0x98>)
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	d12b      	bne.n	8006c54 <__swbuf_r+0x70>
 8006bfc:	686c      	ldr	r4, [r5, #4]
 8006bfe:	69a3      	ldr	r3, [r4, #24]
 8006c00:	60a3      	str	r3, [r4, #8]
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	071a      	lsls	r2, r3, #28
 8006c06:	d52f      	bpl.n	8006c68 <__swbuf_r+0x84>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	b36b      	cbz	r3, 8006c68 <__swbuf_r+0x84>
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	6820      	ldr	r0, [r4, #0]
 8006c10:	b2f6      	uxtb	r6, r6
 8006c12:	1ac0      	subs	r0, r0, r3
 8006c14:	6963      	ldr	r3, [r4, #20]
 8006c16:	4637      	mov	r7, r6
 8006c18:	4283      	cmp	r3, r0
 8006c1a:	dc04      	bgt.n	8006c26 <__swbuf_r+0x42>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 f938 	bl	8006e94 <_fflush_r>
 8006c24:	bb30      	cbnz	r0, 8006c74 <__swbuf_r+0x90>
 8006c26:	68a3      	ldr	r3, [r4, #8]
 8006c28:	3001      	adds	r0, #1
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	60a3      	str	r3, [r4, #8]
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	701e      	strb	r6, [r3, #0]
 8006c36:	6963      	ldr	r3, [r4, #20]
 8006c38:	4283      	cmp	r3, r0
 8006c3a:	d004      	beq.n	8006c46 <__swbuf_r+0x62>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	07db      	lsls	r3, r3, #31
 8006c40:	d506      	bpl.n	8006c50 <__swbuf_r+0x6c>
 8006c42:	2e0a      	cmp	r6, #10
 8006c44:	d104      	bne.n	8006c50 <__swbuf_r+0x6c>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 f923 	bl	8006e94 <_fflush_r>
 8006c4e:	b988      	cbnz	r0, 8006c74 <__swbuf_r+0x90>
 8006c50:	4638      	mov	r0, r7
 8006c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c54:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <__swbuf_r+0x9c>)
 8006c56:	429c      	cmp	r4, r3
 8006c58:	d101      	bne.n	8006c5e <__swbuf_r+0x7a>
 8006c5a:	68ac      	ldr	r4, [r5, #8]
 8006c5c:	e7cf      	b.n	8006bfe <__swbuf_r+0x1a>
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <__swbuf_r+0xa0>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	bf08      	it	eq
 8006c64:	68ec      	ldreq	r4, [r5, #12]
 8006c66:	e7ca      	b.n	8006bfe <__swbuf_r+0x1a>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f81a 	bl	8006ca4 <__swsetup_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d0cb      	beq.n	8006c0c <__swbuf_r+0x28>
 8006c74:	f04f 37ff 	mov.w	r7, #4294967295
 8006c78:	e7ea      	b.n	8006c50 <__swbuf_r+0x6c>
 8006c7a:	bf00      	nop
 8006c7c:	08007784 	.word	0x08007784
 8006c80:	080077a4 	.word	0x080077a4
 8006c84:	08007764 	.word	0x08007764

08006c88 <__ascii_wctomb>:
 8006c88:	4603      	mov	r3, r0
 8006c8a:	4608      	mov	r0, r1
 8006c8c:	b141      	cbz	r1, 8006ca0 <__ascii_wctomb+0x18>
 8006c8e:	2aff      	cmp	r2, #255	; 0xff
 8006c90:	d904      	bls.n	8006c9c <__ascii_wctomb+0x14>
 8006c92:	228a      	movs	r2, #138	; 0x8a
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	4770      	bx	lr
 8006c9c:	2001      	movs	r0, #1
 8006c9e:	700a      	strb	r2, [r1, #0]
 8006ca0:	4770      	bx	lr
	...

08006ca4 <__swsetup_r>:
 8006ca4:	4b32      	ldr	r3, [pc, #200]	; (8006d70 <__swsetup_r+0xcc>)
 8006ca6:	b570      	push	{r4, r5, r6, lr}
 8006ca8:	681d      	ldr	r5, [r3, #0]
 8006caa:	4606      	mov	r6, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	b125      	cbz	r5, 8006cba <__swsetup_r+0x16>
 8006cb0:	69ab      	ldr	r3, [r5, #24]
 8006cb2:	b913      	cbnz	r3, 8006cba <__swsetup_r+0x16>
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f000 f981 	bl	8006fbc <__sinit>
 8006cba:	4b2e      	ldr	r3, [pc, #184]	; (8006d74 <__swsetup_r+0xd0>)
 8006cbc:	429c      	cmp	r4, r3
 8006cbe:	d10f      	bne.n	8006ce0 <__swsetup_r+0x3c>
 8006cc0:	686c      	ldr	r4, [r5, #4]
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc8:	0719      	lsls	r1, r3, #28
 8006cca:	d42c      	bmi.n	8006d26 <__swsetup_r+0x82>
 8006ccc:	06dd      	lsls	r5, r3, #27
 8006cce:	d411      	bmi.n	8006cf4 <__swsetup_r+0x50>
 8006cd0:	2309      	movs	r3, #9
 8006cd2:	6033      	str	r3, [r6, #0]
 8006cd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	81a3      	strh	r3, [r4, #12]
 8006cde:	e03e      	b.n	8006d5e <__swsetup_r+0xba>
 8006ce0:	4b25      	ldr	r3, [pc, #148]	; (8006d78 <__swsetup_r+0xd4>)
 8006ce2:	429c      	cmp	r4, r3
 8006ce4:	d101      	bne.n	8006cea <__swsetup_r+0x46>
 8006ce6:	68ac      	ldr	r4, [r5, #8]
 8006ce8:	e7eb      	b.n	8006cc2 <__swsetup_r+0x1e>
 8006cea:	4b24      	ldr	r3, [pc, #144]	; (8006d7c <__swsetup_r+0xd8>)
 8006cec:	429c      	cmp	r4, r3
 8006cee:	bf08      	it	eq
 8006cf0:	68ec      	ldreq	r4, [r5, #12]
 8006cf2:	e7e6      	b.n	8006cc2 <__swsetup_r+0x1e>
 8006cf4:	0758      	lsls	r0, r3, #29
 8006cf6:	d512      	bpl.n	8006d1e <__swsetup_r+0x7a>
 8006cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cfa:	b141      	cbz	r1, 8006d0e <__swsetup_r+0x6a>
 8006cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d00:	4299      	cmp	r1, r3
 8006d02:	d002      	beq.n	8006d0a <__swsetup_r+0x66>
 8006d04:	4630      	mov	r0, r6
 8006d06:	f7ff fcdb 	bl	80066c0 <_free_r>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d14:	81a3      	strh	r3, [r4, #12]
 8006d16:	2300      	movs	r3, #0
 8006d18:	6063      	str	r3, [r4, #4]
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f043 0308 	orr.w	r3, r3, #8
 8006d24:	81a3      	strh	r3, [r4, #12]
 8006d26:	6923      	ldr	r3, [r4, #16]
 8006d28:	b94b      	cbnz	r3, 8006d3e <__swsetup_r+0x9a>
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d34:	d003      	beq.n	8006d3e <__swsetup_r+0x9a>
 8006d36:	4621      	mov	r1, r4
 8006d38:	4630      	mov	r0, r6
 8006d3a:	f000 fa05 	bl	8007148 <__smakebuf_r>
 8006d3e:	89a0      	ldrh	r0, [r4, #12]
 8006d40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d44:	f010 0301 	ands.w	r3, r0, #1
 8006d48:	d00a      	beq.n	8006d60 <__swsetup_r+0xbc>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60a3      	str	r3, [r4, #8]
 8006d4e:	6963      	ldr	r3, [r4, #20]
 8006d50:	425b      	negs	r3, r3
 8006d52:	61a3      	str	r3, [r4, #24]
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	b943      	cbnz	r3, 8006d6a <__swsetup_r+0xc6>
 8006d58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d5c:	d1ba      	bne.n	8006cd4 <__swsetup_r+0x30>
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	0781      	lsls	r1, r0, #30
 8006d62:	bf58      	it	pl
 8006d64:	6963      	ldrpl	r3, [r4, #20]
 8006d66:	60a3      	str	r3, [r4, #8]
 8006d68:	e7f4      	b.n	8006d54 <__swsetup_r+0xb0>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	e7f7      	b.n	8006d5e <__swsetup_r+0xba>
 8006d6e:	bf00      	nop
 8006d70:	2000000c 	.word	0x2000000c
 8006d74:	08007784 	.word	0x08007784
 8006d78:	080077a4 	.word	0x080077a4
 8006d7c:	08007764 	.word	0x08007764

08006d80 <abort>:
 8006d80:	2006      	movs	r0, #6
 8006d82:	b508      	push	{r3, lr}
 8006d84:	f000 fa48 	bl	8007218 <raise>
 8006d88:	2001      	movs	r0, #1
 8006d8a:	f7fa f932 	bl	8000ff2 <_exit>
	...

08006d90 <__sflush_r>:
 8006d90:	898a      	ldrh	r2, [r1, #12]
 8006d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d94:	4605      	mov	r5, r0
 8006d96:	0710      	lsls	r0, r2, #28
 8006d98:	460c      	mov	r4, r1
 8006d9a:	d457      	bmi.n	8006e4c <__sflush_r+0xbc>
 8006d9c:	684b      	ldr	r3, [r1, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dc04      	bgt.n	8006dac <__sflush_r+0x1c>
 8006da2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	dc01      	bgt.n	8006dac <__sflush_r+0x1c>
 8006da8:	2000      	movs	r0, #0
 8006daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dae:	2e00      	cmp	r6, #0
 8006db0:	d0fa      	beq.n	8006da8 <__sflush_r+0x18>
 8006db2:	2300      	movs	r3, #0
 8006db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006db8:	682f      	ldr	r7, [r5, #0]
 8006dba:	602b      	str	r3, [r5, #0]
 8006dbc:	d032      	beq.n	8006e24 <__sflush_r+0x94>
 8006dbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	075a      	lsls	r2, r3, #29
 8006dc4:	d505      	bpl.n	8006dd2 <__sflush_r+0x42>
 8006dc6:	6863      	ldr	r3, [r4, #4]
 8006dc8:	1ac0      	subs	r0, r0, r3
 8006dca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dcc:	b10b      	cbz	r3, 8006dd2 <__sflush_r+0x42>
 8006dce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dd0:	1ac0      	subs	r0, r0, r3
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dd8:	4628      	mov	r0, r5
 8006dda:	6a21      	ldr	r1, [r4, #32]
 8006ddc:	47b0      	blx	r6
 8006dde:	1c43      	adds	r3, r0, #1
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	d106      	bne.n	8006df2 <__sflush_r+0x62>
 8006de4:	6829      	ldr	r1, [r5, #0]
 8006de6:	291d      	cmp	r1, #29
 8006de8:	d82c      	bhi.n	8006e44 <__sflush_r+0xb4>
 8006dea:	4a29      	ldr	r2, [pc, #164]	; (8006e90 <__sflush_r+0x100>)
 8006dec:	40ca      	lsrs	r2, r1
 8006dee:	07d6      	lsls	r6, r2, #31
 8006df0:	d528      	bpl.n	8006e44 <__sflush_r+0xb4>
 8006df2:	2200      	movs	r2, #0
 8006df4:	6062      	str	r2, [r4, #4]
 8006df6:	6922      	ldr	r2, [r4, #16]
 8006df8:	04d9      	lsls	r1, r3, #19
 8006dfa:	6022      	str	r2, [r4, #0]
 8006dfc:	d504      	bpl.n	8006e08 <__sflush_r+0x78>
 8006dfe:	1c42      	adds	r2, r0, #1
 8006e00:	d101      	bne.n	8006e06 <__sflush_r+0x76>
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	b903      	cbnz	r3, 8006e08 <__sflush_r+0x78>
 8006e06:	6560      	str	r0, [r4, #84]	; 0x54
 8006e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e0a:	602f      	str	r7, [r5, #0]
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	d0cb      	beq.n	8006da8 <__sflush_r+0x18>
 8006e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e14:	4299      	cmp	r1, r3
 8006e16:	d002      	beq.n	8006e1e <__sflush_r+0x8e>
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f7ff fc51 	bl	80066c0 <_free_r>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	6360      	str	r0, [r4, #52]	; 0x34
 8006e22:	e7c2      	b.n	8006daa <__sflush_r+0x1a>
 8006e24:	6a21      	ldr	r1, [r4, #32]
 8006e26:	2301      	movs	r3, #1
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b0      	blx	r6
 8006e2c:	1c41      	adds	r1, r0, #1
 8006e2e:	d1c7      	bne.n	8006dc0 <__sflush_r+0x30>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0c4      	beq.n	8006dc0 <__sflush_r+0x30>
 8006e36:	2b1d      	cmp	r3, #29
 8006e38:	d001      	beq.n	8006e3e <__sflush_r+0xae>
 8006e3a:	2b16      	cmp	r3, #22
 8006e3c:	d101      	bne.n	8006e42 <__sflush_r+0xb2>
 8006e3e:	602f      	str	r7, [r5, #0]
 8006e40:	e7b2      	b.n	8006da8 <__sflush_r+0x18>
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e48:	81a3      	strh	r3, [r4, #12]
 8006e4a:	e7ae      	b.n	8006daa <__sflush_r+0x1a>
 8006e4c:	690f      	ldr	r7, [r1, #16]
 8006e4e:	2f00      	cmp	r7, #0
 8006e50:	d0aa      	beq.n	8006da8 <__sflush_r+0x18>
 8006e52:	0793      	lsls	r3, r2, #30
 8006e54:	bf18      	it	ne
 8006e56:	2300      	movne	r3, #0
 8006e58:	680e      	ldr	r6, [r1, #0]
 8006e5a:	bf08      	it	eq
 8006e5c:	694b      	ldreq	r3, [r1, #20]
 8006e5e:	1bf6      	subs	r6, r6, r7
 8006e60:	600f      	str	r7, [r1, #0]
 8006e62:	608b      	str	r3, [r1, #8]
 8006e64:	2e00      	cmp	r6, #0
 8006e66:	dd9f      	ble.n	8006da8 <__sflush_r+0x18>
 8006e68:	4633      	mov	r3, r6
 8006e6a:	463a      	mov	r2, r7
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	6a21      	ldr	r1, [r4, #32]
 8006e70:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006e74:	47e0      	blx	ip
 8006e76:	2800      	cmp	r0, #0
 8006e78:	dc06      	bgt.n	8006e88 <__sflush_r+0xf8>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	e790      	b.n	8006daa <__sflush_r+0x1a>
 8006e88:	4407      	add	r7, r0
 8006e8a:	1a36      	subs	r6, r6, r0
 8006e8c:	e7ea      	b.n	8006e64 <__sflush_r+0xd4>
 8006e8e:	bf00      	nop
 8006e90:	20400001 	.word	0x20400001

08006e94 <_fflush_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	690b      	ldr	r3, [r1, #16]
 8006e98:	4605      	mov	r5, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	b913      	cbnz	r3, 8006ea4 <_fflush_r+0x10>
 8006e9e:	2500      	movs	r5, #0
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	b118      	cbz	r0, 8006eae <_fflush_r+0x1a>
 8006ea6:	6983      	ldr	r3, [r0, #24]
 8006ea8:	b90b      	cbnz	r3, 8006eae <_fflush_r+0x1a>
 8006eaa:	f000 f887 	bl	8006fbc <__sinit>
 8006eae:	4b14      	ldr	r3, [pc, #80]	; (8006f00 <_fflush_r+0x6c>)
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	d11b      	bne.n	8006eec <_fflush_r+0x58>
 8006eb4:	686c      	ldr	r4, [r5, #4]
 8006eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0ef      	beq.n	8006e9e <_fflush_r+0xa>
 8006ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ec0:	07d0      	lsls	r0, r2, #31
 8006ec2:	d404      	bmi.n	8006ece <_fflush_r+0x3a>
 8006ec4:	0599      	lsls	r1, r3, #22
 8006ec6:	d402      	bmi.n	8006ece <_fflush_r+0x3a>
 8006ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eca:	f000 f915 	bl	80070f8 <__retarget_lock_acquire_recursive>
 8006ece:	4628      	mov	r0, r5
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	f7ff ff5d 	bl	8006d90 <__sflush_r>
 8006ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ed8:	4605      	mov	r5, r0
 8006eda:	07da      	lsls	r2, r3, #31
 8006edc:	d4e0      	bmi.n	8006ea0 <_fflush_r+0xc>
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	059b      	lsls	r3, r3, #22
 8006ee2:	d4dd      	bmi.n	8006ea0 <_fflush_r+0xc>
 8006ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ee6:	f000 f908 	bl	80070fa <__retarget_lock_release_recursive>
 8006eea:	e7d9      	b.n	8006ea0 <_fflush_r+0xc>
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <_fflush_r+0x70>)
 8006eee:	429c      	cmp	r4, r3
 8006ef0:	d101      	bne.n	8006ef6 <_fflush_r+0x62>
 8006ef2:	68ac      	ldr	r4, [r5, #8]
 8006ef4:	e7df      	b.n	8006eb6 <_fflush_r+0x22>
 8006ef6:	4b04      	ldr	r3, [pc, #16]	; (8006f08 <_fflush_r+0x74>)
 8006ef8:	429c      	cmp	r4, r3
 8006efa:	bf08      	it	eq
 8006efc:	68ec      	ldreq	r4, [r5, #12]
 8006efe:	e7da      	b.n	8006eb6 <_fflush_r+0x22>
 8006f00:	08007784 	.word	0x08007784
 8006f04:	080077a4 	.word	0x080077a4
 8006f08:	08007764 	.word	0x08007764

08006f0c <std>:
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	4604      	mov	r4, r0
 8006f12:	e9c0 3300 	strd	r3, r3, [r0]
 8006f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f1a:	6083      	str	r3, [r0, #8]
 8006f1c:	8181      	strh	r1, [r0, #12]
 8006f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f20:	81c2      	strh	r2, [r0, #14]
 8006f22:	6183      	str	r3, [r0, #24]
 8006f24:	4619      	mov	r1, r3
 8006f26:	2208      	movs	r2, #8
 8006f28:	305c      	adds	r0, #92	; 0x5c
 8006f2a:	f7fd fd29 	bl	8004980 <memset>
 8006f2e:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <std+0x38>)
 8006f30:	6224      	str	r4, [r4, #32]
 8006f32:	6263      	str	r3, [r4, #36]	; 0x24
 8006f34:	4b04      	ldr	r3, [pc, #16]	; (8006f48 <std+0x3c>)
 8006f36:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <std+0x40>)
 8006f3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f3c:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <std+0x44>)
 8006f3e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f40:	bd10      	pop	{r4, pc}
 8006f42:	bf00      	nop
 8006f44:	08007251 	.word	0x08007251
 8006f48:	08007273 	.word	0x08007273
 8006f4c:	080072ab 	.word	0x080072ab
 8006f50:	080072cf 	.word	0x080072cf

08006f54 <_cleanup_r>:
 8006f54:	4901      	ldr	r1, [pc, #4]	; (8006f5c <_cleanup_r+0x8>)
 8006f56:	f000 b8af 	b.w	80070b8 <_fwalk_reent>
 8006f5a:	bf00      	nop
 8006f5c:	08006e95 	.word	0x08006e95

08006f60 <__sfmoreglue>:
 8006f60:	2268      	movs	r2, #104	; 0x68
 8006f62:	b570      	push	{r4, r5, r6, lr}
 8006f64:	1e4d      	subs	r5, r1, #1
 8006f66:	4355      	muls	r5, r2
 8006f68:	460e      	mov	r6, r1
 8006f6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f6e:	f7ff fc0f 	bl	8006790 <_malloc_r>
 8006f72:	4604      	mov	r4, r0
 8006f74:	b140      	cbz	r0, 8006f88 <__sfmoreglue+0x28>
 8006f76:	2100      	movs	r1, #0
 8006f78:	e9c0 1600 	strd	r1, r6, [r0]
 8006f7c:	300c      	adds	r0, #12
 8006f7e:	60a0      	str	r0, [r4, #8]
 8006f80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f84:	f7fd fcfc 	bl	8004980 <memset>
 8006f88:	4620      	mov	r0, r4
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}

08006f8c <__sfp_lock_acquire>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	; (8006f94 <__sfp_lock_acquire+0x8>)
 8006f8e:	f000 b8b3 	b.w	80070f8 <__retarget_lock_acquire_recursive>
 8006f92:	bf00      	nop
 8006f94:	200002e9 	.word	0x200002e9

08006f98 <__sfp_lock_release>:
 8006f98:	4801      	ldr	r0, [pc, #4]	; (8006fa0 <__sfp_lock_release+0x8>)
 8006f9a:	f000 b8ae 	b.w	80070fa <__retarget_lock_release_recursive>
 8006f9e:	bf00      	nop
 8006fa0:	200002e9 	.word	0x200002e9

08006fa4 <__sinit_lock_acquire>:
 8006fa4:	4801      	ldr	r0, [pc, #4]	; (8006fac <__sinit_lock_acquire+0x8>)
 8006fa6:	f000 b8a7 	b.w	80070f8 <__retarget_lock_acquire_recursive>
 8006faa:	bf00      	nop
 8006fac:	200002ea 	.word	0x200002ea

08006fb0 <__sinit_lock_release>:
 8006fb0:	4801      	ldr	r0, [pc, #4]	; (8006fb8 <__sinit_lock_release+0x8>)
 8006fb2:	f000 b8a2 	b.w	80070fa <__retarget_lock_release_recursive>
 8006fb6:	bf00      	nop
 8006fb8:	200002ea 	.word	0x200002ea

08006fbc <__sinit>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	f7ff fff0 	bl	8006fa4 <__sinit_lock_acquire>
 8006fc4:	69a3      	ldr	r3, [r4, #24]
 8006fc6:	b11b      	cbz	r3, 8006fd0 <__sinit+0x14>
 8006fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fcc:	f7ff bff0 	b.w	8006fb0 <__sinit_lock_release>
 8006fd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fd4:	6523      	str	r3, [r4, #80]	; 0x50
 8006fd6:	4b13      	ldr	r3, [pc, #76]	; (8007024 <__sinit+0x68>)
 8006fd8:	4a13      	ldr	r2, [pc, #76]	; (8007028 <__sinit+0x6c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fde:	42a3      	cmp	r3, r4
 8006fe0:	bf08      	it	eq
 8006fe2:	2301      	moveq	r3, #1
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	bf08      	it	eq
 8006fe8:	61a3      	streq	r3, [r4, #24]
 8006fea:	f000 f81f 	bl	800702c <__sfp>
 8006fee:	6060      	str	r0, [r4, #4]
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 f81b 	bl	800702c <__sfp>
 8006ff6:	60a0      	str	r0, [r4, #8]
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 f817 	bl	800702c <__sfp>
 8006ffe:	2200      	movs	r2, #0
 8007000:	2104      	movs	r1, #4
 8007002:	60e0      	str	r0, [r4, #12]
 8007004:	6860      	ldr	r0, [r4, #4]
 8007006:	f7ff ff81 	bl	8006f0c <std>
 800700a:	2201      	movs	r2, #1
 800700c:	2109      	movs	r1, #9
 800700e:	68a0      	ldr	r0, [r4, #8]
 8007010:	f7ff ff7c 	bl	8006f0c <std>
 8007014:	2202      	movs	r2, #2
 8007016:	2112      	movs	r1, #18
 8007018:	68e0      	ldr	r0, [r4, #12]
 800701a:	f7ff ff77 	bl	8006f0c <std>
 800701e:	2301      	movs	r3, #1
 8007020:	61a3      	str	r3, [r4, #24]
 8007022:	e7d1      	b.n	8006fc8 <__sinit+0xc>
 8007024:	080073e8 	.word	0x080073e8
 8007028:	08006f55 	.word	0x08006f55

0800702c <__sfp>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	4607      	mov	r7, r0
 8007030:	f7ff ffac 	bl	8006f8c <__sfp_lock_acquire>
 8007034:	4b1e      	ldr	r3, [pc, #120]	; (80070b0 <__sfp+0x84>)
 8007036:	681e      	ldr	r6, [r3, #0]
 8007038:	69b3      	ldr	r3, [r6, #24]
 800703a:	b913      	cbnz	r3, 8007042 <__sfp+0x16>
 800703c:	4630      	mov	r0, r6
 800703e:	f7ff ffbd 	bl	8006fbc <__sinit>
 8007042:	3648      	adds	r6, #72	; 0x48
 8007044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007048:	3b01      	subs	r3, #1
 800704a:	d503      	bpl.n	8007054 <__sfp+0x28>
 800704c:	6833      	ldr	r3, [r6, #0]
 800704e:	b30b      	cbz	r3, 8007094 <__sfp+0x68>
 8007050:	6836      	ldr	r6, [r6, #0]
 8007052:	e7f7      	b.n	8007044 <__sfp+0x18>
 8007054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007058:	b9d5      	cbnz	r5, 8007090 <__sfp+0x64>
 800705a:	4b16      	ldr	r3, [pc, #88]	; (80070b4 <__sfp+0x88>)
 800705c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007060:	60e3      	str	r3, [r4, #12]
 8007062:	6665      	str	r5, [r4, #100]	; 0x64
 8007064:	f000 f847 	bl	80070f6 <__retarget_lock_init_recursive>
 8007068:	f7ff ff96 	bl	8006f98 <__sfp_lock_release>
 800706c:	2208      	movs	r2, #8
 800706e:	4629      	mov	r1, r5
 8007070:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007074:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007078:	6025      	str	r5, [r4, #0]
 800707a:	61a5      	str	r5, [r4, #24]
 800707c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007080:	f7fd fc7e 	bl	8004980 <memset>
 8007084:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007088:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800708c:	4620      	mov	r0, r4
 800708e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007090:	3468      	adds	r4, #104	; 0x68
 8007092:	e7d9      	b.n	8007048 <__sfp+0x1c>
 8007094:	2104      	movs	r1, #4
 8007096:	4638      	mov	r0, r7
 8007098:	f7ff ff62 	bl	8006f60 <__sfmoreglue>
 800709c:	4604      	mov	r4, r0
 800709e:	6030      	str	r0, [r6, #0]
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d1d5      	bne.n	8007050 <__sfp+0x24>
 80070a4:	f7ff ff78 	bl	8006f98 <__sfp_lock_release>
 80070a8:	230c      	movs	r3, #12
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	e7ee      	b.n	800708c <__sfp+0x60>
 80070ae:	bf00      	nop
 80070b0:	080073e8 	.word	0x080073e8
 80070b4:	ffff0001 	.word	0xffff0001

080070b8 <_fwalk_reent>:
 80070b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070bc:	4606      	mov	r6, r0
 80070be:	4688      	mov	r8, r1
 80070c0:	2700      	movs	r7, #0
 80070c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070ca:	f1b9 0901 	subs.w	r9, r9, #1
 80070ce:	d505      	bpl.n	80070dc <_fwalk_reent+0x24>
 80070d0:	6824      	ldr	r4, [r4, #0]
 80070d2:	2c00      	cmp	r4, #0
 80070d4:	d1f7      	bne.n	80070c6 <_fwalk_reent+0xe>
 80070d6:	4638      	mov	r0, r7
 80070d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070dc:	89ab      	ldrh	r3, [r5, #12]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d907      	bls.n	80070f2 <_fwalk_reent+0x3a>
 80070e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070e6:	3301      	adds	r3, #1
 80070e8:	d003      	beq.n	80070f2 <_fwalk_reent+0x3a>
 80070ea:	4629      	mov	r1, r5
 80070ec:	4630      	mov	r0, r6
 80070ee:	47c0      	blx	r8
 80070f0:	4307      	orrs	r7, r0
 80070f2:	3568      	adds	r5, #104	; 0x68
 80070f4:	e7e9      	b.n	80070ca <_fwalk_reent+0x12>

080070f6 <__retarget_lock_init_recursive>:
 80070f6:	4770      	bx	lr

080070f8 <__retarget_lock_acquire_recursive>:
 80070f8:	4770      	bx	lr

080070fa <__retarget_lock_release_recursive>:
 80070fa:	4770      	bx	lr

080070fc <__swhatbuf_r>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	460e      	mov	r6, r1
 8007100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007104:	4614      	mov	r4, r2
 8007106:	2900      	cmp	r1, #0
 8007108:	461d      	mov	r5, r3
 800710a:	b096      	sub	sp, #88	; 0x58
 800710c:	da08      	bge.n	8007120 <__swhatbuf_r+0x24>
 800710e:	2200      	movs	r2, #0
 8007110:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007114:	602a      	str	r2, [r5, #0]
 8007116:	061a      	lsls	r2, r3, #24
 8007118:	d410      	bmi.n	800713c <__swhatbuf_r+0x40>
 800711a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800711e:	e00e      	b.n	800713e <__swhatbuf_r+0x42>
 8007120:	466a      	mov	r2, sp
 8007122:	f000 f8fb 	bl	800731c <_fstat_r>
 8007126:	2800      	cmp	r0, #0
 8007128:	dbf1      	blt.n	800710e <__swhatbuf_r+0x12>
 800712a:	9a01      	ldr	r2, [sp, #4]
 800712c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007130:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007134:	425a      	negs	r2, r3
 8007136:	415a      	adcs	r2, r3
 8007138:	602a      	str	r2, [r5, #0]
 800713a:	e7ee      	b.n	800711a <__swhatbuf_r+0x1e>
 800713c:	2340      	movs	r3, #64	; 0x40
 800713e:	2000      	movs	r0, #0
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	b016      	add	sp, #88	; 0x58
 8007144:	bd70      	pop	{r4, r5, r6, pc}
	...

08007148 <__smakebuf_r>:
 8007148:	898b      	ldrh	r3, [r1, #12]
 800714a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800714c:	079d      	lsls	r5, r3, #30
 800714e:	4606      	mov	r6, r0
 8007150:	460c      	mov	r4, r1
 8007152:	d507      	bpl.n	8007164 <__smakebuf_r+0x1c>
 8007154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	6123      	str	r3, [r4, #16]
 800715c:	2301      	movs	r3, #1
 800715e:	6163      	str	r3, [r4, #20]
 8007160:	b002      	add	sp, #8
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	466a      	mov	r2, sp
 8007166:	ab01      	add	r3, sp, #4
 8007168:	f7ff ffc8 	bl	80070fc <__swhatbuf_r>
 800716c:	9900      	ldr	r1, [sp, #0]
 800716e:	4605      	mov	r5, r0
 8007170:	4630      	mov	r0, r6
 8007172:	f7ff fb0d 	bl	8006790 <_malloc_r>
 8007176:	b948      	cbnz	r0, 800718c <__smakebuf_r+0x44>
 8007178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800717c:	059a      	lsls	r2, r3, #22
 800717e:	d4ef      	bmi.n	8007160 <__smakebuf_r+0x18>
 8007180:	f023 0303 	bic.w	r3, r3, #3
 8007184:	f043 0302 	orr.w	r3, r3, #2
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	e7e3      	b.n	8007154 <__smakebuf_r+0xc>
 800718c:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <__smakebuf_r+0x7c>)
 800718e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	6020      	str	r0, [r4, #0]
 8007194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007198:	81a3      	strh	r3, [r4, #12]
 800719a:	9b00      	ldr	r3, [sp, #0]
 800719c:	6120      	str	r0, [r4, #16]
 800719e:	6163      	str	r3, [r4, #20]
 80071a0:	9b01      	ldr	r3, [sp, #4]
 80071a2:	b15b      	cbz	r3, 80071bc <__smakebuf_r+0x74>
 80071a4:	4630      	mov	r0, r6
 80071a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071aa:	f000 f8c9 	bl	8007340 <_isatty_r>
 80071ae:	b128      	cbz	r0, 80071bc <__smakebuf_r+0x74>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	f023 0303 	bic.w	r3, r3, #3
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	89a0      	ldrh	r0, [r4, #12]
 80071be:	4305      	orrs	r5, r0
 80071c0:	81a5      	strh	r5, [r4, #12]
 80071c2:	e7cd      	b.n	8007160 <__smakebuf_r+0x18>
 80071c4:	08006f55 	.word	0x08006f55

080071c8 <_raise_r>:
 80071c8:	291f      	cmp	r1, #31
 80071ca:	b538      	push	{r3, r4, r5, lr}
 80071cc:	4604      	mov	r4, r0
 80071ce:	460d      	mov	r5, r1
 80071d0:	d904      	bls.n	80071dc <_raise_r+0x14>
 80071d2:	2316      	movs	r3, #22
 80071d4:	6003      	str	r3, [r0, #0]
 80071d6:	f04f 30ff 	mov.w	r0, #4294967295
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071de:	b112      	cbz	r2, 80071e6 <_raise_r+0x1e>
 80071e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071e4:	b94b      	cbnz	r3, 80071fa <_raise_r+0x32>
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 f830 	bl	800724c <_getpid_r>
 80071ec:	462a      	mov	r2, r5
 80071ee:	4601      	mov	r1, r0
 80071f0:	4620      	mov	r0, r4
 80071f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f6:	f000 b817 	b.w	8007228 <_kill_r>
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d00a      	beq.n	8007214 <_raise_r+0x4c>
 80071fe:	1c59      	adds	r1, r3, #1
 8007200:	d103      	bne.n	800720a <_raise_r+0x42>
 8007202:	2316      	movs	r3, #22
 8007204:	6003      	str	r3, [r0, #0]
 8007206:	2001      	movs	r0, #1
 8007208:	e7e7      	b.n	80071da <_raise_r+0x12>
 800720a:	2400      	movs	r4, #0
 800720c:	4628      	mov	r0, r5
 800720e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007212:	4798      	blx	r3
 8007214:	2000      	movs	r0, #0
 8007216:	e7e0      	b.n	80071da <_raise_r+0x12>

08007218 <raise>:
 8007218:	4b02      	ldr	r3, [pc, #8]	; (8007224 <raise+0xc>)
 800721a:	4601      	mov	r1, r0
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	f7ff bfd3 	b.w	80071c8 <_raise_r>
 8007222:	bf00      	nop
 8007224:	2000000c 	.word	0x2000000c

08007228 <_kill_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	2300      	movs	r3, #0
 800722c:	4d06      	ldr	r5, [pc, #24]	; (8007248 <_kill_r+0x20>)
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	f7f9 fecc 	bl	8000fd2 <_kill>
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	d102      	bne.n	8007244 <_kill_r+0x1c>
 800723e:	682b      	ldr	r3, [r5, #0]
 8007240:	b103      	cbz	r3, 8007244 <_kill_r+0x1c>
 8007242:	6023      	str	r3, [r4, #0]
 8007244:	bd38      	pop	{r3, r4, r5, pc}
 8007246:	bf00      	nop
 8007248:	200002e4 	.word	0x200002e4

0800724c <_getpid_r>:
 800724c:	f7f9 beba 	b.w	8000fc4 <_getpid>

08007250 <__sread>:
 8007250:	b510      	push	{r4, lr}
 8007252:	460c      	mov	r4, r1
 8007254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007258:	f000 f894 	bl	8007384 <_read_r>
 800725c:	2800      	cmp	r0, #0
 800725e:	bfab      	itete	ge
 8007260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007262:	89a3      	ldrhlt	r3, [r4, #12]
 8007264:	181b      	addge	r3, r3, r0
 8007266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800726a:	bfac      	ite	ge
 800726c:	6563      	strge	r3, [r4, #84]	; 0x54
 800726e:	81a3      	strhlt	r3, [r4, #12]
 8007270:	bd10      	pop	{r4, pc}

08007272 <__swrite>:
 8007272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007276:	461f      	mov	r7, r3
 8007278:	898b      	ldrh	r3, [r1, #12]
 800727a:	4605      	mov	r5, r0
 800727c:	05db      	lsls	r3, r3, #23
 800727e:	460c      	mov	r4, r1
 8007280:	4616      	mov	r6, r2
 8007282:	d505      	bpl.n	8007290 <__swrite+0x1e>
 8007284:	2302      	movs	r3, #2
 8007286:	2200      	movs	r2, #0
 8007288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728c:	f000 f868 	bl	8007360 <_lseek_r>
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	4632      	mov	r2, r6
 8007294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	4628      	mov	r0, r5
 800729c:	463b      	mov	r3, r7
 800729e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072a6:	f000 b817 	b.w	80072d8 <_write_r>

080072aa <__sseek>:
 80072aa:	b510      	push	{r4, lr}
 80072ac:	460c      	mov	r4, r1
 80072ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b2:	f000 f855 	bl	8007360 <_lseek_r>
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	bf15      	itete	ne
 80072bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80072be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072c6:	81a3      	strheq	r3, [r4, #12]
 80072c8:	bf18      	it	ne
 80072ca:	81a3      	strhne	r3, [r4, #12]
 80072cc:	bd10      	pop	{r4, pc}

080072ce <__sclose>:
 80072ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d2:	f000 b813 	b.w	80072fc <_close_r>
	...

080072d8 <_write_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	2200      	movs	r2, #0
 80072e2:	4d05      	ldr	r5, [pc, #20]	; (80072f8 <_write_r+0x20>)
 80072e4:	602a      	str	r2, [r5, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f7f9 feaa 	bl	8001040 <_write>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_write_r+0x1e>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_write_r+0x1e>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	200002e4 	.word	0x200002e4

080072fc <_close_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	2300      	movs	r3, #0
 8007300:	4d05      	ldr	r5, [pc, #20]	; (8007318 <_close_r+0x1c>)
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7f9 feb6 	bl	8001078 <_close>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_close_r+0x1a>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_close_r+0x1a>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	200002e4 	.word	0x200002e4

0800731c <_fstat_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	2300      	movs	r3, #0
 8007320:	4d06      	ldr	r5, [pc, #24]	; (800733c <_fstat_r+0x20>)
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	602b      	str	r3, [r5, #0]
 800732a:	f7f9 feb0 	bl	800108e <_fstat>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	d102      	bne.n	8007338 <_fstat_r+0x1c>
 8007332:	682b      	ldr	r3, [r5, #0]
 8007334:	b103      	cbz	r3, 8007338 <_fstat_r+0x1c>
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop
 800733c:	200002e4 	.word	0x200002e4

08007340 <_isatty_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	2300      	movs	r3, #0
 8007344:	4d05      	ldr	r5, [pc, #20]	; (800735c <_isatty_r+0x1c>)
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	602b      	str	r3, [r5, #0]
 800734c:	f7f9 feae 	bl	80010ac <_isatty>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_isatty_r+0x1a>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_isatty_r+0x1a>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	200002e4 	.word	0x200002e4

08007360 <_lseek_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4604      	mov	r4, r0
 8007364:	4608      	mov	r0, r1
 8007366:	4611      	mov	r1, r2
 8007368:	2200      	movs	r2, #0
 800736a:	4d05      	ldr	r5, [pc, #20]	; (8007380 <_lseek_r+0x20>)
 800736c:	602a      	str	r2, [r5, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	f7f9 fea6 	bl	80010c0 <_lseek>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_lseek_r+0x1e>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_lseek_r+0x1e>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	200002e4 	.word	0x200002e4

08007384 <_read_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	4611      	mov	r1, r2
 800738c:	2200      	movs	r2, #0
 800738e:	4d05      	ldr	r5, [pc, #20]	; (80073a4 <_read_r+0x20>)
 8007390:	602a      	str	r2, [r5, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f7f9 fe37 	bl	8001006 <_read>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_read_r+0x1e>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_read_r+0x1e>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	200002e4 	.word	0x200002e4

080073a8 <_init>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	bf00      	nop
 80073ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ae:	bc08      	pop	{r3}
 80073b0:	469e      	mov	lr, r3
 80073b2:	4770      	bx	lr

080073b4 <_fini>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr
