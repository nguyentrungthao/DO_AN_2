
DO_AN_MON_DKTD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c20c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800c320  0800c320  0001c320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c83c  0800c83c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c83c  0800c83c  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c83c  0800c83c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c83c  0800c83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c840  0800c840  0001c840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c844  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200001f8  0800ca3c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800ca3c  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152e7  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c57  00000000  00000000  00035508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00038160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  00039690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a03a  00000000  00000000  0003aac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d4e  00000000  00000000  00054afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093c36  00000000  00000000  0006b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff47e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f3c  00000000  00000000  000ff4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c304 	.word	0x0800c304

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800c304 	.word	0x0800c304

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_frsub>:
 8000c30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c34:	e002      	b.n	8000c3c <__addsf3>
 8000c36:	bf00      	nop

08000c38 <__aeabi_fsub>:
 8000c38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c3c <__addsf3>:
 8000c3c:	0042      	lsls	r2, r0, #1
 8000c3e:	bf1f      	itttt	ne
 8000c40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c44:	ea92 0f03 	teqne	r2, r3
 8000c48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c50:	d06a      	beq.n	8000d28 <__addsf3+0xec>
 8000c52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c5a:	bfc1      	itttt	gt
 8000c5c:	18d2      	addgt	r2, r2, r3
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	4048      	eorgt	r0, r1
 8000c62:	4041      	eorgt	r1, r0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	2b19      	cmp	r3, #25
 8000c6a:	bf88      	it	hi
 8000c6c:	4770      	bxhi	lr
 8000c6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4249      	negne	r1, r1
 8000c8e:	ea92 0f03 	teq	r2, r3
 8000c92:	d03f      	beq.n	8000d14 <__addsf3+0xd8>
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	fa41 fc03 	asr.w	ip, r1, r3
 8000c9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ca0:	f1c3 0320 	rsb	r3, r3, #32
 8000ca4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__addsf3+0x78>
 8000cae:	4249      	negs	r1, r1
 8000cb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb8:	d313      	bcc.n	8000ce2 <__addsf3+0xa6>
 8000cba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cbe:	d306      	bcc.n	8000cce <__addsf3+0x92>
 8000cc0:	0840      	lsrs	r0, r0, #1
 8000cc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc6:	f102 0201 	add.w	r2, r2, #1
 8000cca:	2afe      	cmp	r2, #254	; 0xfe
 8000ccc:	d251      	bcs.n	8000d72 <__addsf3+0x136>
 8000cce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	ea40 0003 	orr.w	r0, r0, r3
 8000ce0:	4770      	bx	lr
 8000ce2:	0049      	lsls	r1, r1, #1
 8000ce4:	eb40 0000 	adc.w	r0, r0, r0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	bf28      	it	cs
 8000cec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf0:	d2ed      	bcs.n	8000cce <__addsf3+0x92>
 8000cf2:	fab0 fc80 	clz	ip, r0
 8000cf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d02:	bfaa      	itet	ge
 8000d04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d08:	4252      	neglt	r2, r2
 8000d0a:	4318      	orrge	r0, r3
 8000d0c:	bfbc      	itt	lt
 8000d0e:	40d0      	lsrlt	r0, r2
 8000d10:	4318      	orrlt	r0, r3
 8000d12:	4770      	bx	lr
 8000d14:	f092 0f00 	teq	r2, #0
 8000d18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d1c:	bf06      	itte	eq
 8000d1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d22:	3201      	addeq	r2, #1
 8000d24:	3b01      	subne	r3, #1
 8000d26:	e7b5      	b.n	8000c94 <__addsf3+0x58>
 8000d28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d30:	bf18      	it	ne
 8000d32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d36:	d021      	beq.n	8000d7c <__addsf3+0x140>
 8000d38:	ea92 0f03 	teq	r2, r3
 8000d3c:	d004      	beq.n	8000d48 <__addsf3+0x10c>
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	bf08      	it	eq
 8000d44:	4608      	moveq	r0, r1
 8000d46:	4770      	bx	lr
 8000d48:	ea90 0f01 	teq	r0, r1
 8000d4c:	bf1c      	itt	ne
 8000d4e:	2000      	movne	r0, #0
 8000d50:	4770      	bxne	lr
 8000d52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d56:	d104      	bne.n	8000d62 <__addsf3+0x126>
 8000d58:	0040      	lsls	r0, r0, #1
 8000d5a:	bf28      	it	cs
 8000d5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d66:	bf3c      	itt	cc
 8000d68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d6c:	4770      	bxcc	lr
 8000d6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7a:	4770      	bx	lr
 8000d7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d80:	bf16      	itet	ne
 8000d82:	4608      	movne	r0, r1
 8000d84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d88:	4601      	movne	r1, r0
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	bf06      	itte	eq
 8000d8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d92:	ea90 0f01 	teqeq	r0, r1
 8000d96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_ui2f>:
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e004      	b.n	8000dac <__aeabi_i2f+0x8>
 8000da2:	bf00      	nop

08000da4 <__aeabi_i2f>:
 8000da4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da8:	bf48      	it	mi
 8000daa:	4240      	negmi	r0, r0
 8000dac:	ea5f 0c00 	movs.w	ip, r0
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db8:	4601      	mov	r1, r0
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	e01c      	b.n	8000dfa <__aeabi_l2f+0x2a>

08000dc0 <__aeabi_ul2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e00a      	b.n	8000de4 <__aeabi_l2f+0x14>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_l2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__aeabi_l2f+0x14>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	ea5f 0c01 	movs.w	ip, r1
 8000de8:	bf02      	ittt	eq
 8000dea:	4684      	moveq	ip, r0
 8000dec:	4601      	moveq	r1, r0
 8000dee:	2000      	moveq	r0, #0
 8000df0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000df4:	bf08      	it	eq
 8000df6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dfe:	fabc f28c 	clz	r2, ip
 8000e02:	3a08      	subs	r2, #8
 8000e04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e08:	db10      	blt.n	8000e2c <__aeabi_l2f+0x5c>
 8000e0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e14:	f1c2 0220 	rsb	r2, r2, #32
 8000e18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	eb43 0002 	adc.w	r0, r3, r2
 8000e24:	bf08      	it	eq
 8000e26:	f020 0001 	biceq.w	r0, r0, #1
 8000e2a:	4770      	bx	lr
 8000e2c:	f102 0220 	add.w	r2, r2, #32
 8000e30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_d2lz>:
 8000e4c:	b538      	push	{r3, r4, r5, lr}
 8000e4e:	4605      	mov	r5, r0
 8000e50:	460c      	mov	r4, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	2300      	movs	r3, #0
 8000e56:	4628      	mov	r0, r5
 8000e58:	4621      	mov	r1, r4
 8000e5a:	f7ff fe63 	bl	8000b24 <__aeabi_dcmplt>
 8000e5e:	b928      	cbnz	r0, 8000e6c <__aeabi_d2lz+0x20>
 8000e60:	4628      	mov	r0, r5
 8000e62:	4621      	mov	r1, r4
 8000e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e68:	f000 b80a 	b.w	8000e80 <__aeabi_d2ulz>
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000e72:	f000 f805 	bl	8000e80 <__aeabi_d2ulz>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	bd38      	pop	{r3, r4, r5, pc}
 8000e7e:	bf00      	nop

08000e80 <__aeabi_d2ulz>:
 8000e80:	b5d0      	push	{r4, r6, r7, lr}
 8000e82:	2200      	movs	r2, #0
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <__aeabi_d2ulz+0x34>)
 8000e86:	4606      	mov	r6, r0
 8000e88:	460f      	mov	r7, r1
 8000e8a:	f7ff fbd9 	bl	8000640 <__aeabi_dmul>
 8000e8e:	f7ff feaf 	bl	8000bf0 <__aeabi_d2uiz>
 8000e92:	4604      	mov	r4, r0
 8000e94:	f7ff fb5a 	bl	800054c <__aeabi_ui2d>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <__aeabi_d2ulz+0x38>)
 8000e9c:	f7ff fbd0 	bl	8000640 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	4639      	mov	r1, r7
 8000ea8:	f7ff fa12 	bl	80002d0 <__aeabi_dsub>
 8000eac:	f7ff fea0 	bl	8000bf0 <__aeabi_d2uiz>
 8000eb0:	4621      	mov	r1, r4
 8000eb2:	bdd0      	pop	{r4, r6, r7, pc}
 8000eb4:	3df00000 	.word	0x3df00000
 8000eb8:	41f00000 	.word	0x41f00000

08000ebc <SHT31_IsConnected>:
 *      Author: nguye
 */

#include "SHT31.h"

HAL_StatusTypeDef SHT31_IsConnected(SHT31_type *sht31){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(sht31->I2cHandle, SHT31_ADDRESS_VSS << 1, 3, HAL_MAX_DELAY);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	2203      	movs	r2, #3
 8000ece:	2188      	movs	r1, #136	; 0x88
 8000ed0:	f002 fd7e 	bl	80039d0 <HAL_I2C_IsDeviceReady>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <SHT31_init>:

HAL_StatusTypeDef SHT31_init(SHT31_type *sht31, I2C_HandleTypeDef *I2cHandle){
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
	sht31->I2cHandle = I2cHandle;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	601a      	str	r2, [r3, #0]
	return SHT31_IsConnected(sht31);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffe4 	bl	8000ebc <SHT31_IsConnected>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <SHT31_Crc>:

//HAL_StatusTypeDef SHT31_ReadStatus(uint8_t *statusValue);

HAL_StatusTypeDef SHT31_Crc(uint8_t *data, uint8_t len, uint8_t crcCheck){
 8000efe:	b480      	push	{r7}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	460b      	mov	r3, r1
 8000f08:	70fb      	strb	r3, [r7, #3]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	70bb      	strb	r3, [r7, #2]

	  const uint8_t POLY = 0x31;
 8000f0e:	2331      	movs	r3, #49	; 0x31
 8000f10:	733b      	strb	r3, [r7, #12]
	  uint8_t crc = 0xFF;
 8000f12:	23ff      	movs	r3, #255	; 0xff
 8000f14:	73fb      	strb	r3, [r7, #15]

	  for (uint8_t j = len; j; --j)
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	73bb      	strb	r3, [r7, #14]
 8000f1a:	e023      	b.n	8000f64 <SHT31_Crc+0x66>
	  {
	    crc ^= *data++;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	4053      	eors	r3, r2
 8000f28:	73fb      	strb	r3, [r7, #15]

	    for (uint8_t i = 8; i; --i)
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	737b      	strb	r3, [r7, #13]
 8000f2e:	e013      	b.n	8000f58 <SHT31_Crc+0x5a>
	    {
	      crc = (crc & 0x80) ? (crc << 1) ^ POLY : (crc << 1);
 8000f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da08      	bge.n	8000f4a <SHT31_Crc+0x4c>
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	b25a      	sxtb	r2, r3
 8000f3e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000f42:	4053      	eors	r3, r2
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	e002      	b.n	8000f50 <SHT31_Crc+0x52>
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 8; i; --i)
 8000f52:	7b7b      	ldrb	r3, [r7, #13]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	737b      	strb	r3, [r7, #13]
 8000f58:	7b7b      	ldrb	r3, [r7, #13]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1e8      	bne.n	8000f30 <SHT31_Crc+0x32>
	  for (uint8_t j = len; j; --j)
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	73bb      	strb	r3, [r7, #14]
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1d8      	bne.n	8000f1c <SHT31_Crc+0x1e>
	    }
	  }
	  if(crc == crcCheck){
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	78bb      	ldrb	r3, [r7, #2]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d101      	bne.n	8000f76 <SHT31_Crc+0x78>
		  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <SHT31_Crc+0x7a>
	  }
	  else{
		  return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
	  }
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
	...

08000f84 <SHT31_ReadTemperature>:
////		*temperatureValue = data * (175.0f / 65535) - 45;
////	}
//	return HAL_OK;
//}

HAL_StatusTypeDef SHT31_ReadTemperature(SHT31_type *sht31, double *temperatureValue){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	uint16_t data = 0u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	81fb      	strh	r3, [r7, #14]
	if(HAL_I2C_Master_Receive(sht31->I2cHandle, SHT31_ADDRESS_VSS << 1, sht31->tempratureRAW, 3, HAL_MAX_DELAY) == HAL_OK){
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	1d1a      	adds	r2, r3, #4
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	2188      	movs	r1, #136	; 0x88
 8000fa4:	f002 fab4 	bl	8003510 <HAL_I2C_Master_Receive>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d12d      	bne.n	800100a <SHT31_ReadTemperature+0x86>
//	if(HAL_I2C_Master_Receive_IT(sht31->I2cHandle, SHT31_ADDRESS_VSS << 1, sht31->I2cHandle, 3) == HAL_OK){
		if(SHT31_Crc(sht31->tempratureRAW, 2, sht31->tempratureRAW[2]) == HAL_OK){
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	1d18      	adds	r0, r3, #4
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	799b      	ldrb	r3, [r3, #6]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2102      	movs	r1, #2
 8000fba:	f7ff ffa0 	bl	8000efe <SHT31_Crc>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d120      	bne.n	8001006 <SHT31_ReadTemperature+0x82>
			data = (sht31->tempratureRAW[0] << 8) |  sht31->tempratureRAW[1];
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	791b      	ldrb	r3, [r3, #4]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	795b      	ldrb	r3, [r3, #5]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	81fb      	strh	r3, [r7, #14]
			*temperatureValue = data * (175.0f / 65535) - 45;
 8000fd8:	89fb      	ldrh	r3, [r7, #14]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fee2 	bl	8000da4 <__aeabi_i2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	490c      	ldr	r1, [pc, #48]	; (8001014 <SHT31_ReadTemperature+0x90>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f8bb 	bl	8000160 <__aeabi_fmul>
 8000fea:	4603      	mov	r3, r0
 8000fec:	490a      	ldr	r1, [pc, #40]	; (8001018 <SHT31_ReadTemperature+0x94>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fe22 	bl	8000c38 <__aeabi_fsub>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faca 	bl	8000590 <__aeabi_f2d>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	6839      	ldr	r1, [r7, #0]
 8001002:	e9c1 2300 	strd	r2, r3, [r1]
		}
		return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <SHT31_ReadTemperature+0x88>
	}
	return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	3b2f00af 	.word	0x3b2f00af
 8001018:	42340000 	.word	0x42340000

0800101c <SHT31_WriteCMD>:
		*humihityValue = data * (100.0 / 65535);
			return HAL_OK;
		}
		return HAL_ERROR;
}
HAL_StatusTypeDef SHT31_WriteCMD(SHT31_type *sht31, uint16_t CMD){
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
	uint8_t cc[2] = {0};
 8001028:	2300      	movs	r3, #0
 800102a:	81bb      	strh	r3, [r7, #12]
	cc[0] = (uint8_t)(CMD >> 8);
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	733b      	strb	r3, [r7, #12]
	cc[1] = (uint8_t)CMD;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(sht31->I2cHandle, SHT31_ADDRESS_VSS << 1, cc, 2, HAL_MAX_DELAY);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f107 020c 	add.w	r2, r7, #12
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2302      	movs	r3, #2
 800104c:	2188      	movs	r1, #136	; 0x88
 800104e:	f002 f961 	bl	8003314 <HAL_I2C_Master_Transmit>
 8001052:	4603      	mov	r3, r0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001060:	b088      	sub	sp, #32
 8001062:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint32_t t = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
	uint32_t tBlink = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f001 fc2e 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f9c0 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 fbe4 	bl	8001840 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001078:	f000 fa16 	bl	80014a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 800107c:	f000 fa42 	bl	8001504 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001080:	f000 fb68 	bl	8001754 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001084:	f000 fb90 	bl	80017a8 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8001088:	f000 fbb8 	bl	80017fc <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800108c:	f000 fac8 	bl	8001620 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001090:	f000 fb12 	bl	80016b8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001094:	f000 fa6c 	bl	8001570 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, Get_rx_str, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	4922      	ldr	r1, [pc, #136]	; (8001124 <main+0xc8>)
 800109c:	4822      	ldr	r0, [pc, #136]	; (8001128 <main+0xcc>)
 800109e:	f006 fa9c 	bl	80075da <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, Get_rx_str, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	491f      	ldr	r1, [pc, #124]	; (8001124 <main+0xc8>)
 80010a6:	4821      	ldr	r0, [pc, #132]	; (800112c <main+0xd0>)
 80010a8:	f006 fa97 	bl	80075da <HAL_UART_Receive_IT>
//  HAL_TIM_Base_Start_IT(&htim4);
  HAL_TIM_Base_Stop_IT(&htim4);
 80010ac:	4820      	ldr	r0, [pc, #128]	; (8001130 <main+0xd4>)
 80010ae:	f005 fcbb 	bl	8006a28 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80010b2:	213c      	movs	r1, #60	; 0x3c
 80010b4:	481f      	ldr	r0, [pc, #124]	; (8001134 <main+0xd8>)
 80010b6:	f005 fd87 	bl	8006bc8 <HAL_TIM_Encoder_Start_IT>

  triac.giaTriDat = SETPOINT;
 80010ba:	491f      	ldr	r1, [pc, #124]	; (8001138 <main+0xdc>)
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <main+0xe0>)
 80010c2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  __HAL_TIM_SET_COUNTER(&htim1, SETPOINT * 10);
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <main+0xd8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
  s7seg[3] = s7seg[4] = s7seg[5] = s7seg[6] = SEGMENT_G;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <main+0xe4>)
 80010d2:	2208      	movs	r2, #8
 80010d4:	719a      	strb	r2, [r3, #6]
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <main+0xe4>)
 80010d8:	799a      	ldrb	r2, [r3, #6]
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <main+0xe4>)
 80010dc:	715a      	strb	r2, [r3, #5]
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <main+0xe4>)
 80010e0:	795a      	ldrb	r2, [r3, #5]
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <main+0xe4>)
 80010e4:	711a      	strb	r2, [r3, #4]
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <main+0xe4>)
 80010e8:	791a      	ldrb	r2, [r3, #4]
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <main+0xe4>)
 80010ec:	70da      	strb	r2, [r3, #3]

  while(SHT31_init(&SHT31, &hi2c1) != HAL_OK){
 80010ee:	e036      	b.n	800115e <main+0x102>
	if(HAL_GetTick() - t >= 500){
 80010f0:	f001 fc44 	bl	800297c <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010fe:	d32c      	bcc.n	800115a <main+0xfe>
		t = HAL_GetTick();
 8001100:	f001 fc3c 	bl	800297c <HAL_GetTick>
 8001104:	6078      	str	r0, [r7, #4]
		if(s7seg[0] == 0x00){
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <main+0xe4>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d11a      	bne.n	8001144 <main+0xe8>
			s7seg[0] = SEGMENT_A | SEGMENT_D | SEGMENT_E | SEGMENT_F | SEGMENT_G;
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <main+0xe4>)
 8001110:	22cb      	movs	r2, #203	; 0xcb
 8001112:	701a      	strb	r2, [r3, #0]
			s7seg[1] = s7seg[2] = SEGMENT_E | SEGMENT_G;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <main+0xe4>)
 8001116:	2288      	movs	r2, #136	; 0x88
 8001118:	709a      	strb	r2, [r3, #2]
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <main+0xe4>)
 800111c:	789a      	ldrb	r2, [r3, #2]
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <main+0xe4>)
 8001120:	705a      	strb	r2, [r3, #1]
 8001122:	e01a      	b.n	800115a <main+0xfe>
 8001124:	200007ac 	.word	0x200007ac
 8001128:	200003dc 	.word	0x200003dc
 800112c:	20000398 	.word	0x20000398
 8001130:	20000350 	.word	0x20000350
 8001134:	200002c0 	.word	0x200002c0
 8001138:	20000718 	.word	0x20000718
 800113c:	40490000 	.word	0x40490000
 8001140:	20000764 	.word	0x20000764
		}
		else{
			s7seg[0] = s7seg[1] = s7seg[2] = 0x00;
 8001144:	4b9a      	ldr	r3, [pc, #616]	; (80013b0 <main+0x354>)
 8001146:	2200      	movs	r2, #0
 8001148:	709a      	strb	r2, [r3, #2]
 800114a:	4b99      	ldr	r3, [pc, #612]	; (80013b0 <main+0x354>)
 800114c:	789a      	ldrb	r2, [r3, #2]
 800114e:	4b98      	ldr	r3, [pc, #608]	; (80013b0 <main+0x354>)
 8001150:	705a      	strb	r2, [r3, #1]
 8001152:	4b97      	ldr	r3, [pc, #604]	; (80013b0 <main+0x354>)
 8001154:	785a      	ldrb	r2, [r3, #1]
 8001156:	4b96      	ldr	r3, [pc, #600]	; (80013b0 <main+0x354>)
 8001158:	701a      	strb	r2, [r3, #0]
		}
	}
	Scan7seg();
 800115a:	f000 fe8b 	bl	8001e74 <Scan7seg>
  while(SHT31_init(&SHT31, &hi2c1) != HAL_OK){
 800115e:	4995      	ldr	r1, [pc, #596]	; (80013b4 <main+0x358>)
 8001160:	4895      	ldr	r0, [pc, #596]	; (80013b8 <main+0x35c>)
 8001162:	f7ff febc 	bl	8000ede <SHT31_init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1c1      	bne.n	80010f0 <main+0x94>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - t >= (uint32_t)(1000 * TG_LAY_MAU)){
 800116c:	f001 fc06 	bl	800297c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	1ad4      	subs	r4, r2, r3
 8001176:	4b91      	ldr	r3, [pc, #580]	; (80013bc <main+0x360>)
 8001178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b8f      	ldr	r3, [pc, #572]	; (80013c0 <main+0x364>)
 8001182:	f7ff fa5d 	bl	8000640 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fd2f 	bl	8000bf0 <__aeabi_d2uiz>
 8001192:	4603      	mov	r3, r0
 8001194:	429c      	cmp	r4, r3
 8001196:	f0c0 8081 	bcc.w	800129c <main+0x240>
		  t = HAL_GetTick();
 800119a:	f001 fbef 	bl	800297c <HAL_GetTick>
 800119e:	6078      	str	r0, [r7, #4]

		  SHT31_WriteCMD(&SHT31, SHT31_MEASUREMENT_FAST);
 80011a0:	f242 4116 	movw	r1, #9238	; 0x2416
 80011a4:	4884      	ldr	r0, [pc, #528]	; (80013b8 <main+0x35c>)
 80011a6:	f7ff ff39 	bl	800101c <SHT31_WriteCMD>
		  while(SHT31_ReadTemperature(&SHT31, &triac.nhietDo) != HAL_OK);
 80011aa:	bf00      	nop
 80011ac:	4985      	ldr	r1, [pc, #532]	; (80013c4 <main+0x368>)
 80011ae:	4882      	ldr	r0, [pc, #520]	; (80013b8 <main+0x35c>)
 80011b0:	f7ff fee8 	bl	8000f84 <SHT31_ReadTemperature>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f8      	bne.n	80011ac <main+0x150>

		  PID_Caculator(&triac);
 80011ba:	4883      	ldr	r0, [pc, #524]	; (80013c8 <main+0x36c>)
 80011bc:	f000 fbfc 	bl	80019b8 <PID_Caculator>

		  sprintf(str, "%-2.2lf°C, %-2.2lf°C, %-2.2lf°C, %-2.2lf\n", triac.nhietDo, triac.giaTriDat, triac.e, triac.giaTriDieuKhien);
 80011c0:	4b81      	ldr	r3, [pc, #516]	; (80013c8 <main+0x36c>)
 80011c2:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80011c6:	4b80      	ldr	r3, [pc, #512]	; (80013c8 <main+0x36c>)
 80011c8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80011cc:	497e      	ldr	r1, [pc, #504]	; (80013c8 <main+0x36c>)
 80011ce:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 80011d2:	4c7d      	ldr	r4, [pc, #500]	; (80013c8 <main+0x36c>)
 80011d4:	f104 0510 	add.w	r5, r4, #16
 80011d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80011dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80011e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80011e4:	e9cd 2300 	strd	r2, r3, [sp]
 80011e8:	4642      	mov	r2, r8
 80011ea:	464b      	mov	r3, r9
 80011ec:	4977      	ldr	r1, [pc, #476]	; (80013cc <main+0x370>)
 80011ee:	4878      	ldr	r0, [pc, #480]	; (80013d0 <main+0x374>)
 80011f0:	f007 fb42 	bl	8008878 <siprintf>
		  HAL_UART_Transmit(&huart3, str, sizeof(str), 10000);
 80011f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80011f8:	2232      	movs	r2, #50	; 0x32
 80011fa:	4975      	ldr	r1, [pc, #468]	; (80013d0 <main+0x374>)
 80011fc:	4875      	ldr	r0, [pc, #468]	; (80013d4 <main+0x378>)
 80011fe:	f006 f95a 	bl	80074b6 <HAL_UART_Transmit>
		  s7seg[0] = code7seg[(uint16_t)triac.nhietDo / 10];
 8001202:	4b71      	ldr	r3, [pc, #452]	; (80013c8 <main+0x36c>)
 8001204:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fcf0 	bl	8000bf0 <__aeabi_d2uiz>
 8001210:	4603      	mov	r3, r0
 8001212:	b29b      	uxth	r3, r3
 8001214:	4a70      	ldr	r2, [pc, #448]	; (80013d8 <main+0x37c>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	b29b      	uxth	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	4b6e      	ldr	r3, [pc, #440]	; (80013dc <main+0x380>)
 8001222:	5c9a      	ldrb	r2, [r3, r2]
 8001224:	4b62      	ldr	r3, [pc, #392]	; (80013b0 <main+0x354>)
 8001226:	701a      	strb	r2, [r3, #0]
		  s7seg[1] = code7seg[(uint16_t)triac.nhietDo % 10] | SEGMENT_DOT;
 8001228:	4b67      	ldr	r3, [pc, #412]	; (80013c8 <main+0x36c>)
 800122a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fcdd 	bl	8000bf0 <__aeabi_d2uiz>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b67      	ldr	r3, [pc, #412]	; (80013d8 <main+0x37c>)
 800123c:	fba3 1302 	umull	r1, r3, r3, r2
 8001240:	08d9      	lsrs	r1, r3, #3
 8001242:	460b      	mov	r3, r1
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	4b62      	ldr	r3, [pc, #392]	; (80013dc <main+0x380>)
 8001252:	5c9b      	ldrb	r3, [r3, r2]
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b55      	ldr	r3, [pc, #340]	; (80013b0 <main+0x354>)
 800125c:	705a      	strb	r2, [r3, #1]
		  s7seg[2] = code7seg[(uint16_t)(triac.nhietDo * 10) % 10];
 800125e:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <main+0x36c>)
 8001260:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <main+0x384>)
 800126a:	f7ff f9e9 	bl	8000640 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fcbb 	bl	8000bf0 <__aeabi_d2uiz>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <main+0x37c>)
 8001280:	fba3 1302 	umull	r1, r3, r3, r2
 8001284:	08d9      	lsrs	r1, r3, #3
 8001286:	460b      	mov	r3, r1
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	b29b      	uxth	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4b51      	ldr	r3, [pc, #324]	; (80013dc <main+0x380>)
 8001296:	5c9a      	ldrb	r2, [r3, r2]
 8001298:	4b45      	ldr	r3, [pc, #276]	; (80013b0 <main+0x354>)
 800129a:	709a      	strb	r2, [r3, #2]
	  }

	  if(CHECKFLAG(FLAG_COMPLETE_RECEIVE_UART, flag)){
 800129c:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <main+0x388>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	109b      	asrs	r3, r3, #2
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00d      	beq.n	80012c8 <main+0x26c>
		  xuLyChuoiNhanVeTuLaptop();
 80012ac:	f000 fe8e 	bl	8001fcc <xuLyChuoiNhanVeTuLaptop>
		  memset(str, 0, sizeof(str));
 80012b0:	2232      	movs	r2, #50	; 0x32
 80012b2:	2100      	movs	r1, #0
 80012b4:	4846      	ldr	r0, [pc, #280]	; (80013d0 <main+0x374>)
 80012b6:	f006 fe77 	bl	8007fa8 <memset>
		  CLEARFLAG(FLAG_COMPLETE_RECEIVE_UART, flag);
 80012ba:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <main+0x388>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	f023 0304 	bic.w	r3, r3, #4
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <main+0x388>)
 80012c6:	701a      	strb	r2, [r3, #0]
	  }

	  if(!CHECKFLAG(FLAG_SETUP_SETPOINT, flag)){
 80012c8:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <main+0x388>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	f003 0310 	and.w	r3, r3, #16
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d169      	bne.n	80013a8 <main+0x34c>
		  encoderValue = __HAL_TIM_GetCounter(&htim1);
 80012d4:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <main+0x38c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <main+0x390>)
 80012de:	801a      	strh	r2, [r3, #0]
		  triac.giaTriDat = (double)encoderValue / 10;
 80012e0:	4b42      	ldr	r3, [pc, #264]	; (80013ec <main+0x390>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f930 	bl	800054c <__aeabi_ui2d>
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <main+0x384>)
 80012f2:	f7ff facf 	bl	8000894 <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4933      	ldr	r1, [pc, #204]	; (80013c8 <main+0x36c>)
 80012fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if(HAL_GetTick() - tBlink >= 300){
 8001300:	f001 fb3c 	bl	800297c <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800130e:	d34b      	bcc.n	80013a8 <main+0x34c>
				tBlink = HAL_GetTick();
 8001310:	f001 fb34 	bl	800297c <HAL_GetTick>
 8001314:	6038      	str	r0, [r7, #0]
				if(s7seg[3] == 0x00){
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <main+0x354>)
 8001318:	78db      	ldrb	r3, [r3, #3]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d139      	bne.n	8001392 <main+0x336>
					s7seg[3] = code7seg[encoderValue / 100];
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <main+0x390>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <main+0x394>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	b29b      	uxth	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <main+0x380>)
 8001332:	5c9a      	ldrb	r2, [r3, r2]
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <main+0x354>)
 8001336:	70da      	strb	r2, [r3, #3]
					s7seg[4] = code7seg[encoderValue / 10 % 10] | SEGMENT_DOT;
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <main+0x390>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	4a26      	ldr	r2, [pc, #152]	; (80013d8 <main+0x37c>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	08db      	lsrs	r3, r3, #3
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <main+0x37c>)
 800134a:	fba3 1302 	umull	r1, r3, r3, r2
 800134e:	08d9      	lsrs	r1, r3, #3
 8001350:	460b      	mov	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	b29b      	uxth	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <main+0x380>)
 8001360:	5c9b      	ldrb	r3, [r3, r2]
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <main+0x354>)
 800136a:	711a      	strb	r2, [r3, #4]
					s7seg[5] = code7seg[encoderValue % 10];
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <main+0x390>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <main+0x37c>)
 8001374:	fba3 1302 	umull	r1, r3, r3, r2
 8001378:	08d9      	lsrs	r1, r3, #3
 800137a:	460b      	mov	r3, r1
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b29b      	uxth	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <main+0x380>)
 800138a:	5c9a      	ldrb	r2, [r3, r2]
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <main+0x354>)
 800138e:	715a      	strb	r2, [r3, #5]
 8001390:	e00a      	b.n	80013a8 <main+0x34c>
				}
				else{
					s7seg[3] = s7seg[4] = s7seg[5] = 0x00;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <main+0x354>)
 8001394:	2200      	movs	r2, #0
 8001396:	715a      	strb	r2, [r3, #5]
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <main+0x354>)
 800139a:	795a      	ldrb	r2, [r3, #5]
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <main+0x354>)
 800139e:	711a      	strb	r2, [r3, #4]
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <main+0x354>)
 80013a2:	791a      	ldrb	r2, [r3, #4]
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <main+0x354>)
 80013a6:	70da      	strb	r2, [r3, #3]

	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Scan7seg();
 80013a8:	f000 fd64 	bl	8001e74 <Scan7seg>
	  if(HAL_GetTick() - t >= (uint32_t)(1000 * TG_LAY_MAU)){
 80013ac:	e6de      	b.n	800116c <main+0x110>
 80013ae:	bf00      	nop
 80013b0:	20000764 	.word	0x20000764
 80013b4:	20000214 	.word	0x20000214
 80013b8:	20000758 	.word	0x20000758
 80013bc:	20000010 	.word	0x20000010
 80013c0:	408f4000 	.word	0x408f4000
 80013c4:	20000748 	.word	0x20000748
 80013c8:	20000718 	.word	0x20000718
 80013cc:	0800c320 	.word	0x0800c320
 80013d0:	2000076c 	.word	0x2000076c
 80013d4:	200003dc 	.word	0x200003dc
 80013d8:	cccccccd 	.word	0xcccccccd
 80013dc:	0800c378 	.word	0x0800c378
 80013e0:	40240000 	.word	0x40240000
 80013e4:	2000076b 	.word	0x2000076b
 80013e8:	200002c0 	.word	0x200002c0
 80013ec:	200007ae 	.word	0x200007ae
 80013f0:	51eb851f 	.word	0x51eb851f

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	; 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fe:	2228      	movs	r2, #40	; 0x28
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f006 fdd0 	bl	8007fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001424:	2301      	movs	r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001432:	2301      	movs	r3, #1
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800143e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001440:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	4618      	mov	r0, r3
 800144c:	f004 fbf4 	bl	8005c38 <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001456:	f000 fe91 	bl	800217c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2102      	movs	r1, #2
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fe60 	bl	800613c <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001482:	f000 fe7b 	bl	800217c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001486:	2310      	movs	r3, #16
 8001488:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4618      	mov	r0, r3
 8001492:	f004 ffeb 	bl	800646c <HAL_RCCEx_PeriphCLKConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800149c:	f000 fe6e 	bl	800217c <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3750      	adds	r7, #80	; 0x50
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_I2C1_Init+0x50>)
 80014ae:	4a13      	ldr	r2, [pc, #76]	; (80014fc <MX_I2C1_Init+0x54>)
 80014b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_I2C1_Init+0x50>)
 80014b4:	4a12      	ldr	r2, [pc, #72]	; (8001500 <MX_I2C1_Init+0x58>)
 80014b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_I2C1_Init+0x50>)
 80014c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_I2C1_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_I2C1_Init+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <MX_I2C1_Init+0x50>)
 80014e6:	f001 fdd1 	bl	800308c <HAL_I2C_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014f0:	f000 fe44 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000214 	.word	0x20000214
 80014fc:	40005400 	.word	0x40005400
 8001500:	000186a0 	.word	0x000186a0

08001504 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_SPI1_Init+0x64>)
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <MX_SPI1_Init+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_SPI1_Init+0x64>)
 8001510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001514:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_SPI1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_SPI1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_SPI1_Init+0x64>)
 8001530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001534:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_SPI1_Init+0x64>)
 8001538:	2208      	movs	r2, #8
 800153a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_SPI1_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_SPI1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_SPI1_Init+0x64>)
 8001550:	220a      	movs	r2, #10
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_SPI1_Init+0x64>)
 8001556:	f005 f83f 	bl	80065d8 <HAL_SPI_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001560:	f000 fe0c 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000268 	.word	0x20000268
 800156c:	40013000 	.word	0x40013000

08001570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f006 fd12 	bl	8007fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <MX_TIM1_Init+0xa8>)
 800158e:	4a23      	ldr	r2, [pc, #140]	; (800161c <MX_TIM1_Init+0xac>)
 8001590:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <MX_TIM1_Init+0xa8>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MX_TIM1_Init+0xa8>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000 - 1;
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_TIM1_Init+0xa8>)
 80015a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_TIM1_Init+0xa8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_TIM1_Init+0xa8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_TIM1_Init+0xa8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015b8:	2303      	movs	r3, #3
 80015ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c0:	2301      	movs	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d0:	2301      	movs	r3, #1
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	4619      	mov	r1, r3
 80015e2:	480d      	ldr	r0, [pc, #52]	; (8001618 <MX_TIM1_Init+0xa8>)
 80015e4:	f005 fa4e 	bl	8006a84 <HAL_TIM_Encoder_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80015ee:	f000 fdc5 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <MX_TIM1_Init+0xa8>)
 8001600:	f005 fe9c 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800160a:	f000 fdb7 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002c0 	.word	0x200002c0
 800161c:	40012c00 	.word	0x40012c00

08001620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <MX_TIM2_Init+0x94>)
 800163e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001642:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_TIM2_Init+0x94>)
 8001646:	2247      	movs	r2, #71	; 0x47
 8001648:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_TIM2_Init+0x94>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_TIM2_Init+0x94>)
 8001652:	f242 7210 	movw	r2, #10000	; 0x2710
 8001656:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <MX_TIM2_Init+0x94>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_TIM2_Init+0x94>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <MX_TIM2_Init+0x94>)
 8001666:	f005 f93e 	bl	80068e6 <HAL_TIM_Base_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001670:	f000 fd84 	bl	800217c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	4619      	mov	r1, r3
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <MX_TIM2_Init+0x94>)
 8001682:	f005 fc57 	bl	8006f34 <HAL_TIM_ConfigClockSource>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800168c:	f000 fd76 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_TIM2_Init+0x94>)
 800169e:	f005 fe4d 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016a8:	f000 fd68 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000308 	.word	0x20000308

080016b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	463b      	mov	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_TIM4_Init+0x94>)
 80016d6:	4a1e      	ldr	r2, [pc, #120]	; (8001750 <MX_TIM4_Init+0x98>)
 80016d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72 - 1;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_TIM4_Init+0x94>)
 80016dc:	2247      	movs	r2, #71	; 0x47
 80016de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_TIM4_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <MX_TIM4_Init+0x94>)
 80016e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80016ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_TIM4_Init+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_TIM4_Init+0x94>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016fa:	4814      	ldr	r0, [pc, #80]	; (800174c <MX_TIM4_Init+0x94>)
 80016fc:	f005 f8f3 	bl	80068e6 <HAL_TIM_Base_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001706:	f000 fd39 	bl	800217c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4619      	mov	r1, r3
 8001716:	480d      	ldr	r0, [pc, #52]	; (800174c <MX_TIM4_Init+0x94>)
 8001718:	f005 fc0c 	bl	8006f34 <HAL_TIM_ConfigClockSource>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001722:	f000 fd2b 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800172e:	463b      	mov	r3, r7
 8001730:	4619      	mov	r1, r3
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <MX_TIM4_Init+0x94>)
 8001734:	f005 fe02 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800173e:	f000 fd1d 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000350 	.word	0x20000350
 8001750:	40000800 	.word	0x40000800

08001754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <MX_USART2_UART_Init+0x50>)
 800175c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_USART2_UART_Init+0x4c>)
 800178c:	f005 fe46 	bl	800741c <HAL_UART_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001796:	f000 fcf1 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000398 	.word	0x20000398
 80017a4:	40004400 	.word	0x40004400

080017a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <MX_USART3_UART_Init+0x50>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_USART3_UART_Init+0x4c>)
 80017e0:	f005 fe1c 	bl	800741c <HAL_UART_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017ea:	f000 fcc7 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200003dc 	.word	0x200003dc
 80017f8:	40004800 	.word	0x40004800

080017fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <MX_USB_PCD_Init+0x3c>)
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <MX_USB_PCD_Init+0x40>)
 8001804:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_USB_PCD_Init+0x3c>)
 8001808:	2208      	movs	r2, #8
 800180a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <MX_USB_PCD_Init+0x3c>)
 800180e:	2202      	movs	r2, #2
 8001810:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_USB_PCD_Init+0x3c>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MX_USB_PCD_Init+0x3c>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_USB_PCD_Init+0x3c>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_USB_PCD_Init+0x3c>)
 8001826:	f004 f8e3 	bl	80059f0 <HAL_PCD_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001830:	f000 fca4 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000420 	.word	0x20000420
 800183c:	40005c00 	.word	0x40005c00

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <MX_GPIO_Init+0x160>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <MX_GPIO_Init+0x160>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <MX_GPIO_Init+0x160>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800186c:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <MX_GPIO_Init+0x160>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a4b      	ldr	r2, [pc, #300]	; (80019a0 <MX_GPIO_Init+0x160>)
 8001872:	f043 0320 	orr.w	r3, r3, #32
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <MX_GPIO_Init+0x160>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <MX_GPIO_Init+0x160>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a45      	ldr	r2, [pc, #276]	; (80019a0 <MX_GPIO_Init+0x160>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <MX_GPIO_Init+0x160>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <MX_GPIO_Init+0x160>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a3f      	ldr	r2, [pc, #252]	; (80019a0 <MX_GPIO_Init+0x160>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <MX_GPIO_Init+0x160>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80018ba:	483a      	ldr	r0, [pc, #232]	; (80019a4 <MX_GPIO_Init+0x164>)
 80018bc:	f001 fbb6 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SER_Pin|OE_Pin|RCLK_Pin|SRCLK_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	21f0      	movs	r1, #240	; 0xf0
 80018c4:	4838      	ldr	r0, [pc, #224]	; (80019a8 <MX_GPIO_Init+0x168>)
 80018c6:	f001 fbb1 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIAC_GPIO_Port, TRIAC_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2102      	movs	r1, #2
 80018ce:	4837      	ldr	r0, [pc, #220]	; (80019ac <MX_GPIO_Init+0x16c>)
 80018d0:	f001 fbac 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80018d4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	4619      	mov	r1, r3
 80018ec:	482d      	ldr	r0, [pc, #180]	; (80019a4 <MX_GPIO_Init+0x164>)
 80018ee:	f001 fa19 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SER_Pin OE_Pin RCLK_Pin SRCLK_Pin */
  GPIO_InitStruct.Pin = SER_Pin|OE_Pin|RCLK_Pin|SRCLK_Pin;
 80018f2:	23f0      	movs	r3, #240	; 0xf0
 80018f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018f6:	2311      	movs	r3, #17
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	4619      	mov	r1, r3
 8001908:	4827      	ldr	r0, [pc, #156]	; (80019a8 <MX_GPIO_Init+0x168>)
 800190a:	f001 fa0b 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACDET_Pin */
  GPIO_InitStruct.Pin = ACDET_Pin;
 800190e:	2301      	movs	r3, #1
 8001910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_GPIO_Init+0x170>)
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACDET_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4619      	mov	r1, r3
 8001920:	4822      	ldr	r0, [pc, #136]	; (80019ac <MX_GPIO_Init+0x16c>)
 8001922:	f001 f9ff 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIAC_Pin */
  GPIO_InitStruct.Pin = TRIAC_Pin;
 8001926:	2302      	movs	r3, #2
 8001928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192a:	2301      	movs	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIAC_GPIO_Port, &GPIO_InitStruct);
 8001936:	f107 0310 	add.w	r3, r7, #16
 800193a:	4619      	mov	r1, r3
 800193c:	481b      	ldr	r0, [pc, #108]	; (80019ac <MX_GPIO_Init+0x16c>)
 800193e:	f001 f9f1 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MX_GPIO_Init+0x174>)
 800194a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4619      	mov	r1, r3
 8001956:	4815      	ldr	r0, [pc, #84]	; (80019ac <MX_GPIO_Init+0x16c>)
 8001958:	f001 f9e4 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : EnC_BT_Pin */
  GPIO_InitStruct.Pin = EnC_BT_Pin;
 800195c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_GPIO_Init+0x174>)
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EnC_BT_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4619      	mov	r1, r3
 8001970:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MX_GPIO_Init+0x168>)
 8001972:	f001 f9d7 	bl	8002d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	2006      	movs	r0, #6
 800197c:	f001 f8df 	bl	8002b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001980:	2006      	movs	r0, #6
 8001982:	f001 f8f8 	bl	8002b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2028      	movs	r0, #40	; 0x28
 800198c:	f001 f8d7 	bl	8002b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001990:	2028      	movs	r0, #40	; 0x28
 8001992:	f001 f8f0 	bl	8002b76 <HAL_NVIC_EnableIRQ>

}
 8001996:	bf00      	nop
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40011000 	.word	0x40011000
 80019a8:	40010800 	.word	0x40010800
 80019ac:	40010c00 	.word	0x40010c00
 80019b0:	10210000 	.word	0x10210000
 80019b4:	10110000 	.word	0x10110000

080019b8 <PID_Caculator>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef PID_Caculator(PID_type* x) {
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  static double alpha, beta, gamma;

  x->e = x->giaTriDat - x->nhietDo;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019cc:	f7fe fc80 	bl	80002d0 <__aeabi_dsub>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
  alpha = 2 * TG_LAY_MAU * KP + KI * TG_LAY_MAU * TG_LAY_MAU + 2 * KD;
 80019da:	4b95      	ldr	r3, [pc, #596]	; (8001c30 <PID_Caculator+0x278>)
 80019dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	f7fe fc76 	bl	80002d4 <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	4b90      	ldr	r3, [pc, #576]	; (8001c34 <PID_Caculator+0x27c>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fe23 	bl	8000640 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4614      	mov	r4, r2
 8001a00:	461d      	mov	r5, r3
 8001a02:	4b8d      	ldr	r3, [pc, #564]	; (8001c38 <PID_Caculator+0x280>)
 8001a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a08:	4b89      	ldr	r3, [pc, #548]	; (8001c30 <PID_Caculator+0x278>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fe17 	bl	8000640 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <PID_Caculator+0x278>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fe0e 	bl	8000640 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	f7fe fc52 	bl	80002d4 <__adddf3>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4614      	mov	r4, r2
 8001a36:	461d      	mov	r5, r3
 8001a38:	4b80      	ldr	r3, [pc, #512]	; (8001c3c <PID_Caculator+0x284>)
 8001a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	f7fe fc47 	bl	80002d4 <__adddf3>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fc41 	bl	80002d4 <__adddf3>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	497a      	ldr	r1, [pc, #488]	; (8001c40 <PID_Caculator+0x288>)
 8001a58:	e9c1 2300 	strd	r2, r3, [r1]
  beta = TG_LAY_MAU * TG_LAY_MAU * KI - 4 * KD - 2 * TG_LAY_MAU * KP;
 8001a5c:	4b74      	ldr	r3, [pc, #464]	; (8001c30 <PID_Caculator+0x278>)
 8001a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a62:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <PID_Caculator+0x278>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fdea 	bl	8000640 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	4b70      	ldr	r3, [pc, #448]	; (8001c38 <PID_Caculator+0x280>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fde1 	bl	8000640 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4614      	mov	r4, r2
 8001a84:	461d      	mov	r5, r3
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <PID_Caculator+0x284>)
 8001a88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b6c      	ldr	r3, [pc, #432]	; (8001c44 <PID_Caculator+0x28c>)
 8001a92:	f7fe fdd5 	bl	8000640 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fc17 	bl	80002d0 <__aeabi_dsub>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	4b61      	ldr	r3, [pc, #388]	; (8001c30 <PID_Caculator+0x278>)
 8001aac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	f7fe fc0e 	bl	80002d4 <__adddf3>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <PID_Caculator+0x27c>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fdbb 	bl	8000640 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fbfd 	bl	80002d0 <__aeabi_dsub>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	495b      	ldr	r1, [pc, #364]	; (8001c48 <PID_Caculator+0x290>)
 8001adc:	e9c1 2300 	strd	r2, r3, [r1]
  gamma = 2 * KD;
 8001ae0:	4b56      	ldr	r3, [pc, #344]	; (8001c3c <PID_Caculator+0x284>)
 8001ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	f7fe fbf3 	bl	80002d4 <__adddf3>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4956      	ldr	r1, [pc, #344]	; (8001c4c <PID_Caculator+0x294>)
 8001af4:	e9c1 2300 	strd	r2, r3, [r1]
  x->giaTriTinh_HienTai = (alpha * x->e + beta * x->e1 +
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001afe:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <PID_Caculator+0x288>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd9c 	bl	8000640 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001b16:	4b4c      	ldr	r3, [pc, #304]	; (8001c48 <PID_Caculator+0x290>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fd90 	bl	8000640 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4620      	mov	r0, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	f7fe fbd4 	bl	80002d4 <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	461d      	mov	r5, r3
		gamma * x->e2 + 2 * TG_LAY_MAU * x->giaTriTinh_Truoc) / (2 * TG_LAY_MAU);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <PID_Caculator+0x294>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fd7e 	bl	8000640 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
  x->giaTriTinh_HienTai = (alpha * x->e + beta * x->e1 +
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fbc2 	bl	80002d4 <__adddf3>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4614      	mov	r4, r2
 8001b56:	461d      	mov	r5, r3
		gamma * x->e2 + 2 * TG_LAY_MAU * x->giaTriTinh_Truoc) / (2 * TG_LAY_MAU);
 8001b58:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <PID_Caculator+0x278>)
 8001b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	f7fe fbb7 	bl	80002d4 <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b74:	f7fe fd64 	bl	8000640 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4629      	mov	r1, r5
 8001b80:	f7fe fba8 	bl	80002d4 <__adddf3>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4614      	mov	r4, r2
 8001b8a:	461d      	mov	r5, r3
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <PID_Caculator+0x278>)
 8001b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	f7fe fb9d 	bl	80002d4 <__adddf3>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	f7fe fe77 	bl	8000894 <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
  x->giaTriTinh_HienTai = (alpha * x->e + beta * x->e1 +
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	e9c1 2300 	strd	r2, r3, [r1]

  x->giaTriTinh_Truoc = x->giaTriTinh_HienTai;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  x->e2 = x->e1;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  x->e1 = x->e;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	e9c1 2308 	strd	r2, r3, [r1, #32]

  if (x->giaTriTinh_HienTai > 9)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <PID_Caculator+0x298>)
 8001be0:	f7fe ffbe 	bl	8000b60 <__aeabi_dcmpgt>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <PID_Caculator+0x240>
    x->giaTriTinh_HienTai = 9;
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <PID_Caculator+0x298>)
 8001bf2:	e9c1 2300 	strd	r2, r3, [r1]
 8001bf6:	e010      	b.n	8001c1a <PID_Caculator+0x262>
  else if (x->giaTriTinh_HienTai <= 1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <PID_Caculator+0x29c>)
 8001c04:	f7fe ff98 	bl	8000b38 <__aeabi_dcmple>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <PID_Caculator+0x262>
    x->giaTriTinh_HienTai = 1;
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <PID_Caculator+0x29c>)
 8001c16:	e9c1 2300 	strd	r2, r3, [r1]

  x->giaTriDieuKhien = x->giaTriTinh_HienTai; /***************/
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	e9c1 2304 	strd	r2, r3, [r1, #16]

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c30:	20000010 	.word	0x20000010
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	20000710 	.word	0x20000710
 8001c40:	200007b0 	.word	0x200007b0
 8001c44:	40100000 	.word	0x40100000
 8001c48:	200007b8 	.word	0x200007b8
 8001c4c:	200007c0 	.word	0x200007c0
 8001c50:	40220000 	.word	0x40220000
 8001c54:	3ff00000 	.word	0x3ff00000

08001c58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM4) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d120      	bne.n	8001cac <HAL_TIM_PeriodElapsedCallback+0x54>
	    if (CHECKFLAG(FLAG_ACDET_TRIGGER, flag)) {
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d019      	beq.n	8001cac <HAL_TIM_PeriodElapsedCallback+0x54>
	      CLEARFLAG(FLAG_ACDET_TRIGGER, flag);
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c84:	701a      	strb	r2, [r3, #0]
	      HAL_GPIO_WritePin(TRIAC_GPIO_Port, TRIAC_Pin, 1);
 8001c86:	2201      	movs	r2, #1
 8001c88:	2102      	movs	r1, #2
 8001c8a:	480c      	ldr	r0, [pc, #48]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c8c:	f001 f9ce 	bl	800302c <HAL_GPIO_WritePin>
	      for(uint8_t i = 0; i < 60; i++);
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e002      	b.n	8001c9c <HAL_TIM_PeriodElapsedCallback+0x44>
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b3b      	cmp	r3, #59	; 0x3b
 8001ca0:	d9f9      	bls.n	8001c96 <HAL_TIM_PeriodElapsedCallback+0x3e>
	      HAL_GPIO_WritePin(TRIAC_GPIO_Port, TRIAC_Pin, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ca8:	f001 f9c0 	bl	800302c <HAL_GPIO_WritePin>
	    }
	  }
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	2000076b 	.word	0x2000076b
 8001cbc:	40010c00 	.word	0x40010c00

08001cc0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ACDET_Pin){
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d119      	bne.n	8001d04 <HAL_GPIO_EXTI_Callback+0x44>
		SETFLAG(FLAG_ACDET_TRIGGER, flag);
 8001cd0:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x124>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x124>)
 8001cdc:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, (uint16_t)(triac.giaTriDieuKhien * 1000));
 8001cde:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x128>)
 8001ce0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <HAL_GPIO_EXTI_Callback+0x12c>)
 8001cea:	f7fe fca9 	bl	8000640 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe ff7b 	bl	8000bf0 <__aeabi_d2uiz>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x130>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
//		__HAL_TIM_SET_COUNTER(&htim4, 9000);
	}
	if(GPIO_Pin == EnC_BT_Pin){
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0a:	d167      	bne.n	8001ddc <HAL_GPIO_EXTI_Callback+0x11c>
		if(CHECKFLAG(FLAG_SETUP_SETPOINT, flag)){
 8001d0c:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x124>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	111b      	asrs	r3, r3, #4
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d019      	beq.n	8001d50 <HAL_GPIO_EXTI_Callback+0x90>
			HAL_TIM_Base_Stop_IT(&htim4);
 8001d1c:	4834      	ldr	r0, [pc, #208]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x130>)
 8001d1e:	f004 fe83 	bl	8006a28 <HAL_TIM_Base_Stop_IT>
			CLEARFLAG(FLAG_SETUP_SETPOINT, flag);
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x124>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	f023 0310 	bic.w	r3, r3, #16
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x124>)
 8001d2e:	701a      	strb	r2, [r3, #0]
			s7seg[3] = s7seg[4] = s7seg[5] = s7seg[6] = SEGMENT_G;
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d32:	2208      	movs	r2, #8
 8001d34:	719a      	strb	r2, [r3, #6]
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d38:	799a      	ldrb	r2, [r3, #6]
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d3c:	715a      	strb	r2, [r3, #5]
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d40:	795a      	ldrb	r2, [r3, #5]
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d44:	711a      	strb	r2, [r3, #4]
 8001d46:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d48:	791a      	ldrb	r2, [r3, #4]
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d4c:	70da      	strb	r2, [r3, #3]
			s7seg[5] = code7seg[encoderValue % 10];
			s7seg[6] = SEGMENT_A | SEGMENT_B | SEGMENT_F | SEGMENT_G;
			HAL_TIM_Base_Start_IT(&htim4);
		}
	}
}
 8001d4e:	e045      	b.n	8001ddc <HAL_GPIO_EXTI_Callback+0x11c>
			SETFLAG(FLAG_SETUP_SETPOINT, flag);
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x124>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	f043 0310 	orr.w	r3, r3, #16
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x124>)
 8001d5c:	701a      	strb	r2, [r3, #0]
			s7seg[3] = code7seg[encoderValue / 100];
 8001d5e:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x138>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x13c>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x140>)
 8001d72:	5c9a      	ldrb	r2, [r3, r2]
 8001d74:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001d76:	70da      	strb	r2, [r3, #3]
			s7seg[4] = code7seg[encoderValue / 10 % 10] | SEGMENT_DOT;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x138>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x144>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	08db      	lsrs	r3, r3, #3
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x144>)
 8001d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d8e:	08d9      	lsrs	r1, r3, #3
 8001d90:	460b      	mov	r3, r1
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x140>)
 8001da0:	5c9b      	ldrb	r3, [r3, r2]
 8001da2:	f043 0320 	orr.w	r3, r3, #32
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001daa:	711a      	strb	r2, [r3, #4]
			s7seg[5] = code7seg[encoderValue % 10];
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x138>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x144>)
 8001db4:	fba3 1302 	umull	r1, r3, r3, r2
 8001db8:	08d9      	lsrs	r1, r3, #3
 8001dba:	460b      	mov	r3, r1
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x140>)
 8001dca:	5c9a      	ldrb	r2, [r3, r2]
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001dce:	715a      	strb	r2, [r3, #5]
			s7seg[6] = SEGMENT_A | SEGMENT_B | SEGMENT_F | SEGMENT_G;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	719a      	strb	r2, [r3, #6]
			HAL_TIM_Base_Start_IT(&htim4);
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x130>)
 8001dd8:	f004 fdd4 	bl	8006984 <HAL_TIM_Base_Start_IT>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	2000076b 	.word	0x2000076b
 8001de8:	20000718 	.word	0x20000718
 8001dec:	408f4000 	.word	0x408f4000
 8001df0:	20000350 	.word	0x20000350
 8001df4:	20000764 	.word	0x20000764
 8001df8:	200007ae 	.word	0x200007ae
 8001dfc:	51eb851f 	.word	0x51eb851f
 8001e00:	0800c378 	.word	0x0800c378
 8001e04:	cccccccd 	.word	0xcccccccd

08001e08 <sendData74595>:

/*
 * brief: send data 16 bit to two 74595
 * */
void sendData74595(uint16_t data){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 16; i++) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e019      	b.n	8001e4c <sendData74595+0x44>
		HAL_GPIO_WritePin(SER_GPIO_Port, SER_Pin, (data >> i) & 0x01);
 8001e18:	88fa      	ldrh	r2, [r7, #6]
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	fa42 f303 	asr.w	r3, r2, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2110      	movs	r1, #16
 8001e2c:	4810      	ldr	r0, [pc, #64]	; (8001e70 <sendData74595+0x68>)
 8001e2e:	f001 f8fd 	bl	800302c <HAL_GPIO_WritePin>
		//nhịp 1 xung cạnh xuống đưa dữ liệu vào tầng lưu trữ
		HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	480e      	ldr	r0, [pc, #56]	; (8001e70 <sendData74595+0x68>)
 8001e38:	f001 f8f8 	bl	800302c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, 1);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	480b      	ldr	r0, [pc, #44]	; (8001e70 <sendData74595+0x68>)
 8001e42:	f001 f8f3 	bl	800302c <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 16; i++) {
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	d9e2      	bls.n	8001e18 <sendData74595+0x10>
	}
	HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2140      	movs	r1, #64	; 0x40
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <sendData74595+0x68>)
 8001e58:	f001 f8e8 	bl	800302c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin, 1);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2140      	movs	r1, #64	; 0x40
 8001e60:	4803      	ldr	r0, [pc, #12]	; (8001e70 <sendData74595+0x68>)
 8001e62:	f001 f8e3 	bl	800302c <HAL_GPIO_WritePin>
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40010800 	.word	0x40010800

08001e74 <Scan7seg>:
/*
 * brief: export data in S7seg variable
 * warning SHOUDLE BE CALL WHILE(TRUE)
 * */
void Scan7seg(){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	static uint32_t T_delay = 0;
	static uint8_t index = 0;
	if(index < 7){
 8001e78:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <Scan7seg+0x64>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b06      	cmp	r3, #6
 8001e7e:	d825      	bhi.n	8001ecc <Scan7seg+0x58>
		if(HAL_GetTick() - T_delay >= 1) {
 8001e80:	f000 fd7c 	bl	800297c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <Scan7seg+0x68>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d021      	beq.n	8001ed2 <Scan7seg+0x5e>
			T_delay = HAL_GetTick();
 8001e8e:	f000 fd75 	bl	800297c <HAL_GetTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a11      	ldr	r2, [pc, #68]	; (8001edc <Scan7seg+0x68>)
 8001e96:	6013      	str	r3, [r2, #0]
			sendData74595((0x0100 << index) | s7seg[index]);
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <Scan7seg+0x64>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <Scan7seg+0x64>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <Scan7seg+0x6c>)
 8001eae:	5c5b      	ldrb	r3, [r3, r1]
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ffa5 	bl	8001e08 <sendData74595>
			index++;
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <Scan7seg+0x64>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <Scan7seg+0x64>)
 8001ec8:	701a      	strb	r2, [r3, #0]
		}
	}
	else{
		index = 0;
	}
}
 8001eca:	e002      	b.n	8001ed2 <Scan7seg+0x5e>
		index = 0;
 8001ecc:	4b02      	ldr	r3, [pc, #8]	; (8001ed8 <Scan7seg+0x64>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200007c8 	.word	0x200007c8
 8001edc:	200007cc 	.word	0x200007cc
 8001ee0:	20000764 	.word	0x20000764

08001ee4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	static uint8_t i = 0;
	if(huart->Instance == huart3.Instance){
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <HAL_UART_RxCpltCallback+0xcc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d11e      	bne.n	8001f36 <HAL_UART_RxCpltCallback+0x52>
		HAL_UART_Receive_IT(&huart3, Get_rx_str, 1);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	492e      	ldr	r1, [pc, #184]	; (8001fb4 <HAL_UART_RxCpltCallback+0xd0>)
 8001efc:	482c      	ldr	r0, [pc, #176]	; (8001fb0 <HAL_UART_RxCpltCallback+0xcc>)
 8001efe:	f005 fb6c 	bl	80075da <HAL_UART_Receive_IT>
		if(Get_rx_str[0] == 'x'){
 8001f02:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <HAL_UART_RxCpltCallback+0xd0>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b78      	cmp	r3, #120	; 0x78
 8001f08:	d10a      	bne.n	8001f20 <HAL_UART_RxCpltCallback+0x3c>
			SETFLAG(FLAG_COMPLETE_RECEIVE_UART, flag);
 8001f0a:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_UART_RxCpltCallback+0xd4>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_UART_RxCpltCallback+0xd4>)
 8001f16:	701a      	strb	r2, [r3, #0]
			i = 0;
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <HAL_UART_RxCpltCallback+0xd8>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e00a      	b.n	8001f36 <HAL_UART_RxCpltCallback+0x52>
		}
		else{
			rx_str_uart3[i++] = Get_rx_str[0];
 8001f20:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_UART_RxCpltCallback+0xd8>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	b2d1      	uxtb	r1, r2
 8001f28:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <HAL_UART_RxCpltCallback+0xd8>)
 8001f2a:	7011      	strb	r1, [r2, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <HAL_UART_RxCpltCallback+0xd0>)
 8001f30:	7819      	ldrb	r1, [r3, #0]
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <HAL_UART_RxCpltCallback+0xdc>)
 8001f34:	5499      	strb	r1, [r3, r2]
		}
	}
	if(huart->Instance == huart2.Instance){
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_UART_RxCpltCallback+0xe0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d130      	bne.n	8001fa4 <HAL_UART_RxCpltCallback+0xc0>
		HAL_UART_Receive_IT(&huart2, Get_rx_str, 1);
 8001f42:	2201      	movs	r2, #1
 8001f44:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <HAL_UART_RxCpltCallback+0xd0>)
 8001f46:	481f      	ldr	r0, [pc, #124]	; (8001fc4 <HAL_UART_RxCpltCallback+0xe0>)
 8001f48:	f005 fb47 	bl	80075da <HAL_UART_Receive_IT>
		switch(Get_rx_str[0]){
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_UART_RxCpltCallback+0xd0>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3b61      	subs	r3, #97	; 0x61
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d827      	bhi.n	8001fa6 <HAL_UART_RxCpltCallback+0xc2>
 8001f56:	a201      	add	r2, pc, #4	; (adr r2, 8001f5c <HAL_UART_RxCpltCallback+0x78>)
 8001f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5c:	08001f6d 	.word	0x08001f6d
 8001f60:	08001f7b 	.word	0x08001f7b
 8001f64:	08001f89 	.word	0x08001f89
 8001f68:	08001f97 	.word	0x08001f97
		case 'a':
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f72:	4815      	ldr	r0, [pc, #84]	; (8001fc8 <HAL_UART_RxCpltCallback+0xe4>)
 8001f74:	f001 f85a 	bl	800302c <HAL_GPIO_WritePin>
			break;
 8001f78:	e015      	b.n	8001fa6 <HAL_UART_RxCpltCallback+0xc2>
		case 'b':
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f80:	4811      	ldr	r0, [pc, #68]	; (8001fc8 <HAL_UART_RxCpltCallback+0xe4>)
 8001f82:	f001 f853 	bl	800302c <HAL_GPIO_WritePin>
			break;
 8001f86:	e00e      	b.n	8001fa6 <HAL_UART_RxCpltCallback+0xc2>
		case 'c':
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f8e:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <HAL_UART_RxCpltCallback+0xe4>)
 8001f90:	f001 f84c 	bl	800302c <HAL_GPIO_WritePin>
			break;
 8001f94:	e007      	b.n	8001fa6 <HAL_UART_RxCpltCallback+0xc2>
		case 'd':
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f9c:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <HAL_UART_RxCpltCallback+0xe4>)
 8001f9e:	f001 f845 	bl	800302c <HAL_GPIO_WritePin>
		}
	}
}
 8001fa2:	e000      	b.n	8001fa6 <HAL_UART_RxCpltCallback+0xc2>
	}
 8001fa4:	bf00      	nop
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200003dc 	.word	0x200003dc
 8001fb4:	200007ac 	.word	0x200007ac
 8001fb8:	2000076b 	.word	0x2000076b
 8001fbc:	200007d0 	.word	0x200007d0
 8001fc0:	200007a0 	.word	0x200007a0
 8001fc4:	20000398 	.word	0x20000398
 8001fc8:	40011000 	.word	0x40011000

08001fcc <xuLyChuoiNhanVeTuLaptop>:

void xuLyChuoiNhanVeTuLaptop(){
 8001fcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fd0:	b088      	sub	sp, #32
 8001fd2:	af06      	add	r7, sp, #24
	double val = atof(rx_str_uart3 + 2);
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <xuLyChuoiNhanVeTuLaptop+0x178>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 ffb8 	bl	8007f4c <atof>
 8001fdc:	e9c7 0100 	strd	r0, r1, [r7]

	if(rx_str_uart3[0] == 'k'){
 8001fe0:	4b59      	ldr	r3, [pc, #356]	; (8002148 <xuLyChuoiNhanVeTuLaptop+0x17c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b6b      	cmp	r3, #107	; 0x6b
 8001fe6:	d11d      	bne.n	8002024 <xuLyChuoiNhanVeTuLaptop+0x58>
		if(rx_str_uart3[1] == 'p'){
 8001fe8:	4b57      	ldr	r3, [pc, #348]	; (8002148 <xuLyChuoiNhanVeTuLaptop+0x17c>)
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	2b70      	cmp	r3, #112	; 0x70
 8001fee:	d105      	bne.n	8001ffc <xuLyChuoiNhanVeTuLaptop+0x30>
			KP = val;
 8001ff0:	4956      	ldr	r1, [pc, #344]	; (800214c <xuLyChuoiNhanVeTuLaptop+0x180>)
 8001ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ff6:	e9c1 2300 	strd	r2, r3, [r1]
 8001ffa:	e080      	b.n	80020fe <xuLyChuoiNhanVeTuLaptop+0x132>
		}
		else if(rx_str_uart3[1] == 'i'){
 8001ffc:	4b52      	ldr	r3, [pc, #328]	; (8002148 <xuLyChuoiNhanVeTuLaptop+0x17c>)
 8001ffe:	785b      	ldrb	r3, [r3, #1]
 8002000:	2b69      	cmp	r3, #105	; 0x69
 8002002:	d105      	bne.n	8002010 <xuLyChuoiNhanVeTuLaptop+0x44>
			KI = val;
 8002004:	4952      	ldr	r1, [pc, #328]	; (8002150 <xuLyChuoiNhanVeTuLaptop+0x184>)
 8002006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800200a:	e9c1 2300 	strd	r2, r3, [r1]
 800200e:	e076      	b.n	80020fe <xuLyChuoiNhanVeTuLaptop+0x132>
		}
		else if(rx_str_uart3[1] == 'd'){
 8002010:	4b4d      	ldr	r3, [pc, #308]	; (8002148 <xuLyChuoiNhanVeTuLaptop+0x17c>)
 8002012:	785b      	ldrb	r3, [r3, #1]
 8002014:	2b64      	cmp	r3, #100	; 0x64
 8002016:	d172      	bne.n	80020fe <xuLyChuoiNhanVeTuLaptop+0x132>
			KD = val;
 8002018:	494e      	ldr	r1, [pc, #312]	; (8002154 <xuLyChuoiNhanVeTuLaptop+0x188>)
 800201a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800201e:	e9c1 2300 	strd	r2, r3, [r1]
 8002022:	e06c      	b.n	80020fe <xuLyChuoiNhanVeTuLaptop+0x132>
		}
	}
	else if(rx_str_uart3[0] == 's' && rx_str_uart3[1] == 'p'){
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <xuLyChuoiNhanVeTuLaptop+0x17c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b73      	cmp	r3, #115	; 0x73
 800202a:	d15b      	bne.n	80020e4 <xuLyChuoiNhanVeTuLaptop+0x118>
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <xuLyChuoiNhanVeTuLaptop+0x17c>)
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	2b70      	cmp	r3, #112	; 0x70
 8002032:	d157      	bne.n	80020e4 <xuLyChuoiNhanVeTuLaptop+0x118>
		triac.giaTriDat = val;
 8002034:	4948      	ldr	r1, [pc, #288]	; (8002158 <xuLyChuoiNhanVeTuLaptop+0x18c>)
 8002036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800203a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		//	triac.giaTriDat = atof(rx_str);
		s7seg[3] = code7seg[(uint8_t)(triac.giaTriDat / 10)];
 800203e:	4b46      	ldr	r3, [pc, #280]	; (8002158 <xuLyChuoiNhanVeTuLaptop+0x18c>)
 8002040:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b44      	ldr	r3, [pc, #272]	; (800215c <xuLyChuoiNhanVeTuLaptop+0x190>)
 800204a:	f7fe fc23 	bl	8000894 <__aeabi_ddiv>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fdcb 	bl	8000bf0 <__aeabi_d2uiz>
 800205a:	4603      	mov	r3, r0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <xuLyChuoiNhanVeTuLaptop+0x194>)
 8002062:	5c9a      	ldrb	r2, [r3, r2]
 8002064:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <xuLyChuoiNhanVeTuLaptop+0x198>)
 8002066:	70da      	strb	r2, [r3, #3]
		s7seg[4] = code7seg[(uint8_t)triac.giaTriDat % 10] | SEGMENT_DOT;
 8002068:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <xuLyChuoiNhanVeTuLaptop+0x18c>)
 800206a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fdbd 	bl	8000bf0 <__aeabi_d2uiz>
 8002076:	4603      	mov	r3, r0
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <xuLyChuoiNhanVeTuLaptop+0x19c>)
 800207c:	fba3 1302 	umull	r1, r3, r3, r2
 8002080:	08d9      	lsrs	r1, r3, #3
 8002082:	460b      	mov	r3, r1
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	4b33      	ldr	r3, [pc, #204]	; (8002160 <xuLyChuoiNhanVeTuLaptop+0x194>)
 8002092:	5c9b      	ldrb	r3, [r3, r2]
 8002094:	f043 0320 	orr.w	r3, r3, #32
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b32      	ldr	r3, [pc, #200]	; (8002164 <xuLyChuoiNhanVeTuLaptop+0x198>)
 800209c:	711a      	strb	r2, [r3, #4]
		s7seg[5] = code7seg[(uint16_t)(triac.giaTriDat * 10) % 10];
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <xuLyChuoiNhanVeTuLaptop+0x18c>)
 80020a0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <xuLyChuoiNhanVeTuLaptop+0x190>)
 80020aa:	f7fe fac9 	bl	8000640 <__aeabi_dmul>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fd9b 	bl	8000bf0 <__aeabi_d2uiz>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <xuLyChuoiNhanVeTuLaptop+0x19c>)
 80020c0:	fba3 1302 	umull	r1, r3, r3, r2
 80020c4:	08d9      	lsrs	r1, r3, #3
 80020c6:	460b      	mov	r3, r1
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <xuLyChuoiNhanVeTuLaptop+0x194>)
 80020d6:	5c9a      	ldrb	r2, [r3, r2]
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <xuLyChuoiNhanVeTuLaptop+0x198>)
 80020da:	715a      	strb	r2, [r3, #5]
		s7seg[6] = SEGMENT_G | SEGMENT_E | SEGMENT_D;
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <xuLyChuoiNhanVeTuLaptop+0x198>)
 80020de:	22c8      	movs	r2, #200	; 0xc8
 80020e0:	719a      	strb	r2, [r3, #6]
 80020e2:	e00c      	b.n	80020fe <xuLyChuoiNhanVeTuLaptop+0x132>

	}
	else if(rx_str_uart3[0] == 't' && rx_str_uart3[1] == 'g'){
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <xuLyChuoiNhanVeTuLaptop+0x17c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b74      	cmp	r3, #116	; 0x74
 80020ea:	d108      	bne.n	80020fe <xuLyChuoiNhanVeTuLaptop+0x132>
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <xuLyChuoiNhanVeTuLaptop+0x17c>)
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b67      	cmp	r3, #103	; 0x67
 80020f2:	d104      	bne.n	80020fe <xuLyChuoiNhanVeTuLaptop+0x132>
		TG_LAY_MAU = val;
 80020f4:	491d      	ldr	r1, [pc, #116]	; (800216c <xuLyChuoiNhanVeTuLaptop+0x1a0>)
 80020f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
	}
	sprintf(str, "\n\n%lf, %lf, %lf, %lf\n\n", KP, KI, KD, TG_LAY_MAU);
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <xuLyChuoiNhanVeTuLaptop+0x180>)
 8002100:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <xuLyChuoiNhanVeTuLaptop+0x184>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	4912      	ldr	r1, [pc, #72]	; (8002154 <xuLyChuoiNhanVeTuLaptop+0x188>)
 800210c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002110:	4c16      	ldr	r4, [pc, #88]	; (800216c <xuLyChuoiNhanVeTuLaptop+0x1a0>)
 8002112:	cc30      	ldmia	r4, {r4, r5}
 8002114:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800211c:	e9cd 2300 	strd	r2, r3, [sp]
 8002120:	4642      	mov	r2, r8
 8002122:	464b      	mov	r3, r9
 8002124:	4912      	ldr	r1, [pc, #72]	; (8002170 <xuLyChuoiNhanVeTuLaptop+0x1a4>)
 8002126:	4813      	ldr	r0, [pc, #76]	; (8002174 <xuLyChuoiNhanVeTuLaptop+0x1a8>)
 8002128:	f006 fba6 	bl	8008878 <siprintf>
	HAL_UART_Transmit(&huart3, str, sizeof(str), 10000);
 800212c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002130:	2232      	movs	r2, #50	; 0x32
 8002132:	4910      	ldr	r1, [pc, #64]	; (8002174 <xuLyChuoiNhanVeTuLaptop+0x1a8>)
 8002134:	4810      	ldr	r0, [pc, #64]	; (8002178 <xuLyChuoiNhanVeTuLaptop+0x1ac>)
 8002136:	f005 f9be 	bl	80074b6 <HAL_UART_Transmit>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002144:	200007a2 	.word	0x200007a2
 8002148:	200007a0 	.word	0x200007a0
 800214c:	20000000 	.word	0x20000000
 8002150:	20000008 	.word	0x20000008
 8002154:	20000710 	.word	0x20000710
 8002158:	20000718 	.word	0x20000718
 800215c:	40240000 	.word	0x40240000
 8002160:	0800c378 	.word	0x0800c378
 8002164:	20000764 	.word	0x20000764
 8002168:	cccccccd 	.word	0xcccccccd
 800216c:	20000010 	.word	0x20000010
 8002170:	0800c350 	.word	0x0800c350
 8002174:	2000076c 	.word	0x2000076c
 8002178:	200003dc 	.word	0x200003dc

0800217c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002180:	b672      	cpsid	i
}
 8002182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002184:	e7fe      	b.n	8002184 <Error_Handler+0x8>
	...

08002188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800218e:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_MspInit+0x6c>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <HAL_MspInit+0x6c>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6193      	str	r3, [r2, #24]
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_MspInit+0x6c>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_MspInit+0x6c>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_MspInit+0x6c>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_MspInit+0x6c>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 fcbb 	bl	8002b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80021c8:	2001      	movs	r0, #1
 80021ca:	f000 fcd4 	bl	8002b76 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_MspInit+0x70>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_MspInit+0x70>)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40010000 	.word	0x40010000

080021fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a21      	ldr	r2, [pc, #132]	; (800229c <HAL_I2C_MspInit+0xa0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d13a      	bne.n	8002292 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_I2C_MspInit+0xa4>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_I2C_MspInit+0xa4>)
 8002222:	f043 0308 	orr.w	r3, r3, #8
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_I2C_MspInit+0xa4>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002234:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223a:	2312      	movs	r3, #18
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4816      	ldr	r0, [pc, #88]	; (80022a4 <HAL_I2C_MspInit+0xa8>)
 800224a:	f000 fd6b 	bl	8002d24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_I2C_MspInit+0xac>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	f043 0302 	orr.w	r3, r3, #2
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
 8002264:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <HAL_I2C_MspInit+0xac>)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_I2C_MspInit+0xa4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <HAL_I2C_MspInit+0xa4>)
 8002270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_I2C_MspInit+0xa4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	201f      	movs	r0, #31
 8002288:	f000 fc59 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800228c:	201f      	movs	r0, #31
 800228e:	f000 fc72 	bl	8002b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002292:	bf00      	nop
 8002294:	3728      	adds	r7, #40	; 0x28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40005400 	.word	0x40005400
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010c00 	.word	0x40010c00
 80022a8:	40010000 	.word	0x40010000

080022ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a26      	ldr	r2, [pc, #152]	; (8002360 <HAL_SPI_MspInit+0xb4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d145      	bne.n	8002358 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_SPI_MspInit+0xb8>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_SPI_MspInit+0xb8>)
 80022d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <HAL_SPI_MspInit+0xb8>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <HAL_SPI_MspInit+0xb8>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <HAL_SPI_MspInit+0xb8>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_SPI_MspInit+0xb8>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80022fc:	2328      	movs	r3, #40	; 0x28
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	4816      	ldr	r0, [pc, #88]	; (8002368 <HAL_SPI_MspInit+0xbc>)
 8002310:	f000 fd08 	bl	8002d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002314:	2310      	movs	r3, #16
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4810      	ldr	r0, [pc, #64]	; (8002368 <HAL_SPI_MspInit+0xbc>)
 8002328:	f000 fcfc 	bl	8002d24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_SPI_MspInit+0xc0>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_SPI_MspInit+0xc0>)
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	2023      	movs	r0, #35	; 0x23
 800234e:	f000 fbf6 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002352:	2023      	movs	r0, #35	; 0x23
 8002354:	f000 fc0f 	bl	8002b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40013000 	.word	0x40013000
 8002364:	40021000 	.word	0x40021000
 8002368:	40010c00 	.word	0x40010c00
 800236c:	40010000 	.word	0x40010000

08002370 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_TIM_Encoder_MspInit+0x84>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d12c      	bne.n	80023ea <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_TIM_Encoder_MspInit+0x88>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4619      	mov	r1, r3
 80023d4:	4809      	ldr	r0, [pc, #36]	; (80023fc <HAL_TIM_Encoder_MspInit+0x8c>)
 80023d6:	f000 fca5 	bl	8002d24 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	2019      	movs	r0, #25
 80023e0:	f000 fbad 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80023e4:	2019      	movs	r0, #25
 80023e6:	f000 fbc6 	bl	8002b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023ea:	bf00      	nop
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40010800 	.word	0x40010800

08002400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002410:	d114      	bne.n	800243c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002412:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_TIM_Base_MspInit+0x78>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a18      	ldr	r2, [pc, #96]	; (8002478 <HAL_TIM_Base_MspInit+0x78>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_TIM_Base_MspInit+0x78>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	201c      	movs	r0, #28
 8002430:	f000 fb85 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002434:	201c      	movs	r0, #28
 8002436:	f000 fb9e 	bl	8002b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800243a:	e018      	b.n	800246e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0e      	ldr	r2, [pc, #56]	; (800247c <HAL_TIM_Base_MspInit+0x7c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d113      	bne.n	800246e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <HAL_TIM_Base_MspInit+0x78>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <HAL_TIM_Base_MspInit+0x78>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_TIM_Base_MspInit+0x78>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	201e      	movs	r0, #30
 8002464:	f000 fb6b 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002468:	201e      	movs	r0, #30
 800246a:	f000 fb84 	bl	8002b76 <HAL_NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	40000800 	.word	0x40000800

08002480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0318 	add.w	r3, r7, #24
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <HAL_UART_MspInit+0x118>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d138      	bne.n	8002512 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a0:	4b3e      	ldr	r3, [pc, #248]	; (800259c <HAL_UART_MspInit+0x11c>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	4a3d      	ldr	r2, [pc, #244]	; (800259c <HAL_UART_MspInit+0x11c>)
 80024a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024aa:	61d3      	str	r3, [r2, #28]
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <HAL_UART_MspInit+0x11c>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b8:	4b38      	ldr	r3, [pc, #224]	; (800259c <HAL_UART_MspInit+0x11c>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a37      	ldr	r2, [pc, #220]	; (800259c <HAL_UART_MspInit+0x11c>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b35      	ldr	r3, [pc, #212]	; (800259c <HAL_UART_MspInit+0x11c>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024d0:	2304      	movs	r3, #4
 80024d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 0318 	add.w	r3, r7, #24
 80024e0:	4619      	mov	r1, r3
 80024e2:	482f      	ldr	r0, [pc, #188]	; (80025a0 <HAL_UART_MspInit+0x120>)
 80024e4:	f000 fc1e 	bl	8002d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024e8:	2308      	movs	r3, #8
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	f107 0318 	add.w	r3, r7, #24
 80024f8:	4619      	mov	r1, r3
 80024fa:	4829      	ldr	r0, [pc, #164]	; (80025a0 <HAL_UART_MspInit+0x120>)
 80024fc:	f000 fc12 	bl	8002d24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2100      	movs	r1, #0
 8002504:	2026      	movs	r0, #38	; 0x26
 8002506:	f000 fb1a 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800250a:	2026      	movs	r0, #38	; 0x26
 800250c:	f000 fb33 	bl	8002b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002510:	e03e      	b.n	8002590 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <HAL_UART_MspInit+0x124>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d139      	bne.n	8002590 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <HAL_UART_MspInit+0x11c>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	4a1e      	ldr	r2, [pc, #120]	; (800259c <HAL_UART_MspInit+0x11c>)
 8002522:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002526:	61d3      	str	r3, [r2, #28]
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <HAL_UART_MspInit+0x11c>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_UART_MspInit+0x11c>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a18      	ldr	r2, [pc, #96]	; (800259c <HAL_UART_MspInit+0x11c>)
 800253a:	f043 0308 	orr.w	r3, r3, #8
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_UART_MspInit+0x11c>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800254c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	f107 0318 	add.w	r3, r7, #24
 800255e:	4619      	mov	r1, r3
 8002560:	4811      	ldr	r0, [pc, #68]	; (80025a8 <HAL_UART_MspInit+0x128>)
 8002562:	f000 fbdf 	bl	8002d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002566:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800256a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	f107 0318 	add.w	r3, r7, #24
 8002578:	4619      	mov	r1, r3
 800257a:	480b      	ldr	r0, [pc, #44]	; (80025a8 <HAL_UART_MspInit+0x128>)
 800257c:	f000 fbd2 	bl	8002d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	2027      	movs	r0, #39	; 0x27
 8002586:	f000 fada 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800258a:	2027      	movs	r0, #39	; 0x27
 800258c:	f000 faf3 	bl	8002b76 <HAL_NVIC_EnableIRQ>
}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	; 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40004400 	.word	0x40004400
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010800 	.word	0x40010800
 80025a4:	40004800 	.word	0x40004800
 80025a8:	40010c00 	.word	0x40010c00

080025ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_PCD_MspInit+0x34>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10b      	bne.n	80025d6 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_PCD_MspInit+0x38>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <HAL_PCD_MspInit+0x38>)
 80025c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025c8:	61d3      	str	r3, [r2, #28]
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_PCD_MspInit+0x38>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	40005c00 	.word	0x40005c00
 80025e4:	40021000 	.word	0x40021000

080025e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <NMI_Handler+0x4>

080025ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <MemManage_Handler+0x4>

080025fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <UsageFault_Handler+0x4>

08002606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800262e:	f000 f993 	bl	8002958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}

08002636 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800263a:	f003 fae5 	bl	8005c08 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}

08002642 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACDET_Pin);
 8002646:	2001      	movs	r0, #1
 8002648:	f000 fd08 	bl	800305c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}

08002650 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <TIM1_UP_IRQHandler+0x10>)
 8002656:	f004 fb65 	bl	8006d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200002c0 	.word	0x200002c0

08002664 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <TIM2_IRQHandler+0x10>)
 800266a:	f004 fb5b 	bl	8006d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000308 	.word	0x20000308

08002678 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TIM4_IRQHandler+0x10>)
 800267e:	f004 fb51 	bl	8006d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000350 	.word	0x20000350

0800268c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <I2C1_EV_IRQHandler+0x10>)
 8002692:	f001 facb 	bl	8003c2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000214 	.word	0x20000214

080026a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <SPI1_IRQHandler+0x10>)
 80026a6:	f004 f81b 	bl	80066e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000268 	.word	0x20000268

080026b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <USART2_IRQHandler+0x10>)
 80026ba:	f004 ffbf 	bl	800763c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000398 	.word	0x20000398

080026c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026cc:	4802      	ldr	r0, [pc, #8]	; (80026d8 <USART3_IRQHandler+0x10>)
 80026ce:	f004 ffb5 	bl	800763c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200003dc 	.word	0x200003dc

080026dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EnC_BT_Pin);
 80026e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026e4:	f000 fcba 	bl	800305c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80026e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80026ec:	f000 fcb6 	bl	800305c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return 1;
 80026f8:	2301      	movs	r3, #1
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <_kill>:

int _kill(int pid, int sig)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800270c:	f005 fc22 	bl	8007f54 <__errno>
 8002710:	4603      	mov	r3, r0
 8002712:	2216      	movs	r2, #22
 8002714:	601a      	str	r2, [r3, #0]
  return -1;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_exit>:

void _exit (int status)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800272a:	f04f 31ff 	mov.w	r1, #4294967295
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffe7 	bl	8002702 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002734:	e7fe      	b.n	8002734 <_exit+0x12>

08002736 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e00a      	b.n	800275e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002748:	f3af 8000 	nop.w
 800274c:	4601      	mov	r1, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	60ba      	str	r2, [r7, #8]
 8002754:	b2ca      	uxtb	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3301      	adds	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	dbf0      	blt.n	8002748 <_read+0x12>
  }

  return len;
 8002766:	687b      	ldr	r3, [r7, #4]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e009      	b.n	8002796 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	60ba      	str	r2, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	3301      	adds	r3, #1
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	dbf1      	blt.n	8002782 <_write+0x12>
  }
  return len;
 800279e:	687b      	ldr	r3, [r7, #4]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_close>:

int _close(int file)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ce:	605a      	str	r2, [r3, #4]
  return 0;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <_isatty>:

int _isatty(int file)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002810:	4a14      	ldr	r2, [pc, #80]	; (8002864 <_sbrk+0x5c>)
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <_sbrk+0x60>)
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <_sbrk+0x64>)
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <_sbrk+0x68>)
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	429a      	cmp	r2, r3
 8002836:	d207      	bcs.n	8002848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002838:	f005 fb8c 	bl	8007f54 <__errno>
 800283c:	4603      	mov	r3, r0
 800283e:	220c      	movs	r2, #12
 8002840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	e009      	b.n	800285c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <_sbrk+0x64>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <_sbrk+0x64>)
 8002858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20005000 	.word	0x20005000
 8002868:	00000400 	.word	0x00000400
 800286c:	200007d4 	.word	0x200007d4
 8002870:	200007f0 	.word	0x200007f0

08002874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002882:	490d      	ldr	r1, [pc, #52]	; (80028b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002888:	e002      	b.n	8002890 <LoopCopyDataInit>

0800288a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800288c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288e:	3304      	adds	r3, #4

08002890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002894:	d3f9      	bcc.n	800288a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002898:	4c0a      	ldr	r4, [pc, #40]	; (80028c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800289c:	e001      	b.n	80028a2 <LoopFillZerobss>

0800289e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a0:	3204      	adds	r2, #4

080028a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a4:	d3fb      	bcc.n	800289e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028a6:	f7ff ffe5 	bl	8002874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028aa:	f005 fb59 	bl	8007f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ae:	f7fe fbd5 	bl	800105c <main>
  bx lr
 80028b2:	4770      	bx	lr
  ldr r0, =_sdata
 80028b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80028bc:	0800c844 	.word	0x0800c844
  ldr r2, =_sbss
 80028c0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80028c4:	200007ec 	.word	0x200007ec

080028c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028c8:	e7fe      	b.n	80028c8 <ADC1_2_IRQHandler>
	...

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_Init+0x28>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <HAL_Init+0x28>)
 80028d6:	f043 0310 	orr.w	r3, r3, #16
 80028da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028dc:	2003      	movs	r0, #3
 80028de:	f000 f923 	bl	8002b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e2:	200f      	movs	r0, #15
 80028e4:	f000 f808 	bl	80028f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e8:	f7ff fc4e 	bl	8002188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000

080028f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x54>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_InitTick+0x58>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f93b 	bl	8002b92 <HAL_SYSTICK_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00e      	b.n	8002944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d80a      	bhi.n	8002942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f000 f903 	bl	8002b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002938:	4a06      	ldr	r2, [pc, #24]	; (8002954 <HAL_InitTick+0x5c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000018 	.word	0x20000018
 8002950:	20000020 	.word	0x20000020
 8002954:	2000001c 	.word	0x2000001c

08002958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_IncTick+0x1c>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_IncTick+0x20>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <HAL_IncTick+0x20>)
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000020 	.word	0x20000020
 8002978:	200007d8 	.word	0x200007d8

0800297c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <HAL_GetTick+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	200007d8 	.word	0x200007d8

08002990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c2:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	60d3      	str	r3, [r2, #12]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <__NVIC_GetPriorityGrouping+0x18>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	f003 0307 	and.w	r3, r3, #7
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	db0b      	blt.n	8002a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	4906      	ldr	r1, [pc, #24]	; (8002a28 <__NVIC_EnableIRQ+0x34>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	2001      	movs	r0, #1
 8002a16:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db0a      	blt.n	8002a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	490c      	ldr	r1, [pc, #48]	; (8002a78 <__NVIC_SetPriority+0x4c>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a54:	e00a      	b.n	8002a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4908      	ldr	r1, [pc, #32]	; (8002a7c <__NVIC_SetPriority+0x50>)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3b04      	subs	r3, #4
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	761a      	strb	r2, [r3, #24]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 0307 	rsb	r3, r3, #7
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	bf28      	it	cs
 8002a9e:	2304      	movcs	r3, #4
 8002aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d902      	bls.n	8002ab0 <NVIC_EncodePriority+0x30>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3b03      	subs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <NVIC_EncodePriority+0x32>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	4313      	orrs	r3, r2
         );
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af4:	d301      	bcc.n	8002afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00f      	b.n	8002b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <SysTick_Config+0x40>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b02:	210f      	movs	r1, #15
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f7ff ff90 	bl	8002a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <SysTick_Config+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <SysTick_Config+0x40>)
 8002b14:	2207      	movs	r2, #7
 8002b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff2d 	bl	8002990 <__NVIC_SetPriorityGrouping>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b50:	f7ff ff42 	bl	80029d8 <__NVIC_GetPriorityGrouping>
 8002b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f7ff ff90 	bl	8002a80 <NVIC_EncodePriority>
 8002b60:	4602      	mov	r2, r0
 8002b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff5f 	bl	8002a2c <__NVIC_SetPriority>
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff35 	bl	80029f4 <__NVIC_EnableIRQ>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffa2 	bl	8002ae4 <SysTick_Config>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d008      	beq.n	8002bd2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e020      	b.n	8002c14 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 020e 	bic.w	r2, r2, #14
 8002be0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
	...

08002c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d005      	beq.n	8002c42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e051      	b.n	8002ce6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 020e 	bic.w	r2, r2, #14
 8002c50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <HAL_DMA_Abort_IT+0xd0>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d029      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0xa0>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a20      	ldr	r2, [pc, #128]	; (8002cf4 <HAL_DMA_Abort_IT+0xd4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d022      	beq.n	8002cbc <HAL_DMA_Abort_IT+0x9c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <HAL_DMA_Abort_IT+0xd8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d01a      	beq.n	8002cb6 <HAL_DMA_Abort_IT+0x96>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <HAL_DMA_Abort_IT+0xdc>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d012      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x90>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_DMA_Abort_IT+0xe0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00a      	beq.n	8002caa <HAL_DMA_Abort_IT+0x8a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_DMA_Abort_IT+0xe4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d102      	bne.n	8002ca4 <HAL_DMA_Abort_IT+0x84>
 8002c9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ca2:	e00e      	b.n	8002cc2 <HAL_DMA_Abort_IT+0xa2>
 8002ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca8:	e00b      	b.n	8002cc2 <HAL_DMA_Abort_IT+0xa2>
 8002caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cae:	e008      	b.n	8002cc2 <HAL_DMA_Abort_IT+0xa2>
 8002cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb4:	e005      	b.n	8002cc2 <HAL_DMA_Abort_IT+0xa2>
 8002cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cba:	e002      	b.n	8002cc2 <HAL_DMA_Abort_IT+0xa2>
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	e000      	b.n	8002cc2 <HAL_DMA_Abort_IT+0xa2>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <HAL_DMA_Abort_IT+0xe8>)
 8002cc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
    } 
  }
  return status;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40020008 	.word	0x40020008
 8002cf4:	4002001c 	.word	0x4002001c
 8002cf8:	40020030 	.word	0x40020030
 8002cfc:	40020044 	.word	0x40020044
 8002d00:	40020058 	.word	0x40020058
 8002d04:	4002006c 	.word	0x4002006c
 8002d08:	40020000 	.word	0x40020000

08002d0c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b08b      	sub	sp, #44	; 0x2c
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d36:	e169      	b.n	800300c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d38:	2201      	movs	r2, #1
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	f040 8158 	bne.w	8003006 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a9a      	ldr	r2, [pc, #616]	; (8002fc4 <HAL_GPIO_Init+0x2a0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d05e      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d60:	4a98      	ldr	r2, [pc, #608]	; (8002fc4 <HAL_GPIO_Init+0x2a0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d875      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d66:	4a98      	ldr	r2, [pc, #608]	; (8002fc8 <HAL_GPIO_Init+0x2a4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d058      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d6c:	4a96      	ldr	r2, [pc, #600]	; (8002fc8 <HAL_GPIO_Init+0x2a4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d86f      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d72:	4a96      	ldr	r2, [pc, #600]	; (8002fcc <HAL_GPIO_Init+0x2a8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d052      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d78:	4a94      	ldr	r2, [pc, #592]	; (8002fcc <HAL_GPIO_Init+0x2a8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d869      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d7e:	4a94      	ldr	r2, [pc, #592]	; (8002fd0 <HAL_GPIO_Init+0x2ac>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d04c      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d84:	4a92      	ldr	r2, [pc, #584]	; (8002fd0 <HAL_GPIO_Init+0x2ac>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d863      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d8a:	4a92      	ldr	r2, [pc, #584]	; (8002fd4 <HAL_GPIO_Init+0x2b0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d046      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d90:	4a90      	ldr	r2, [pc, #576]	; (8002fd4 <HAL_GPIO_Init+0x2b0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d85d      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d96:	2b12      	cmp	r3, #18
 8002d98:	d82a      	bhi.n	8002df0 <HAL_GPIO_Init+0xcc>
 8002d9a:	2b12      	cmp	r3, #18
 8002d9c:	d859      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_GPIO_Init+0x80>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002e1f 	.word	0x08002e1f
 8002da8:	08002df9 	.word	0x08002df9
 8002dac:	08002e0b 	.word	0x08002e0b
 8002db0:	08002e4d 	.word	0x08002e4d
 8002db4:	08002e53 	.word	0x08002e53
 8002db8:	08002e53 	.word	0x08002e53
 8002dbc:	08002e53 	.word	0x08002e53
 8002dc0:	08002e53 	.word	0x08002e53
 8002dc4:	08002e53 	.word	0x08002e53
 8002dc8:	08002e53 	.word	0x08002e53
 8002dcc:	08002e53 	.word	0x08002e53
 8002dd0:	08002e53 	.word	0x08002e53
 8002dd4:	08002e53 	.word	0x08002e53
 8002dd8:	08002e53 	.word	0x08002e53
 8002ddc:	08002e53 	.word	0x08002e53
 8002de0:	08002e53 	.word	0x08002e53
 8002de4:	08002e53 	.word	0x08002e53
 8002de8:	08002e01 	.word	0x08002e01
 8002dec:	08002e15 	.word	0x08002e15
 8002df0:	4a79      	ldr	r2, [pc, #484]	; (8002fd8 <HAL_GPIO_Init+0x2b4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002df6:	e02c      	b.n	8002e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	623b      	str	r3, [r7, #32]
          break;
 8002dfe:	e029      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	3304      	adds	r3, #4
 8002e06:	623b      	str	r3, [r7, #32]
          break;
 8002e08:	e024      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	623b      	str	r3, [r7, #32]
          break;
 8002e12:	e01f      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	623b      	str	r3, [r7, #32]
          break;
 8002e1c:	e01a      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e26:	2304      	movs	r3, #4
 8002e28:	623b      	str	r3, [r7, #32]
          break;
 8002e2a:	e013      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e34:	2308      	movs	r3, #8
 8002e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	611a      	str	r2, [r3, #16]
          break;
 8002e3e:	e009      	b.n	8002e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e40:	2308      	movs	r3, #8
 8002e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	615a      	str	r2, [r3, #20]
          break;
 8002e4a:	e003      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
          break;
 8002e50:	e000      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          break;
 8002e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2bff      	cmp	r3, #255	; 0xff
 8002e58:	d801      	bhi.n	8002e5e <HAL_GPIO_Init+0x13a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	e001      	b.n	8002e62 <HAL_GPIO_Init+0x13e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2bff      	cmp	r3, #255	; 0xff
 8002e68:	d802      	bhi.n	8002e70 <HAL_GPIO_Init+0x14c>
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	e002      	b.n	8002e76 <HAL_GPIO_Init+0x152>
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	3b08      	subs	r3, #8
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	210f      	movs	r1, #15
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	6a39      	ldr	r1, [r7, #32]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	431a      	orrs	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80b1 	beq.w	8003006 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ea4:	4b4d      	ldr	r3, [pc, #308]	; (8002fdc <HAL_GPIO_Init+0x2b8>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a4c      	ldr	r2, [pc, #304]	; (8002fdc <HAL_GPIO_Init+0x2b8>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6193      	str	r3, [r2, #24]
 8002eb0:	4b4a      	ldr	r3, [pc, #296]	; (8002fdc <HAL_GPIO_Init+0x2b8>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ebc:	4a48      	ldr	r2, [pc, #288]	; (8002fe0 <HAL_GPIO_Init+0x2bc>)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4013      	ands	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a40      	ldr	r2, [pc, #256]	; (8002fe4 <HAL_GPIO_Init+0x2c0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_GPIO_Init+0x1ec>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3f      	ldr	r2, [pc, #252]	; (8002fe8 <HAL_GPIO_Init+0x2c4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00d      	beq.n	8002f0c <HAL_GPIO_Init+0x1e8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3e      	ldr	r2, [pc, #248]	; (8002fec <HAL_GPIO_Init+0x2c8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <HAL_GPIO_Init+0x1e4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a3d      	ldr	r2, [pc, #244]	; (8002ff0 <HAL_GPIO_Init+0x2cc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_GPIO_Init+0x1e0>
 8002f00:	2303      	movs	r3, #3
 8002f02:	e006      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f04:	2304      	movs	r3, #4
 8002f06:	e004      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e002      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f10:	2300      	movs	r3, #0
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	f002 0203 	and.w	r2, r2, #3
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	4093      	lsls	r3, r2
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f22:	492f      	ldr	r1, [pc, #188]	; (8002fe0 <HAL_GPIO_Init+0x2bc>)
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	492c      	ldr	r1, [pc, #176]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	4928      	ldr	r1, [pc, #160]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f64:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
 8002f70:	e006      	b.n	8002f80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	491e      	ldr	r1, [pc, #120]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	4918      	ldr	r1, [pc, #96]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	608b      	str	r3, [r1, #8]
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	4914      	ldr	r1, [pc, #80]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d021      	beq.n	8002ff8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60cb      	str	r3, [r1, #12]
 8002fc0:	e021      	b.n	8003006 <HAL_GPIO_Init+0x2e2>
 8002fc2:	bf00      	nop
 8002fc4:	10320000 	.word	0x10320000
 8002fc8:	10310000 	.word	0x10310000
 8002fcc:	10220000 	.word	0x10220000
 8002fd0:	10210000 	.word	0x10210000
 8002fd4:	10120000 	.word	0x10120000
 8002fd8:	10110000 	.word	0x10110000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40010800 	.word	0x40010800
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	4909      	ldr	r1, [pc, #36]	; (8003028 <HAL_GPIO_Init+0x304>)
 8003002:	4013      	ands	r3, r2
 8003004:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	3301      	adds	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	f47f ae8e 	bne.w	8002d38 <HAL_GPIO_Init+0x14>
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	372c      	adds	r7, #44	; 0x2c
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	40010400 	.word	0x40010400

0800302c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800303c:	787b      	ldrb	r3, [r7, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003048:	e003      	b.n	8003052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	041a      	lsls	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	611a      	str	r2, [r3, #16]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003072:	4a05      	ldr	r2, [pc, #20]	; (8003088 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fe20 	bl	8001cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40010400 	.word	0x40010400

0800308c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e12b      	b.n	80032f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff f8a2 	bl	80021fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f0:	f003 f976 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 80030f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a81      	ldr	r2, [pc, #516]	; (8003300 <HAL_I2C_Init+0x274>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d807      	bhi.n	8003110 <HAL_I2C_Init+0x84>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a80      	ldr	r2, [pc, #512]	; (8003304 <HAL_I2C_Init+0x278>)
 8003104:	4293      	cmp	r3, r2
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e006      	b.n	800311e <HAL_I2C_Init+0x92>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a7d      	ldr	r2, [pc, #500]	; (8003308 <HAL_I2C_Init+0x27c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	bf94      	ite	ls
 8003118:	2301      	movls	r3, #1
 800311a:	2300      	movhi	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0e7      	b.n	80032f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a78      	ldr	r2, [pc, #480]	; (800330c <HAL_I2C_Init+0x280>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0c9b      	lsrs	r3, r3, #18
 8003130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a6a      	ldr	r2, [pc, #424]	; (8003300 <HAL_I2C_Init+0x274>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d802      	bhi.n	8003160 <HAL_I2C_Init+0xd4>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3301      	adds	r3, #1
 800315e:	e009      	b.n	8003174 <HAL_I2C_Init+0xe8>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_I2C_Init+0x284>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	3301      	adds	r3, #1
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	430b      	orrs	r3, r1
 800317a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	495c      	ldr	r1, [pc, #368]	; (8003300 <HAL_I2C_Init+0x274>)
 8003190:	428b      	cmp	r3, r1
 8003192:	d819      	bhi.n	80031c8 <HAL_I2C_Init+0x13c>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e59      	subs	r1, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a2:	1c59      	adds	r1, r3, #1
 80031a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031a8:	400b      	ands	r3, r1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_I2C_Init+0x138>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1e59      	subs	r1, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	e051      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 80031c4:	2304      	movs	r3, #4
 80031c6:	e04f      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d111      	bne.n	80031f4 <HAL_I2C_Init+0x168>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e012      	b.n	800321a <HAL_I2C_Init+0x18e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e58      	subs	r0, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	0099      	lsls	r1, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Init+0x196>
 800321e:	2301      	movs	r3, #1
 8003220:	e022      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <HAL_I2C_Init+0x1bc>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1e58      	subs	r0, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	440b      	add	r3, r1
 8003238:	fbb0 f3f3 	udiv	r3, r0, r3
 800323c:	3301      	adds	r3, #1
 800323e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003246:	e00f      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	0099      	lsls	r1, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	6809      	ldr	r1, [r1, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6911      	ldr	r1, [r2, #16]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	000186a0 	.word	0x000186a0
 8003304:	001e847f 	.word	0x001e847f
 8003308:	003d08ff 	.word	0x003d08ff
 800330c:	431bde83 	.word	0x431bde83
 8003310:	10624dd3 	.word	0x10624dd3

08003314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	461a      	mov	r2, r3
 8003320:	460b      	mov	r3, r1
 8003322:	817b      	strh	r3, [r7, #10]
 8003324:	4613      	mov	r3, r2
 8003326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff fb28 	bl	800297c <HAL_GetTick>
 800332c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	f040 80e0 	bne.w	80034fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2319      	movs	r3, #25
 8003342:	2201      	movs	r2, #1
 8003344:	4970      	ldr	r1, [pc, #448]	; (8003508 <HAL_I2C_Master_Transmit+0x1f4>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f002 f92a 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	e0d3      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_I2C_Master_Transmit+0x50>
 8003360:	2302      	movs	r3, #2
 8003362:	e0cc      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d007      	beq.n	800338a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2221      	movs	r2, #33	; 0x21
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2210      	movs	r2, #16
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	893a      	ldrh	r2, [r7, #8]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_I2C_Master_Transmit+0x1f8>)
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033cc:	8979      	ldrh	r1, [r7, #10]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f001 feec 	bl	80051b0 <I2C_MasterRequestWrite>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e08d      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033f8:	e066      	b.n	80034c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f002 f9a4 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e06b      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d11b      	bne.n	800349c <HAL_I2C_Master_Transmit+0x188>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	6a39      	ldr	r1, [r7, #32]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f002 f994 	bl	80057ce <I2C_WaitOnBTFFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d107      	bne.n	80034c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e01a      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d194      	bne.n	80033fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	00100002 	.word	0x00100002
 800350c:	ffff0000 	.word	0xffff0000

08003510 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	; 0x30
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	461a      	mov	r2, r3
 800351c:	460b      	mov	r3, r1
 800351e:	817b      	strh	r3, [r7, #10]
 8003520:	4613      	mov	r3, r2
 8003522:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7ff fa28 	bl	800297c <HAL_GetTick>
 800352c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b20      	cmp	r3, #32
 8003538:	f040 823f 	bne.w	80039ba <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2319      	movs	r3, #25
 8003542:	2201      	movs	r2, #1
 8003544:	497f      	ldr	r1, [pc, #508]	; (8003744 <HAL_I2C_Master_Receive+0x234>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f002 f82a 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	e232      	b.n	80039bc <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_I2C_Master_Receive+0x54>
 8003560:	2302      	movs	r3, #2
 8003562:	e22b      	b.n	80039bc <HAL_I2C_Master_Receive+0x4ac>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d007      	beq.n	800358a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003598:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2222      	movs	r2, #34	; 0x22
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2210      	movs	r2, #16
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	893a      	ldrh	r2, [r7, #8]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4a5f      	ldr	r2, [pc, #380]	; (8003748 <HAL_I2C_Master_Receive+0x238>)
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035cc:	8979      	ldrh	r1, [r7, #10]
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f001 fe6e 	bl	80052b4 <I2C_MasterRequestRead>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e1ec      	b.n	80039bc <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d113      	bne.n	8003612 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e1c0      	b.n	8003994 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003616:	2b01      	cmp	r3, #1
 8003618:	d11e      	bne.n	8003658 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003628:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800362a:	b672      	cpsid	i
}
 800362c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003652:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003654:	b662      	cpsie	i
}
 8003656:	e035      	b.n	80036c4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	2b02      	cmp	r3, #2
 800365e:	d11e      	bne.n	800369e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800366e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003670:	b672      	cpsid	i
}
 8003672:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003698:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800369a:	b662      	cpsie	i
}
 800369c:	e012      	b.n	80036c4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80036c4:	e166      	b.n	8003994 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	f200 811f 	bhi.w	800390e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d123      	bne.n	8003720 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f002 f8e9 	bl	80058b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e167      	b.n	80039bc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800371e:	e139      	b.n	8003994 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	2b02      	cmp	r3, #2
 8003726:	d152      	bne.n	80037ce <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	2200      	movs	r2, #0
 8003730:	4906      	ldr	r1, [pc, #24]	; (800374c <HAL_I2C_Master_Receive+0x23c>)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f001 ff34 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e13c      	b.n	80039bc <HAL_I2C_Master_Receive+0x4ac>
 8003742:	bf00      	nop
 8003744:	00100002 	.word	0x00100002
 8003748:	ffff0000 	.word	0xffff0000
 800374c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003750:	b672      	cpsid	i
}
 8003752:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003796:	b662      	cpsie	i
}
 8003798:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037cc:	e0e2      	b.n	8003994 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	497b      	ldr	r1, [pc, #492]	; (80039c4 <HAL_I2C_Master_Receive+0x4b4>)
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f001 fee1 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0e9      	b.n	80039bc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037f8:	b672      	cpsid	i
}
 80037fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800382e:	4b66      	ldr	r3, [pc, #408]	; (80039c8 <HAL_I2C_Master_Receive+0x4b8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	08db      	lsrs	r3, r3, #3
 8003834:	4a65      	ldr	r2, [pc, #404]	; (80039cc <HAL_I2C_Master_Receive+0x4bc>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0a1a      	lsrs	r2, r3, #8
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00da      	lsls	r2, r3, #3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	3b01      	subs	r3, #1
 800384c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d118      	bne.n	8003886 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f043 0220 	orr.w	r2, r3, #32
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003876:	b662      	cpsie	i
}
 8003878:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e09a      	b.n	80039bc <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d1d9      	bne.n	8003848 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038d6:	b662      	cpsie	i
}
 80038d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800390c:	e042      	b.n	8003994 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f001 ffce 	bl	80058b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e04c      	b.n	80039bc <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d118      	bne.n	8003994 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	f47f ae94 	bne.w	80036c6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80039ba:	2302      	movs	r3, #2
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	00010004 	.word	0x00010004
 80039c8:	20000018 	.word	0x20000018
 80039cc:	14f8b589 	.word	0x14f8b589

080039d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	460b      	mov	r3, r1
 80039de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7fe ffcc 	bl	800297c <HAL_GetTick>
 80039e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80039e6:	2301      	movs	r3, #1
 80039e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	f040 8111 	bne.w	8003c1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2319      	movs	r3, #25
 80039fe:	2201      	movs	r2, #1
 8003a00:	4988      	ldr	r1, [pc, #544]	; (8003c24 <HAL_I2C_IsDeviceReady+0x254>)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f001 fdcc 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e104      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2C_IsDeviceReady+0x50>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e0fd      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x24c>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d007      	beq.n	8003a46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2224      	movs	r2, #36	; 0x24
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a70      	ldr	r2, [pc, #448]	; (8003c28 <HAL_I2C_IsDeviceReady+0x258>)
 8003a68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f001 fd8a 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa0:	d103      	bne.n	8003aaa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0b6      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aae:	897b      	ldrh	r3, [r7, #10]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003abc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003abe:	f7fe ff5d 	bl	800297c <HAL_GetTick>
 8003ac2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003af2:	e025      	b.n	8003b40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7fe ff42 	bl	800297c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <HAL_I2C_IsDeviceReady+0x13a>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	22a0      	movs	r2, #160	; 0xa0
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2ba0      	cmp	r3, #160	; 0xa0
 8003b4a:	d005      	beq.n	8003b58 <HAL_I2C_IsDeviceReady+0x188>
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_I2C_IsDeviceReady+0x188>
 8003b52:	7dbb      	ldrb	r3, [r7, #22]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0cd      	beq.n	8003af4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d129      	bne.n	8003bc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2319      	movs	r3, #25
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4921      	ldr	r1, [pc, #132]	; (8003c24 <HAL_I2C_IsDeviceReady+0x254>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f001 fcfe 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e036      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e02c      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2319      	movs	r3, #25
 8003be2:	2201      	movs	r2, #1
 8003be4:	490f      	ldr	r1, [pc, #60]	; (8003c24 <HAL_I2C_IsDeviceReady+0x254>)
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f001 fcda 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e012      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	f4ff af32 	bcc.w	8003a6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
  }
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	00100002 	.word	0x00100002
 8003c28:	ffff0000 	.word	0xffff0000

08003c2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d003      	beq.n	8003c64 <HAL_I2C_EV_IRQHandler+0x38>
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	f040 80c1 	bne.w	8003de6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10d      	bne.n	8003c9a <HAL_I2C_EV_IRQHandler+0x6e>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c84:	d003      	beq.n	8003c8e <HAL_I2C_EV_IRQHandler+0x62>
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c8c:	d101      	bne.n	8003c92 <HAL_I2C_EV_IRQHandler+0x66>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_I2C_EV_IRQHandler+0x68>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	f000 8132 	beq.w	8003efe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00c      	beq.n	8003cbe <HAL_I2C_EV_IRQHandler+0x92>
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	0a5b      	lsrs	r3, r3, #9
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d006      	beq.n	8003cbe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f001 fe83 	bl	80059bc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fcc8 	bl	800464c <I2C_Master_SB>
 8003cbc:	e092      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HAL_I2C_EV_IRQHandler+0xb2>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	0a5b      	lsrs	r3, r3, #9
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fd3d 	bl	8004756 <I2C_Master_ADD10>
 8003cdc:	e082      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_I2C_EV_IRQHandler+0xd2>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	0a5b      	lsrs	r3, r3, #9
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fd56 	bl	80047a8 <I2C_Master_ADDR>
 8003cfc:	e072      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d03b      	beq.n	8003d82 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d18:	f000 80f3 	beq.w	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	09db      	lsrs	r3, r3, #7
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00f      	beq.n	8003d48 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	0a9b      	lsrs	r3, r3, #10
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d009      	beq.n	8003d48 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d103      	bne.n	8003d48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f942 	bl	8003fca <I2C_MasterTransmit_TXE>
 8003d46:	e04d      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80d6 	beq.w	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	0a5b      	lsrs	r3, r3, #9
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80cf 	beq.w	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d64:	7bbb      	ldrb	r3, [r7, #14]
 8003d66:	2b21      	cmp	r3, #33	; 0x21
 8003d68:	d103      	bne.n	8003d72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f9c9 	bl	8004102 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d70:	e0c7      	b.n	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	f040 80c4 	bne.w	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa37 	bl	80041ee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d80:	e0bf      	b.n	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d90:	f000 80b7 	beq.w	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00f      	beq.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x194>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	0a9b      	lsrs	r3, r3, #10
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d009      	beq.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x194>
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	089b      	lsrs	r3, r3, #2
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 faac 	bl	8004316 <I2C_MasterReceive_RXNE>
 8003dbe:	e011      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 809a 	beq.w	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	0a5b      	lsrs	r3, r3, #9
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8093 	beq.w	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fb4b 	bl	8004478 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de2:	e08e      	b.n	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003de4:	e08d      	b.n	8003f02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e007      	b.n	8003e08 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	085b      	lsrs	r3, r3, #1
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d012      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0x20e>
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	0a5b      	lsrs	r3, r3, #9
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00c      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e30:	69b9      	ldr	r1, [r7, #24]
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 ff0f 	bl	8004c56 <I2C_Slave_ADDR>
 8003e38:	e066      	b.n	8003f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_I2C_EV_IRQHandler+0x22e>
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	0a5b      	lsrs	r3, r3, #9
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 ff4a 	bl	8004cec <I2C_Slave_STOPF>
 8003e58:	e056      	b.n	8003f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e5a:	7bbb      	ldrb	r3, [r7, #14]
 8003e5c:	2b21      	cmp	r3, #33	; 0x21
 8003e5e:	d002      	beq.n	8003e66 <HAL_I2C_EV_IRQHandler+0x23a>
 8003e60:	7bbb      	ldrb	r3, [r7, #14]
 8003e62:	2b29      	cmp	r3, #41	; 0x29
 8003e64:	d125      	bne.n	8003eb2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	09db      	lsrs	r3, r3, #7
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00f      	beq.n	8003e92 <HAL_I2C_EV_IRQHandler+0x266>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	0a9b      	lsrs	r3, r3, #10
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_I2C_EV_IRQHandler+0x266>
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fe27 	bl	8004ade <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e90:	e039      	b.n	8003f06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d033      	beq.n	8003f06 <HAL_I2C_EV_IRQHandler+0x2da>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	0a5b      	lsrs	r3, r3, #9
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02d      	beq.n	8003f06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fe54 	bl	8004b58 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eb0:	e029      	b.n	8003f06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00f      	beq.n	8003ede <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	0a9b      	lsrs	r3, r3, #10
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_I2C_EV_IRQHandler+0x2b2>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fe5e 	bl	8004b98 <I2C_SlaveReceive_RXNE>
 8003edc:	e014      	b.n	8003f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00e      	beq.n	8003f08 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	0a5b      	lsrs	r3, r3, #9
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fe8c 	bl	8004c14 <I2C_SlaveReceive_BTF>
 8003efc:	e004      	b.n	8003f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f08:	3720      	adds	r7, #32
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	70fb      	strb	r3, [r7, #3]
 8003f62:	4613      	mov	r3, r2
 8003f64:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr

08003fca <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d150      	bne.n	8004092 <I2C_MasterTransmit_TXE+0xc8>
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b21      	cmp	r3, #33	; 0x21
 8003ff4:	d14d      	bne.n	8004092 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d01d      	beq.n	8004038 <I2C_MasterTransmit_TXE+0x6e>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d01a      	beq.n	8004038 <I2C_MasterTransmit_TXE+0x6e>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004008:	d016      	beq.n	8004038 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004018:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2211      	movs	r2, #17
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff ff6c 	bl	8003f0e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004036:	e060      	b.n	80040fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004046:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b40      	cmp	r3, #64	; 0x40
 8004070:	d107      	bne.n	8004082 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ff81 	bl	8003f82 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004080:	e03b      	b.n	80040fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ff3f 	bl	8003f0e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004090:	e033      	b.n	80040fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	2b21      	cmp	r3, #33	; 0x21
 8004096:	d005      	beq.n	80040a4 <I2C_MasterTransmit_TXE+0xda>
 8004098:	7bbb      	ldrb	r3, [r7, #14]
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d12d      	bne.n	80040fa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2b22      	cmp	r3, #34	; 0x22
 80040a2:	d12a      	bne.n	80040fa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040bc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80040be:	e01c      	b.n	80040fa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d103      	bne.n	80040d4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f88e 	bl	80041ee <I2C_MemoryTransmit_TXE_BTF>
}
 80040d2:	e012      	b.n	80040fa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040f8:	e7ff      	b.n	80040fa <I2C_MasterTransmit_TXE+0x130>
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b21      	cmp	r3, #33	; 0x21
 800411a:	d164      	bne.n	80041e6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d012      	beq.n	800414c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800414a:	e04c      	b.n	80041e6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d01d      	beq.n	800418e <I2C_MasterTransmit_BTF+0x8c>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b20      	cmp	r3, #32
 8004156:	d01a      	beq.n	800418e <I2C_MasterTransmit_BTF+0x8c>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800415e:	d016      	beq.n	800418e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800416e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2211      	movs	r2, #17
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fec1 	bl	8003f0e <HAL_I2C_MasterTxCpltCallback>
}
 800418c:	e02b      	b.n	80041e6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800419c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d107      	bne.n	80041d8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fed6 	bl	8003f82 <HAL_I2C_MemTxCpltCallback>
}
 80041d6:	e006      	b.n	80041e6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff fe94 	bl	8003f0e <HAL_I2C_MasterTxCpltCallback>
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11d      	bne.n	8004242 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10b      	bne.n	8004226 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004212:	b2da      	uxtb	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421e:	1c9a      	adds	r2, r3, #2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004224:	e073      	b.n	800430e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	b29b      	uxth	r3, r3
 800422c:	121b      	asrs	r3, r3, #8
 800422e:	b2da      	uxtb	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004240:	e065      	b.n	800430e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004246:	2b01      	cmp	r3, #1
 8004248:	d10b      	bne.n	8004262 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424e:	b2da      	uxtb	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004260:	e055      	b.n	800430e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004266:	2b02      	cmp	r3, #2
 8004268:	d151      	bne.n	800430e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b22      	cmp	r3, #34	; 0x22
 800426e:	d10d      	bne.n	800428c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	651a      	str	r2, [r3, #80]	; 0x50
}
 800428a:	e040      	b.n	800430e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d015      	beq.n	80042c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b21      	cmp	r3, #33	; 0x21
 800429a:	d112      	bne.n	80042c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042c0:	e025      	b.n	800430e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d120      	bne.n	800430e <I2C_MemoryTransmit_TXE_BTF+0x120>
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b21      	cmp	r3, #33	; 0x21
 80042d0:	d11d      	bne.n	800430e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042e0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fe3a 	bl	8003f82 <HAL_I2C_MemTxCpltCallback>
}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b22      	cmp	r3, #34	; 0x22
 8004328:	f040 80a2 	bne.w	8004470 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b03      	cmp	r3, #3
 8004338:	d921      	bls.n	800437e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b03      	cmp	r3, #3
 8004368:	f040 8082 	bne.w	8004470 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800437c:	e078      	b.n	8004470 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	2b02      	cmp	r3, #2
 8004384:	d074      	beq.n	8004470 <I2C_MasterReceive_RXNE+0x15a>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d002      	beq.n	8004392 <I2C_MasterReceive_RXNE+0x7c>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d16e      	bne.n	8004470 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f001 fa5c 	bl	8005850 <I2C_WaitOnSTOPRequestThroughIT>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d142      	bne.n	8004424 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	d10a      	bne.n	800440e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fdc4 	bl	8003f94 <HAL_I2C_MemRxCpltCallback>
}
 800440c:	e030      	b.n	8004470 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2212      	movs	r2, #18
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff fd7f 	bl	8003f20 <HAL_I2C_MasterRxCpltCallback>
}
 8004422:	e025      	b.n	8004470 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004432:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff fd9b 	bl	8003fa6 <HAL_I2C_ErrorCallback>
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b04      	cmp	r3, #4
 800448e:	d11b      	bne.n	80044c8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80044c6:	e0bd      	b.n	8004644 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d129      	bne.n	8004526 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d00a      	beq.n	80044fe <I2C_MasterReceive_BTF+0x86>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d007      	beq.n	80044fe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004524:	e08e      	b.n	8004644 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d176      	bne.n	800461e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d002      	beq.n	800453c <I2C_MasterReceive_BTF+0xc4>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b10      	cmp	r3, #16
 800453a:	d108      	bne.n	800454e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e019      	b.n	8004582 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b04      	cmp	r3, #4
 8004552:	d002      	beq.n	800455a <I2C_MasterReceive_BTF+0xe2>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d108      	bne.n	800456c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e00a      	b.n	8004582 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b10      	cmp	r3, #16
 8004570:	d007      	beq.n	8004582 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004580:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045dc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d10a      	bne.n	8004608 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fcc7 	bl	8003f94 <HAL_I2C_MemRxCpltCallback>
}
 8004606:	e01d      	b.n	8004644 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2212      	movs	r2, #18
 8004614:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff fc82 	bl	8003f20 <HAL_I2C_MasterRxCpltCallback>
}
 800461c:	e012      	b.n	8004644 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d117      	bne.n	8004690 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004664:	2b00      	cmp	r3, #0
 8004666:	d109      	bne.n	800467c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004678:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800467a:	e067      	b.n	800474c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	b2da      	uxtb	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	611a      	str	r2, [r3, #16]
}
 800468e:	e05d      	b.n	800474c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004698:	d133      	bne.n	8004702 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b21      	cmp	r3, #33	; 0x21
 80046a4:	d109      	bne.n	80046ba <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046b6:	611a      	str	r2, [r3, #16]
 80046b8:	e008      	b.n	80046cc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <I2C_Master_SB+0x92>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d032      	beq.n	800474c <I2C_Master_SB+0x100>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d02d      	beq.n	800474c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fe:	605a      	str	r2, [r3, #4]
}
 8004700:	e024      	b.n	800474c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10e      	bne.n	8004728 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	b29b      	uxth	r3, r3
 8004710:	11db      	asrs	r3, r3, #7
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f003 0306 	and.w	r3, r3, #6
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f063 030f 	orn	r3, r3, #15
 800471e:	b2da      	uxtb	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	611a      	str	r2, [r3, #16]
}
 8004726:	e011      	b.n	800474c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	2b01      	cmp	r3, #1
 800472e:	d10d      	bne.n	800474c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004734:	b29b      	uxth	r3, r3
 8004736:	11db      	asrs	r3, r3, #7
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 0306 	and.w	r3, r3, #6
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f063 030e 	orn	r3, r3, #14
 8004744:	b2da      	uxtb	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	611a      	str	r2, [r3, #16]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	b2da      	uxtb	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <I2C_Master_ADD10+0x26>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	d108      	bne.n	800478e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00c      	beq.n	800479e <I2C_Master_ADD10+0x48>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479c:	605a      	str	r2, [r3, #4]
  }
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b091      	sub	sp, #68	; 0x44
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b22      	cmp	r3, #34	; 0x22
 80047d0:	f040 8174 	bne.w	8004abc <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10f      	bne.n	80047fc <I2C_Master_ADDR+0x54>
 80047dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	d10b      	bne.n	80047fc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e4:	2300      	movs	r3, #0
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	e16b      	b.n	8004ad4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11d      	bne.n	8004840 <I2C_Master_ADDR+0x98>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800480c:	d118      	bne.n	8004840 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480e:	2300      	movs	r3, #0
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004832:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	651a      	str	r2, [r3, #80]	; 0x50
 800483e:	e149      	b.n	8004ad4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d113      	bne.n	8004872 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484a:	2300      	movs	r3, #0
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e120      	b.n	8004ab4 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	f040 808a 	bne.w	8004992 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004884:	d137      	bne.n	80048f6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004894:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a4:	d113      	bne.n	80048ce <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	e0f2      	b.n	8004ab4 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ce:	2300      	movs	r3, #0
 80048d0:	623b      	str	r3, [r7, #32]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	623b      	str	r3, [r7, #32]
 80048e2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e0de      	b.n	8004ab4 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d02e      	beq.n	800495a <I2C_Master_ADDR+0x1b2>
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d02b      	beq.n	800495a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	2b12      	cmp	r3, #18
 8004906:	d102      	bne.n	800490e <I2C_Master_ADDR+0x166>
 8004908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490a:	2b01      	cmp	r3, #1
 800490c:	d125      	bne.n	800495a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2b04      	cmp	r3, #4
 8004912:	d00e      	beq.n	8004932 <I2C_Master_ADDR+0x18a>
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	2b02      	cmp	r3, #2
 8004918:	d00b      	beq.n	8004932 <I2C_Master_ADDR+0x18a>
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	2b10      	cmp	r3, #16
 800491e:	d008      	beq.n	8004932 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	e007      	b.n	8004942 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004940:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	61fb      	str	r3, [r7, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	e0ac      	b.n	8004ab4 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004968:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e090      	b.n	8004ab4 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d158      	bne.n	8004a4e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d021      	beq.n	80049e6 <I2C_Master_ADDR+0x23e>
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d01e      	beq.n	80049e6 <I2C_Master_ADDR+0x23e>
 80049a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d01b      	beq.n	80049e6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049bc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	e012      	b.n	8004a0c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049f4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d14b      	bne.n	8004ab4 <I2C_Master_ADDR+0x30c>
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a22:	d00b      	beq.n	8004a3c <I2C_Master_ADDR+0x294>
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d008      	beq.n	8004a3c <I2C_Master_ADDR+0x294>
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d005      	beq.n	8004a3c <I2C_Master_ADDR+0x294>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	2b10      	cmp	r3, #16
 8004a34:	d002      	beq.n	8004a3c <I2C_Master_ADDR+0x294>
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d13b      	bne.n	8004ab4 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a4a:	605a      	str	r2, [r3, #4]
 8004a4c:	e032      	b.n	8004ab4 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a5c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6c:	d117      	bne.n	8004a9e <I2C_Master_ADDR+0x2f6>
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a74:	d00b      	beq.n	8004a8e <I2C_Master_ADDR+0x2e6>
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d008      	beq.n	8004a8e <I2C_Master_ADDR+0x2e6>
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d005      	beq.n	8004a8e <I2C_Master_ADDR+0x2e6>
 8004a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d002      	beq.n	8004a8e <I2C_Master_ADDR+0x2e6>
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d107      	bne.n	8004a9e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004aba:	e00b      	b.n	8004ad4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abc:	2300      	movs	r3, #0
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	60bb      	str	r3, [r7, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
}
 8004ad2:	e7ff      	b.n	8004ad4 <I2C_Master_ADDR+0x32c>
 8004ad4:	bf00      	nop
 8004ad6:	3744      	adds	r7, #68	; 0x44
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02b      	beq.n	8004b50 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	781a      	ldrb	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d114      	bne.n	8004b50 <I2C_SlaveTransmit_TXE+0x72>
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2b29      	cmp	r3, #41	; 0x29
 8004b2a:	d111      	bne.n	8004b50 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2221      	movs	r2, #33	; 0x21
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2228      	movs	r2, #40	; 0x28
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff f9f1 	bl	8003f32 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d011      	beq.n	8004b8e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	781a      	ldrb	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d02c      	beq.n	8004c0c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d114      	bne.n	8004c0c <I2C_SlaveReceive_RXNE+0x74>
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b2a      	cmp	r3, #42	; 0x2a
 8004be6:	d111      	bne.n	8004c0c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2222      	movs	r2, #34	; 0x22
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2228      	movs	r2, #40	; 0x28
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff f99c 	bl	8003f44 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d012      	beq.n	8004c4c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c70:	2b28      	cmp	r3, #40	; 0x28
 8004c72:	d127      	bne.n	8004cc4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c82:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	089b      	lsrs	r3, r3, #2
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c90:	2301      	movs	r3, #1
 8004c92:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	09db      	lsrs	r3, r3, #7
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d103      	bne.n	8004ca8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	81bb      	strh	r3, [r7, #12]
 8004ca6:	e002      	b.n	8004cae <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004cb6:	89ba      	ldrh	r2, [r7, #12]
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff f94a 	bl	8003f56 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004cc2:	e00e      	b.n	8004ce2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d48:	d172      	bne.n	8004e30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b22      	cmp	r3, #34	; 0x22
 8004d4e:	d002      	beq.n	8004d56 <I2C_Slave_STOPF+0x6a>
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b2a      	cmp	r3, #42	; 0x2a
 8004d54:	d135      	bne.n	8004dc2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f043 0204 	orr.w	r2, r3, #4
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fd ffbc 	bl	8002d0c <HAL_DMA_GetState>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d049      	beq.n	8004e2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	4a69      	ldr	r2, [pc, #420]	; (8004f44 <I2C_Slave_STOPF+0x258>)
 8004da0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fd ff3a 	bl	8002c20 <HAL_DMA_Abort_IT>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d03d      	beq.n	8004e2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dc0:	e035      	b.n	8004e2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f043 0204 	orr.w	r2, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004df4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fd ff86 	bl	8002d0c <HAL_DMA_GetState>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d014      	beq.n	8004e30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	4a4e      	ldr	r2, [pc, #312]	; (8004f44 <I2C_Slave_STOPF+0x258>)
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fd ff04 	bl	8002c20 <HAL_DMA_Abort_IT>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4798      	blx	r3
 8004e2c:	e000      	b.n	8004e30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d03e      	beq.n	8004eb8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d112      	bne.n	8004e6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d112      	bne.n	8004ea2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f043 0204 	orr.w	r2, r3, #4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f843 	bl	8004f4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004ec6:	e039      	b.n	8004f3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b2a      	cmp	r3, #42	; 0x2a
 8004ecc:	d109      	bne.n	8004ee2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2228      	movs	r2, #40	; 0x28
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff f831 	bl	8003f44 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b28      	cmp	r3, #40	; 0x28
 8004eec:	d111      	bne.n	8004f12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <I2C_Slave_STOPF+0x25c>)
 8004ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff f830 	bl	8003f70 <HAL_I2C_ListenCpltCallback>
}
 8004f10:	e014      	b.n	8004f3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	2b22      	cmp	r3, #34	; 0x22
 8004f18:	d002      	beq.n	8004f20 <I2C_Slave_STOPF+0x234>
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2b22      	cmp	r3, #34	; 0x22
 8004f1e:	d10d      	bne.n	8004f3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff f804 	bl	8003f44 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	08005451 	.word	0x08005451
 8004f48:	ffff0000 	.word	0xffff0000

08004f4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f64:	7bbb      	ldrb	r3, [r7, #14]
 8004f66:	2b10      	cmp	r3, #16
 8004f68:	d002      	beq.n	8004f70 <I2C_ITError+0x24>
 8004f6a:	7bbb      	ldrb	r3, [r7, #14]
 8004f6c:	2b40      	cmp	r3, #64	; 0x40
 8004f6e:	d10a      	bne.n	8004f86 <I2C_ITError+0x3a>
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b22      	cmp	r3, #34	; 0x22
 8004f74:	d107      	bne.n	8004f86 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f8c:	2b28      	cmp	r3, #40	; 0x28
 8004f8e:	d107      	bne.n	8004fa0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2228      	movs	r2, #40	; 0x28
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f9e:	e015      	b.n	8004fcc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fae:	d00a      	beq.n	8004fc6 <I2C_ITError+0x7a>
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b60      	cmp	r3, #96	; 0x60
 8004fb4:	d007      	beq.n	8004fc6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fda:	d161      	bne.n	80050a0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d020      	beq.n	800503a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffc:	4a6a      	ldr	r2, [pc, #424]	; (80051a8 <I2C_ITError+0x25c>)
 8004ffe:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd fe0b 	bl	8002c20 <HAL_DMA_Abort_IT>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8089 	beq.w	8005124 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0201 	bic.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005034:	4610      	mov	r0, r2
 8005036:	4798      	blx	r3
 8005038:	e074      	b.n	8005124 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	4a5a      	ldr	r2, [pc, #360]	; (80051a8 <I2C_ITError+0x25c>)
 8005040:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	4618      	mov	r0, r3
 8005048:	f7fd fdea 	bl	8002c20 <HAL_DMA_Abort_IT>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d068      	beq.n	8005124 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d10b      	bne.n	8005078 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0201 	bic.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800509a:	4610      	mov	r0, r2
 800509c:	4798      	blx	r3
 800509e:	e041      	b.n	8005124 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b60      	cmp	r3, #96	; 0x60
 80050aa:	d125      	bne.n	80050f8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d10b      	bne.n	80050e0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7fe ff61 	bl	8003fb8 <HAL_I2C_AbortCpltCallback>
 80050f6:	e015      	b.n	8005124 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d10b      	bne.n	800511e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fe ff41 	bl	8003fa6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10e      	bne.n	8005152 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005160:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b04      	cmp	r3, #4
 8005174:	d113      	bne.n	800519e <I2C_ITError+0x252>
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	2b28      	cmp	r3, #40	; 0x28
 800517a:	d110      	bne.n	800519e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a0b      	ldr	r2, [pc, #44]	; (80051ac <I2C_ITError+0x260>)
 8005180:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7fe fee9 	bl	8003f70 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	08005451 	.word	0x08005451
 80051ac:	ffff0000 	.word	0xffff0000

080051b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	460b      	mov	r3, r1
 80051be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d006      	beq.n	80051da <I2C_MasterRequestWrite+0x2a>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d003      	beq.n	80051da <I2C_MasterRequestWrite+0x2a>
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051d8:	d108      	bne.n	80051ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	e00b      	b.n	8005204 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	2b12      	cmp	r3, #18
 80051f2:	d107      	bne.n	8005204 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005202:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f9c5 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00d      	beq.n	8005238 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d103      	bne.n	8005234 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e035      	b.n	80052a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005240:	d108      	bne.n	8005254 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005242:	897b      	ldrh	r3, [r7, #10]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005250:	611a      	str	r2, [r3, #16]
 8005252:	e01b      	b.n	800528c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005254:	897b      	ldrh	r3, [r7, #10]
 8005256:	11db      	asrs	r3, r3, #7
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f003 0306 	and.w	r3, r3, #6
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f063 030f 	orn	r3, r3, #15
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	490e      	ldr	r1, [pc, #56]	; (80052ac <I2C_MasterRequestWrite+0xfc>)
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f9eb 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e010      	b.n	80052a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005282:	897b      	ldrh	r3, [r7, #10]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4907      	ldr	r1, [pc, #28]	; (80052b0 <I2C_MasterRequestWrite+0x100>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f9db 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	00010008 	.word	0x00010008
 80052b0:	00010002 	.word	0x00010002

080052b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	460b      	mov	r3, r1
 80052c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d006      	beq.n	80052ee <I2C_MasterRequestRead+0x3a>
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d003      	beq.n	80052ee <I2C_MasterRequestRead+0x3a>
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052ec:	d108      	bne.n	8005300 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e00b      	b.n	8005318 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	2b11      	cmp	r3, #17
 8005306:	d107      	bne.n	8005318 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005316:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f93b 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00d      	beq.n	800534c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533e:	d103      	bne.n	8005348 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e079      	b.n	8005440 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005354:	d108      	bne.n	8005368 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005356:	897b      	ldrh	r3, [r7, #10]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	611a      	str	r2, [r3, #16]
 8005366:	e05f      	b.n	8005428 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005368:	897b      	ldrh	r3, [r7, #10]
 800536a:	11db      	asrs	r3, r3, #7
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 0306 	and.w	r3, r3, #6
 8005372:	b2db      	uxtb	r3, r3
 8005374:	f063 030f 	orn	r3, r3, #15
 8005378:	b2da      	uxtb	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4930      	ldr	r1, [pc, #192]	; (8005448 <I2C_MasterRequestRead+0x194>)
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f961 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e054      	b.n	8005440 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005396:	897b      	ldrh	r3, [r7, #10]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	4929      	ldr	r1, [pc, #164]	; (800544c <I2C_MasterRequestRead+0x198>)
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 f951 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e044      	b.n	8005440 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f8d9 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005402:	d103      	bne.n	800540c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800540a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e017      	b.n	8005440 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005410:	897b      	ldrh	r3, [r7, #10]
 8005412:	11db      	asrs	r3, r3, #7
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f003 0306 	and.w	r3, r3, #6
 800541a:	b2db      	uxtb	r3, r3
 800541c:	f063 030e 	orn	r3, r3, #14
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	4907      	ldr	r1, [pc, #28]	; (800544c <I2C_MasterRequestRead+0x198>)
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f90d 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	00010008 	.word	0x00010008
 800544c:	00010002 	.word	0x00010002

08005450 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005468:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800546a:	4b4b      	ldr	r3, [pc, #300]	; (8005598 <I2C_DMAAbort+0x148>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	08db      	lsrs	r3, r3, #3
 8005470:	4a4a      	ldr	r2, [pc, #296]	; (800559c <I2C_DMAAbort+0x14c>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	0a1a      	lsrs	r2, r3, #8
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	00da      	lsls	r2, r3, #3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f043 0220 	orr.w	r2, r3, #32
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005496:	e00a      	b.n	80054ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3b01      	subs	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ac:	d0ea      	beq.n	8005484 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ba:	2200      	movs	r2, #0
 80054bc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	2200      	movs	r2, #0
 80054cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f0:	2200      	movs	r2, #0
 80054f2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	2200      	movs	r2, #0
 8005502:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b60      	cmp	r3, #96	; 0x60
 800551e:	d10e      	bne.n	800553e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2200      	movs	r2, #0
 8005534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005536:	6978      	ldr	r0, [r7, #20]
 8005538:	f7fe fd3e 	bl	8003fb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800553c:	e027      	b.n	800558e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800553e:	7cfb      	ldrb	r3, [r7, #19]
 8005540:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005544:	2b28      	cmp	r3, #40	; 0x28
 8005546:	d117      	bne.n	8005578 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005566:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2228      	movs	r2, #40	; 0x28
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005576:	e007      	b.n	8005588 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005588:	6978      	ldr	r0, [r7, #20]
 800558a:	f7fe fd0c 	bl	8003fa6 <HAL_I2C_ErrorCallback>
}
 800558e:	bf00      	nop
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000018 	.word	0x20000018
 800559c:	14f8b589 	.word	0x14f8b589

080055a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055b0:	e025      	b.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d021      	beq.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ba:	f7fd f9df 	bl	800297c <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d302      	bcc.n	80055d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d116      	bne.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f043 0220 	orr.w	r2, r3, #32
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e023      	b.n	8005646 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d10d      	bne.n	8005624 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	43da      	mvns	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4013      	ands	r3, r2
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	bf0c      	ite	eq
 800561a:	2301      	moveq	r3, #1
 800561c:	2300      	movne	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	e00c      	b.n	800563e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	43da      	mvns	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4013      	ands	r3, r2
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	429a      	cmp	r2, r3
 8005642:	d0b6      	beq.n	80055b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800565c:	e051      	b.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566c:	d123      	bne.n	80056b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005686:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0204 	orr.w	r2, r3, #4
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e046      	b.n	8005744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d021      	beq.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056be:	f7fd f95d 	bl	800297c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d302      	bcc.n	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d116      	bne.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e020      	b.n	8005744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b01      	cmp	r3, #1
 800570a:	d10c      	bne.n	8005726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	43da      	mvns	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	bf14      	ite	ne
 800571e:	2301      	movne	r3, #1
 8005720:	2300      	moveq	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e00b      	b.n	800573e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	43da      	mvns	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4013      	ands	r3, r2
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	bf14      	ite	ne
 8005738:	2301      	movne	r3, #1
 800573a:	2300      	moveq	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d18d      	bne.n	800565e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005758:	e02d      	b.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 f900 	bl	8005960 <I2C_IsAcknowledgeFailed>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e02d      	b.n	80057c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d021      	beq.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fd f903 	bl	800297c <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d116      	bne.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e007      	b.n	80057c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d1ca      	bne.n	800575a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057da:	e02d      	b.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f8bf 	bl	8005960 <I2C_IsAcknowledgeFailed>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e02d      	b.n	8005848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d021      	beq.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f4:	f7fd f8c2 	bl	800297c <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d116      	bne.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e007      	b.n	8005848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b04      	cmp	r3, #4
 8005844:	d1ca      	bne.n	80057dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	08db      	lsrs	r3, r3, #3
 8005862:	4a13      	ldr	r2, [pc, #76]	; (80058b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005864:	fba2 2303 	umull	r2, r3, r2, r3
 8005868:	0a1a      	lsrs	r2, r3, #8
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3b01      	subs	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d107      	bne.n	800588e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e008      	b.n	80058a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800589c:	d0e9      	beq.n	8005872 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000018 	.word	0x20000018
 80058b0:	14f8b589 	.word	0x14f8b589

080058b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058c0:	e042      	b.n	8005948 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b10      	cmp	r3, #16
 80058ce:	d119      	bne.n	8005904 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0210 	mvn.w	r2, #16
 80058d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e029      	b.n	8005958 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005904:	f7fd f83a 	bl	800297c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	429a      	cmp	r2, r3
 8005912:	d302      	bcc.n	800591a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d116      	bne.n	8005948 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e007      	b.n	8005958 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b40      	cmp	r3, #64	; 0x40
 8005954:	d1b5      	bne.n	80058c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005976:	d11b      	bne.n	80059b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005980:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	f043 0204 	orr.w	r2, r3, #4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80059cc:	d103      	bne.n	80059d6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80059d4:	e007      	b.n	80059e6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80059de:	d102      	bne.n	80059e6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2208      	movs	r2, #8
 80059e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f2:	b08b      	sub	sp, #44	; 0x2c
 80059f4:	af06      	add	r7, sp, #24
 80059f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e0fd      	b.n	8005bfe <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fc fdc8 	bl	80025ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2203      	movs	r2, #3
 8005a20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f002 fa3f 	bl	8007eac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	687e      	ldr	r6, [r7, #4]
 8005a36:	466d      	mov	r5, sp
 8005a38:	f106 0410 	add.w	r4, r6, #16
 8005a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	1d33      	adds	r3, r6, #4
 8005a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a48:	6838      	ldr	r0, [r7, #0]
 8005a4a:	f002 fa1f 	bl	8007e8c <USB_CoreInit>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0ce      	b.n	8005bfe <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f002 fa3a 	bl	8007ee0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	73fb      	strb	r3, [r7, #15]
 8005a70:	e04c      	b.n	8005b0c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	440b      	add	r3, r1
 8005a82:	3301      	adds	r3, #1
 8005a84:	2201      	movs	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	440b      	add	r3, r1
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a9c:	7bfa      	ldrb	r2, [r7, #15]
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	b298      	uxth	r0, r3
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	440b      	add	r3, r1
 8005aae:	3336      	adds	r3, #54	; 0x36
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	440b      	add	r3, r1
 8005ac4:	3303      	adds	r3, #3
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005aca:	7bfa      	ldrb	r2, [r7, #15]
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	440b      	add	r3, r1
 8005ad8:	3338      	adds	r3, #56	; 0x38
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ade:	7bfa      	ldrb	r2, [r7, #15]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	440b      	add	r3, r1
 8005aec:	333c      	adds	r3, #60	; 0x3c
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	440b      	add	r3, r1
 8005b00:	3340      	adds	r3, #64	; 0x40
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
 8005b0c:	7bfa      	ldrb	r2, [r7, #15]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d3ad      	bcc.n	8005a72 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
 8005b1a:	e044      	b.n	8005ba6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b1c:	7bfa      	ldrb	r2, [r7, #15]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	440b      	add	r3, r1
 8005b2a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b32:	7bfa      	ldrb	r2, [r7, #15]
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	440b      	add	r3, r1
 8005b40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b44:	7bfa      	ldrb	r2, [r7, #15]
 8005b46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b48:	7bfa      	ldrb	r2, [r7, #15]
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	440b      	add	r3, r1
 8005b56:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b5e:	7bfa      	ldrb	r2, [r7, #15]
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	440b      	add	r3, r1
 8005b6c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b74:	7bfa      	ldrb	r2, [r7, #15]
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	440b      	add	r3, r1
 8005b82:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b8a:	7bfa      	ldrb	r2, [r7, #15]
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	440b      	add	r3, r1
 8005b98:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
 8005ba6:	7bfa      	ldrb	r2, [r7, #15]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d3b5      	bcc.n	8005b1c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	687e      	ldr	r6, [r7, #4]
 8005bb8:	466d      	mov	r5, sp
 8005bba:	f106 0410 	add.w	r4, r6, #16
 8005bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	602b      	str	r3, [r5, #0]
 8005bc6:	1d33      	adds	r3, r6, #4
 8005bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bca:	6838      	ldr	r0, [r7, #0]
 8005bcc:	f002 f994 	bl	8007ef8 <USB_DevInit>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e00d      	b.n	8005bfe <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f002 f99e 	bl	8007f38 <USB_DevDisconnect>

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005c08 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005c18:	f000 f808 	bl	8005c2c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005c1c:	4b02      	ldr	r3, [pc, #8]	; (8005c28 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005c1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c22:	615a      	str	r2, [r3, #20]
  }
}
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40010400 	.word	0x40010400

08005c2c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005c30:	bf00      	nop
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr

08005c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e272      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8087 	beq.w	8005d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c58:	4b92      	ldr	r3, [pc, #584]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 030c 	and.w	r3, r3, #12
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d00c      	beq.n	8005c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c64:	4b8f      	ldr	r3, [pc, #572]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d112      	bne.n	8005c96 <HAL_RCC_OscConfig+0x5e>
 8005c70:	4b8c      	ldr	r3, [pc, #560]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7c:	d10b      	bne.n	8005c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7e:	4b89      	ldr	r3, [pc, #548]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d06c      	beq.n	8005d64 <HAL_RCC_OscConfig+0x12c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d168      	bne.n	8005d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e24c      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9e:	d106      	bne.n	8005cae <HAL_RCC_OscConfig+0x76>
 8005ca0:	4b80      	ldr	r3, [pc, #512]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a7f      	ldr	r2, [pc, #508]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	e02e      	b.n	8005d0c <HAL_RCC_OscConfig+0xd4>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x98>
 8005cb6:	4b7b      	ldr	r3, [pc, #492]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a7a      	ldr	r2, [pc, #488]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4b78      	ldr	r3, [pc, #480]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a77      	ldr	r2, [pc, #476]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e01d      	b.n	8005d0c <HAL_RCC_OscConfig+0xd4>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0xbc>
 8005cda:	4b72      	ldr	r3, [pc, #456]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a71      	ldr	r2, [pc, #452]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	4b6f      	ldr	r3, [pc, #444]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a6e      	ldr	r2, [pc, #440]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	e00b      	b.n	8005d0c <HAL_RCC_OscConfig+0xd4>
 8005cf4:	4b6b      	ldr	r3, [pc, #428]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a6a      	ldr	r2, [pc, #424]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	4b68      	ldr	r3, [pc, #416]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a67      	ldr	r2, [pc, #412]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d013      	beq.n	8005d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d14:	f7fc fe32 	bl	800297c <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d1c:	f7fc fe2e 	bl	800297c <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b64      	cmp	r3, #100	; 0x64
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e200      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2e:	4b5d      	ldr	r3, [pc, #372]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0xe4>
 8005d3a:	e014      	b.n	8005d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3c:	f7fc fe1e 	bl	800297c <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d44:	f7fc fe1a 	bl	800297c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b64      	cmp	r3, #100	; 0x64
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e1ec      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d56:	4b53      	ldr	r3, [pc, #332]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x10c>
 8005d62:	e000      	b.n	8005d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d063      	beq.n	8005e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d72:	4b4c      	ldr	r3, [pc, #304]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d7e:	4b49      	ldr	r3, [pc, #292]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f003 030c 	and.w	r3, r3, #12
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d11c      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x18c>
 8005d8a:	4b46      	ldr	r3, [pc, #280]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d116      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d96:	4b43      	ldr	r3, [pc, #268]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_RCC_OscConfig+0x176>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d001      	beq.n	8005dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e1c0      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dae:	4b3d      	ldr	r3, [pc, #244]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4939      	ldr	r1, [pc, #228]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dc2:	e03a      	b.n	8005e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d020      	beq.n	8005e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dcc:	4b36      	ldr	r3, [pc, #216]	; (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd2:	f7fc fdd3 	bl	800297c <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dda:	f7fc fdcf 	bl	800297c <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e1a1      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dec:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df8:	4b2a      	ldr	r3, [pc, #168]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4927      	ldr	r1, [pc, #156]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	600b      	str	r3, [r1, #0]
 8005e0c:	e015      	b.n	8005e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e0e:	4b26      	ldr	r3, [pc, #152]	; (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e14:	f7fc fdb2 	bl	800297c <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e1c:	f7fc fdae 	bl	800297c <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e180      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d03a      	beq.n	8005ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d019      	beq.n	8005e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e4e:	4b17      	ldr	r3, [pc, #92]	; (8005eac <HAL_RCC_OscConfig+0x274>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e54:	f7fc fd92 	bl	800297c <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e5c:	f7fc fd8e 	bl	800297c <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e160      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <HAL_RCC_OscConfig+0x26c>)
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0f0      	beq.n	8005e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e7a:	2001      	movs	r0, #1
 8005e7c:	f000 fad8 	bl	8006430 <RCC_Delay>
 8005e80:	e01c      	b.n	8005ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e82:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <HAL_RCC_OscConfig+0x274>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e88:	f7fc fd78 	bl	800297c <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e8e:	e00f      	b.n	8005eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e90:	f7fc fd74 	bl	800297c <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d908      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e146      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
 8005ea2:	bf00      	nop
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	42420000 	.word	0x42420000
 8005eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb0:	4b92      	ldr	r3, [pc, #584]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e9      	bne.n	8005e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80a6 	beq.w	8006016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ece:	4b8b      	ldr	r3, [pc, #556]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10d      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eda:	4b88      	ldr	r3, [pc, #544]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	4a87      	ldr	r2, [pc, #540]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	61d3      	str	r3, [r2, #28]
 8005ee6:	4b85      	ldr	r3, [pc, #532]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eee:	60bb      	str	r3, [r7, #8]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef6:	4b82      	ldr	r3, [pc, #520]	; (8006100 <HAL_RCC_OscConfig+0x4c8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d118      	bne.n	8005f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f02:	4b7f      	ldr	r3, [pc, #508]	; (8006100 <HAL_RCC_OscConfig+0x4c8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a7e      	ldr	r2, [pc, #504]	; (8006100 <HAL_RCC_OscConfig+0x4c8>)
 8005f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f0e:	f7fc fd35 	bl	800297c <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f16:	f7fc fd31 	bl	800297c <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b64      	cmp	r3, #100	; 0x64
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e103      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f28:	4b75      	ldr	r3, [pc, #468]	; (8006100 <HAL_RCC_OscConfig+0x4c8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d106      	bne.n	8005f4a <HAL_RCC_OscConfig+0x312>
 8005f3c:	4b6f      	ldr	r3, [pc, #444]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	4a6e      	ldr	r2, [pc, #440]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	6213      	str	r3, [r2, #32]
 8005f48:	e02d      	b.n	8005fa6 <HAL_RCC_OscConfig+0x36e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10c      	bne.n	8005f6c <HAL_RCC_OscConfig+0x334>
 8005f52:	4b6a      	ldr	r3, [pc, #424]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	4a69      	ldr	r2, [pc, #420]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f58:	f023 0301 	bic.w	r3, r3, #1
 8005f5c:	6213      	str	r3, [r2, #32]
 8005f5e:	4b67      	ldr	r3, [pc, #412]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	4a66      	ldr	r2, [pc, #408]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f64:	f023 0304 	bic.w	r3, r3, #4
 8005f68:	6213      	str	r3, [r2, #32]
 8005f6a:	e01c      	b.n	8005fa6 <HAL_RCC_OscConfig+0x36e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b05      	cmp	r3, #5
 8005f72:	d10c      	bne.n	8005f8e <HAL_RCC_OscConfig+0x356>
 8005f74:	4b61      	ldr	r3, [pc, #388]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	4a60      	ldr	r2, [pc, #384]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f7a:	f043 0304 	orr.w	r3, r3, #4
 8005f7e:	6213      	str	r3, [r2, #32]
 8005f80:	4b5e      	ldr	r3, [pc, #376]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	4a5d      	ldr	r2, [pc, #372]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	6213      	str	r3, [r2, #32]
 8005f8c:	e00b      	b.n	8005fa6 <HAL_RCC_OscConfig+0x36e>
 8005f8e:	4b5b      	ldr	r3, [pc, #364]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	4a5a      	ldr	r2, [pc, #360]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f94:	f023 0301 	bic.w	r3, r3, #1
 8005f98:	6213      	str	r3, [r2, #32]
 8005f9a:	4b58      	ldr	r3, [pc, #352]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	4a57      	ldr	r2, [pc, #348]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005fa0:	f023 0304 	bic.w	r3, r3, #4
 8005fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d015      	beq.n	8005fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fae:	f7fc fce5 	bl	800297c <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb4:	e00a      	b.n	8005fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb6:	f7fc fce1 	bl	800297c <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e0b1      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fcc:	4b4b      	ldr	r3, [pc, #300]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0ee      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x37e>
 8005fd8:	e014      	b.n	8006004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fda:	f7fc fccf 	bl	800297c <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe2:	f7fc fccb 	bl	800297c <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e09b      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff8:	4b40      	ldr	r3, [pc, #256]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1ee      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d105      	bne.n	8006016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800600a:	4b3c      	ldr	r3, [pc, #240]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	4a3b      	ldr	r2, [pc, #236]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8006010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006014:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 8087 	beq.w	800612e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006020:	4b36      	ldr	r3, [pc, #216]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f003 030c 	and.w	r3, r3, #12
 8006028:	2b08      	cmp	r3, #8
 800602a:	d061      	beq.n	80060f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	2b02      	cmp	r3, #2
 8006032:	d146      	bne.n	80060c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006034:	4b33      	ldr	r3, [pc, #204]	; (8006104 <HAL_RCC_OscConfig+0x4cc>)
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603a:	f7fc fc9f 	bl	800297c <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006042:	f7fc fc9b 	bl	800297c <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e06d      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006054:	4b29      	ldr	r3, [pc, #164]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f0      	bne.n	8006042 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006068:	d108      	bne.n	800607c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800606a:	4b24      	ldr	r3, [pc, #144]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	4921      	ldr	r1, [pc, #132]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800607c:	4b1f      	ldr	r3, [pc, #124]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a19      	ldr	r1, [r3, #32]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	430b      	orrs	r3, r1
 800608e:	491b      	ldr	r1, [pc, #108]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 8006090:	4313      	orrs	r3, r2
 8006092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006094:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <HAL_RCC_OscConfig+0x4cc>)
 8006096:	2201      	movs	r2, #1
 8006098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609a:	f7fc fc6f 	bl	800297c <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a2:	f7fc fc6b 	bl	800297c <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e03d      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060b4:	4b11      	ldr	r3, [pc, #68]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0f0      	beq.n	80060a2 <HAL_RCC_OscConfig+0x46a>
 80060c0:	e035      	b.n	800612e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <HAL_RCC_OscConfig+0x4cc>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c8:	f7fc fc58 	bl	800297c <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d0:	f7fc fc54 	bl	800297c <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e026      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_RCC_OscConfig+0x4c4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f0      	bne.n	80060d0 <HAL_RCC_OscConfig+0x498>
 80060ee:	e01e      	b.n	800612e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d107      	bne.n	8006108 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e019      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
 80060fc:	40021000 	.word	0x40021000
 8006100:	40007000 	.word	0x40007000
 8006104:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCC_OscConfig+0x500>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	429a      	cmp	r2, r3
 800611a:	d106      	bne.n	800612a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006126:	429a      	cmp	r2, r3
 8006128:	d001      	beq.n	800612e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40021000 	.word	0x40021000

0800613c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0d0      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006150:	4b6a      	ldr	r3, [pc, #424]	; (80062fc <HAL_RCC_ClockConfig+0x1c0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d910      	bls.n	8006180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615e:	4b67      	ldr	r3, [pc, #412]	; (80062fc <HAL_RCC_ClockConfig+0x1c0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f023 0207 	bic.w	r2, r3, #7
 8006166:	4965      	ldr	r1, [pc, #404]	; (80062fc <HAL_RCC_ClockConfig+0x1c0>)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	4313      	orrs	r3, r2
 800616c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616e:	4b63      	ldr	r3, [pc, #396]	; (80062fc <HAL_RCC_ClockConfig+0x1c0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d001      	beq.n	8006180 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0b8      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d020      	beq.n	80061ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d005      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006198:	4b59      	ldr	r3, [pc, #356]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4a58      	ldr	r2, [pc, #352]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 800619e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061b0:	4b53      	ldr	r3, [pc, #332]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4a52      	ldr	r2, [pc, #328]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80061b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061bc:	4b50      	ldr	r3, [pc, #320]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	494d      	ldr	r1, [pc, #308]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d040      	beq.n	800625c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d107      	bne.n	80061f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061e2:	4b47      	ldr	r3, [pc, #284]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d115      	bne.n	800621a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e07f      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d107      	bne.n	800620a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fa:	4b41      	ldr	r3, [pc, #260]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e073      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800620a:	4b3d      	ldr	r3, [pc, #244]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e06b      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800621a:	4b39      	ldr	r3, [pc, #228]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f023 0203 	bic.w	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4936      	ldr	r1, [pc, #216]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 8006228:	4313      	orrs	r3, r2
 800622a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800622c:	f7fc fba6 	bl	800297c <HAL_GetTick>
 8006230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006232:	e00a      	b.n	800624a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006234:	f7fc fba2 	bl	800297c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e053      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	4b2d      	ldr	r3, [pc, #180]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f003 020c 	and.w	r2, r3, #12
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	429a      	cmp	r2, r3
 800625a:	d1eb      	bne.n	8006234 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800625c:	4b27      	ldr	r3, [pc, #156]	; (80062fc <HAL_RCC_ClockConfig+0x1c0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d210      	bcs.n	800628c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626a:	4b24      	ldr	r3, [pc, #144]	; (80062fc <HAL_RCC_ClockConfig+0x1c0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f023 0207 	bic.w	r2, r3, #7
 8006272:	4922      	ldr	r1, [pc, #136]	; (80062fc <HAL_RCC_ClockConfig+0x1c0>)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	4313      	orrs	r3, r2
 8006278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800627a:	4b20      	ldr	r3, [pc, #128]	; (80062fc <HAL_RCC_ClockConfig+0x1c0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d001      	beq.n	800628c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e032      	b.n	80062f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006298:	4b19      	ldr	r3, [pc, #100]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	4916      	ldr	r1, [pc, #88]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d009      	beq.n	80062ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	490e      	ldr	r1, [pc, #56]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062ca:	f000 f821 	bl	8006310 <HAL_RCC_GetSysClockFreq>
 80062ce:	4602      	mov	r2, r0
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	091b      	lsrs	r3, r3, #4
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	490a      	ldr	r1, [pc, #40]	; (8006304 <HAL_RCC_ClockConfig+0x1c8>)
 80062dc:	5ccb      	ldrb	r3, [r1, r3]
 80062de:	fa22 f303 	lsr.w	r3, r2, r3
 80062e2:	4a09      	ldr	r2, [pc, #36]	; (8006308 <HAL_RCC_ClockConfig+0x1cc>)
 80062e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <HAL_RCC_ClockConfig+0x1d0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fc fb04 	bl	80028f8 <HAL_InitTick>

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40022000 	.word	0x40022000
 8006300:	40021000 	.word	0x40021000
 8006304:	0800c384 	.word	0x0800c384
 8006308:	20000018 	.word	0x20000018
 800630c:	2000001c 	.word	0x2000001c

08006310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006310:	b490      	push	{r4, r7}
 8006312:	b08a      	sub	sp, #40	; 0x28
 8006314:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006316:	4b29      	ldr	r3, [pc, #164]	; (80063bc <HAL_RCC_GetSysClockFreq+0xac>)
 8006318:	1d3c      	adds	r4, r7, #4
 800631a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800631c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006320:	f240 2301 	movw	r3, #513	; 0x201
 8006324:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	2300      	movs	r3, #0
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800633a:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f003 030c 	and.w	r3, r3, #12
 8006346:	2b04      	cmp	r3, #4
 8006348:	d002      	beq.n	8006350 <HAL_RCC_GetSysClockFreq+0x40>
 800634a:	2b08      	cmp	r3, #8
 800634c:	d003      	beq.n	8006356 <HAL_RCC_GetSysClockFreq+0x46>
 800634e:	e02b      	b.n	80063a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006350:	4b1c      	ldr	r3, [pc, #112]	; (80063c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006352:	623b      	str	r3, [r7, #32]
      break;
 8006354:	e02b      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	0c9b      	lsrs	r3, r3, #18
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	3328      	adds	r3, #40	; 0x28
 8006360:	443b      	add	r3, r7
 8006362:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006366:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d012      	beq.n	8006398 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006372:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	0c5b      	lsrs	r3, r3, #17
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	3328      	adds	r3, #40	; 0x28
 800637e:	443b      	add	r3, r7
 8006380:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006384:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	4a0e      	ldr	r2, [pc, #56]	; (80063c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800638a:	fb03 f202 	mul.w	r2, r3, r2
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
 8006396:	e004      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	4a0b      	ldr	r2, [pc, #44]	; (80063c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	623b      	str	r3, [r7, #32]
      break;
 80063a6:	e002      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80063aa:	623b      	str	r3, [r7, #32]
      break;
 80063ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ae:	6a3b      	ldr	r3, [r7, #32]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3728      	adds	r7, #40	; 0x28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc90      	pop	{r4, r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	0800c368 	.word	0x0800c368
 80063c0:	40021000 	.word	0x40021000
 80063c4:	007a1200 	.word	0x007a1200
 80063c8:	003d0900 	.word	0x003d0900

080063cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063d0:	4b02      	ldr	r3, [pc, #8]	; (80063dc <HAL_RCC_GetHCLKFreq+0x10>)
 80063d2:	681b      	ldr	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr
 80063dc:	20000018 	.word	0x20000018

080063e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063e4:	f7ff fff2 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4903      	ldr	r1, [pc, #12]	; (8006404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40021000 	.word	0x40021000
 8006404:	0800c394 	.word	0x0800c394

08006408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800640c:	f7ff ffde 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 8006410:	4602      	mov	r2, r0
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	0adb      	lsrs	r3, r3, #11
 8006418:	f003 0307 	and.w	r3, r3, #7
 800641c:	4903      	ldr	r1, [pc, #12]	; (800642c <HAL_RCC_GetPCLK2Freq+0x24>)
 800641e:	5ccb      	ldrb	r3, [r1, r3]
 8006420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006424:	4618      	mov	r0, r3
 8006426:	bd80      	pop	{r7, pc}
 8006428:	40021000 	.word	0x40021000
 800642c:	0800c394 	.word	0x0800c394

08006430 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006438:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <RCC_Delay+0x34>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a0a      	ldr	r2, [pc, #40]	; (8006468 <RCC_Delay+0x38>)
 800643e:	fba2 2303 	umull	r2, r3, r2, r3
 8006442:	0a5b      	lsrs	r3, r3, #9
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800644c:	bf00      	nop
  }
  while (Delay --);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1e5a      	subs	r2, r3, #1
 8006452:	60fa      	str	r2, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1f9      	bne.n	800644c <RCC_Delay+0x1c>
}
 8006458:	bf00      	nop
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	20000018 	.word	0x20000018
 8006468:	10624dd3 	.word	0x10624dd3

0800646c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d07d      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006488:	2300      	movs	r3, #0
 800648a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800648c:	4b4f      	ldr	r3, [pc, #316]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10d      	bne.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006498:	4b4c      	ldr	r3, [pc, #304]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	4a4b      	ldr	r2, [pc, #300]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800649e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a2:	61d3      	str	r3, [r2, #28]
 80064a4:	4b49      	ldr	r3, [pc, #292]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064b0:	2301      	movs	r3, #1
 80064b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b4:	4b46      	ldr	r3, [pc, #280]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d118      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064c0:	4b43      	ldr	r3, [pc, #268]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a42      	ldr	r2, [pc, #264]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064cc:	f7fc fa56 	bl	800297c <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d2:	e008      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d4:	f7fc fa52 	bl	800297c <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	; 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e06d      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e6:	4b3a      	ldr	r3, [pc, #232]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064f2:	4b36      	ldr	r3, [pc, #216]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d02e      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	429a      	cmp	r2, r3
 800650e:	d027      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006510:	4b2e      	ldr	r3, [pc, #184]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006518:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800651a:	4b2e      	ldr	r3, [pc, #184]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800651c:	2201      	movs	r2, #1
 800651e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006520:	4b2c      	ldr	r3, [pc, #176]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006526:	4a29      	ldr	r2, [pc, #164]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d014      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006536:	f7fc fa21 	bl	800297c <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653c:	e00a      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653e:	f7fc fa1d 	bl	800297c <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	f241 3288 	movw	r2, #5000	; 0x1388
 800654c:	4293      	cmp	r3, r2
 800654e:	d901      	bls.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e036      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006554:	4b1d      	ldr	r3, [pc, #116]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0ee      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006560:	4b1a      	ldr	r3, [pc, #104]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	4917      	ldr	r1, [pc, #92]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800656e:	4313      	orrs	r3, r2
 8006570:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d105      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006578:	4b14      	ldr	r3, [pc, #80]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	4a13      	ldr	r2, [pc, #76]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800657e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006582:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d008      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006590:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	490b      	ldr	r1, [pc, #44]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0310 	and.w	r3, r3, #16
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d008      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	4904      	ldr	r1, [pc, #16]	; (80065cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40021000 	.word	0x40021000
 80065d0:	40007000 	.word	0x40007000
 80065d4:	42420440 	.word	0x42420440

080065d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e076      	b.n	80066d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d108      	bne.n	8006604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065fa:	d009      	beq.n	8006610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	61da      	str	r2, [r3, #28]
 8006602:	e005      	b.n	8006610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fb fe3e 	bl	80022ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006646:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	431a      	orrs	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006694:	ea42 0103 	orr.w	r1, r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	0c1a      	lsrs	r2, r3, #16
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f002 0204 	and.w	r2, r2, #4
 80066b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	099b      	lsrs	r3, r3, #6
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10f      	bne.n	8006724 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	099b      	lsrs	r3, r3, #6
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	4798      	blx	r3
    return;
 8006722:	e0be      	b.n	80068a2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <HAL_SPI_IRQHandler+0x66>
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	09db      	lsrs	r3, r3, #7
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	4798      	blx	r3
    return;
 8006744:	e0ad      	b.n	80068a2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_SPI_IRQHandler+0x80>
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	099b      	lsrs	r3, r3, #6
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 80a1 	beq.w	80068a2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 809a 	beq.w	80068a2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	099b      	lsrs	r3, r3, #6
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d023      	beq.n	80067c2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b03      	cmp	r3, #3
 8006784:	d011      	beq.n	80067aa <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678a:	f043 0204 	orr.w	r2, r3, #4
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	e00b      	b.n	80067c2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067aa:	2300      	movs	r3, #0
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	693b      	ldr	r3, [r7, #16]
        return;
 80067c0:	e06f      	b.n	80068a2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d014      	beq.n	80067f8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d2:	f043 0201 	orr.w	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d04f      	beq.n	80068a0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800680e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <HAL_SPI_IRQHandler+0x14c>
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d034      	beq.n	8006896 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0203 	bic.w	r2, r2, #3
 800683a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d011      	beq.n	8006868 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006848:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <HAL_SPI_IRQHandler+0x1c8>)
 800684a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006850:	4618      	mov	r0, r3
 8006852:	f7fc f9e5 	bl	8002c20 <HAL_DMA_Abort_IT>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006860:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686c:	2b00      	cmp	r3, #0
 800686e:	d016      	beq.n	800689e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006874:	4a0c      	ldr	r2, [pc, #48]	; (80068a8 <HAL_SPI_IRQHandler+0x1c8>)
 8006876:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687c:	4618      	mov	r0, r3
 800687e:	f7fc f9cf 	bl	8002c20 <HAL_DMA_Abort_IT>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006894:	e003      	b.n	800689e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f808 	bl	80068ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800689c:	e000      	b.n	80068a0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800689e:	bf00      	nop
    return;
 80068a0:	bf00      	nop
  }
}
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	080068bf 	.word	0x080068bf

080068ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr

080068be <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff ffe7 	bl	80068ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e041      	b.n	800697c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7fb fd77 	bl	8002400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2202      	movs	r2, #2
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3304      	adds	r3, #4
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f000 fbed 	bl	8007104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d001      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e03a      	b.n	8006a12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a18      	ldr	r2, [pc, #96]	; (8006a1c <HAL_TIM_Base_Start_IT+0x98>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00e      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0x58>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c6:	d009      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0x58>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a14      	ldr	r2, [pc, #80]	; (8006a20 <HAL_TIM_Base_Start_IT+0x9c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0x58>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <HAL_TIM_Base_Start_IT+0xa0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d111      	bne.n	8006a00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b06      	cmp	r3, #6
 80069ec:	d010      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fe:	e007      	b.n	8006a10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40000400 	.word	0x40000400
 8006a24:	40000800 	.word	0x40000800

08006a28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6a1a      	ldr	r2, [r3, #32]
 8006a46:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10f      	bne.n	8006a70 <HAL_TIM_Base_Stop_IT+0x48>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6a1a      	ldr	r2, [r3, #32]
 8006a56:	f240 4344 	movw	r3, #1092	; 0x444
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d107      	bne.n	8006a70 <HAL_TIM_Base_Stop_IT+0x48>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0201 	bic.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e093      	b.n	8006bc0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d106      	bne.n	8006ab2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7fb fc5f 	bl	8002370 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac8:	f023 0307 	bic.w	r3, r3, #7
 8006acc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4610      	mov	r0, r2
 8006ada:	f000 fb13 	bl	8007104 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	4313      	orrs	r3, r2
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b24:	f023 030c 	bic.w	r3, r3, #12
 8006b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	4313      	orrs	r3, r2
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	011a      	lsls	r2, r3, #4
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	031b      	lsls	r3, r3, #12
 8006b54:	4313      	orrs	r3, r2
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006be0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006be8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d110      	bne.n	8006c1a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d102      	bne.n	8006c04 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bfe:	7b7b      	ldrb	r3, [r7, #13]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d001      	beq.n	8006c08 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e089      	b.n	8006d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c18:	e031      	b.n	8006c7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d110      	bne.n	8006c42 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d102      	bne.n	8006c2c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c26:	7b3b      	ldrb	r3, [r7, #12]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d001      	beq.n	8006c30 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e075      	b.n	8006d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c40:	e01d      	b.n	8006c7e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d108      	bne.n	8006c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d105      	bne.n	8006c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c4e:	7b7b      	ldrb	r3, [r7, #13]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d102      	bne.n	8006c5a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c54:	7b3b      	ldrb	r3, [r7, #12]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d001      	beq.n	8006c5e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e05e      	b.n	8006d1c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2202      	movs	r2, #2
 8006c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_TIM_Encoder_Start_IT+0xc4>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d010      	beq.n	8006cac <HAL_TIM_Encoder_Start_IT+0xe4>
 8006c8a:	e01f      	b.n	8006ccc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2201      	movs	r2, #1
 8006c92:	2100      	movs	r1, #0
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fb2d 	bl	80072f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f042 0202 	orr.w	r2, r2, #2
 8006ca8:	60da      	str	r2, [r3, #12]
      break;
 8006caa:	e02e      	b.n	8006d0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	2104      	movs	r1, #4
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fb1d 	bl	80072f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0204 	orr.w	r2, r2, #4
 8006cc8:	60da      	str	r2, [r3, #12]
      break;
 8006cca:	e01e      	b.n	8006d0a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fb0d 	bl	80072f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	2104      	movs	r1, #4
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 fb06 	bl	80072f4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0202 	orr.w	r2, r2, #2
 8006cf6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0204 	orr.w	r2, r2, #4
 8006d06:	60da      	str	r2, [r3, #12]
      break;
 8006d08:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0201 	orr.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d122      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d11b      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0202 	mvn.w	r2, #2
 8006d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f9b1 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006d6c:	e005      	b.n	8006d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9a4 	bl	80070bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f9b3 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d122      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d11b      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f06f 0204 	mvn.w	r2, #4
 8006da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f987 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006dc0:	e005      	b.n	8006dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f97a 	bl	80070bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f989 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d122      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d11b      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0208 	mvn.w	r2, #8
 8006df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2204      	movs	r2, #4
 8006dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f95d 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006e14:	e005      	b.n	8006e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f950 	bl	80070bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f95f 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b10      	cmp	r3, #16
 8006e34:	d122      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d11b      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f06f 0210 	mvn.w	r2, #16
 8006e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2208      	movs	r2, #8
 8006e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f933 	bl	80070ce <HAL_TIM_IC_CaptureCallback>
 8006e68:	e005      	b.n	8006e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f926 	bl	80070bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f935 	bl	80070e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d10e      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d107      	bne.n	8006ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0201 	mvn.w	r2, #1
 8006ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fa fed8 	bl	8001c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb2:	2b80      	cmp	r3, #128	; 0x80
 8006eb4:	d10e      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec0:	2b80      	cmp	r3, #128	; 0x80
 8006ec2:	d107      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa9b 	bl	800740a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d10e      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d107      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f8f9 	bl	80070f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d10e      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0320 	and.w	r3, r3, #32
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d107      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0220 	mvn.w	r2, #32
 8006f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa66 	bl	80073f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_TIM_ConfigClockSource+0x18>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e0b3      	b.n	80070b4 <HAL_TIM_ConfigClockSource+0x180>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f84:	d03e      	beq.n	8007004 <HAL_TIM_ConfigClockSource+0xd0>
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	f200 8087 	bhi.w	800709c <HAL_TIM_ConfigClockSource+0x168>
 8006f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f92:	f000 8085 	beq.w	80070a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f9a:	d87f      	bhi.n	800709c <HAL_TIM_ConfigClockSource+0x168>
 8006f9c:	2b70      	cmp	r3, #112	; 0x70
 8006f9e:	d01a      	beq.n	8006fd6 <HAL_TIM_ConfigClockSource+0xa2>
 8006fa0:	2b70      	cmp	r3, #112	; 0x70
 8006fa2:	d87b      	bhi.n	800709c <HAL_TIM_ConfigClockSource+0x168>
 8006fa4:	2b60      	cmp	r3, #96	; 0x60
 8006fa6:	d050      	beq.n	800704a <HAL_TIM_ConfigClockSource+0x116>
 8006fa8:	2b60      	cmp	r3, #96	; 0x60
 8006faa:	d877      	bhi.n	800709c <HAL_TIM_ConfigClockSource+0x168>
 8006fac:	2b50      	cmp	r3, #80	; 0x50
 8006fae:	d03c      	beq.n	800702a <HAL_TIM_ConfigClockSource+0xf6>
 8006fb0:	2b50      	cmp	r3, #80	; 0x50
 8006fb2:	d873      	bhi.n	800709c <HAL_TIM_ConfigClockSource+0x168>
 8006fb4:	2b40      	cmp	r3, #64	; 0x40
 8006fb6:	d058      	beq.n	800706a <HAL_TIM_ConfigClockSource+0x136>
 8006fb8:	2b40      	cmp	r3, #64	; 0x40
 8006fba:	d86f      	bhi.n	800709c <HAL_TIM_ConfigClockSource+0x168>
 8006fbc:	2b30      	cmp	r3, #48	; 0x30
 8006fbe:	d064      	beq.n	800708a <HAL_TIM_ConfigClockSource+0x156>
 8006fc0:	2b30      	cmp	r3, #48	; 0x30
 8006fc2:	d86b      	bhi.n	800709c <HAL_TIM_ConfigClockSource+0x168>
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d060      	beq.n	800708a <HAL_TIM_ConfigClockSource+0x156>
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d867      	bhi.n	800709c <HAL_TIM_ConfigClockSource+0x168>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d05c      	beq.n	800708a <HAL_TIM_ConfigClockSource+0x156>
 8006fd0:	2b10      	cmp	r3, #16
 8006fd2:	d05a      	beq.n	800708a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006fd4:	e062      	b.n	800709c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	6899      	ldr	r1, [r3, #8]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f000 f966 	bl	80072b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ff8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	609a      	str	r2, [r3, #8]
      break;
 8007002:	e04e      	b.n	80070a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	6899      	ldr	r1, [r3, #8]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f000 f94f 	bl	80072b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007026:	609a      	str	r2, [r3, #8]
      break;
 8007028:	e03b      	b.n	80070a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6818      	ldr	r0, [r3, #0]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	6859      	ldr	r1, [r3, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	461a      	mov	r2, r3
 8007038:	f000 f8c6 	bl	80071c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2150      	movs	r1, #80	; 0x50
 8007042:	4618      	mov	r0, r3
 8007044:	f000 f91d 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8007048:	e02b      	b.n	80070a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6818      	ldr	r0, [r3, #0]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	6859      	ldr	r1, [r3, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	461a      	mov	r2, r3
 8007058:	f000 f8e4 	bl	8007224 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2160      	movs	r1, #96	; 0x60
 8007062:	4618      	mov	r0, r3
 8007064:	f000 f90d 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8007068:	e01b      	b.n	80070a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6859      	ldr	r1, [r3, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	461a      	mov	r2, r3
 8007078:	f000 f8a6 	bl	80071c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2140      	movs	r1, #64	; 0x40
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f8fd 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8007088:	e00b      	b.n	80070a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4619      	mov	r1, r3
 8007094:	4610      	mov	r0, r2
 8007096:	f000 f8f4 	bl	8007282 <TIM_ITRx_SetConfig>
        break;
 800709a:	e002      	b.n	80070a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800709c:	bf00      	nop
 800709e:	e000      	b.n	80070a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80070a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr

080070ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	bc80      	pop	{r7}
 80070de:	4770      	bx	lr

080070e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr

080070f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr

08007104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a29      	ldr	r2, [pc, #164]	; (80071bc <TIM_Base_SetConfig+0xb8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00b      	beq.n	8007134 <TIM_Base_SetConfig+0x30>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007122:	d007      	beq.n	8007134 <TIM_Base_SetConfig+0x30>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a26      	ldr	r2, [pc, #152]	; (80071c0 <TIM_Base_SetConfig+0xbc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_Base_SetConfig+0x30>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a25      	ldr	r2, [pc, #148]	; (80071c4 <TIM_Base_SetConfig+0xc0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d108      	bne.n	8007146 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <TIM_Base_SetConfig+0xb8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00b      	beq.n	8007166 <TIM_Base_SetConfig+0x62>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007154:	d007      	beq.n	8007166 <TIM_Base_SetConfig+0x62>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a19      	ldr	r2, [pc, #100]	; (80071c0 <TIM_Base_SetConfig+0xbc>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_Base_SetConfig+0x62>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a18      	ldr	r2, [pc, #96]	; (80071c4 <TIM_Base_SetConfig+0xc0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d108      	bne.n	8007178 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a07      	ldr	r2, [pc, #28]	; (80071bc <TIM_Base_SetConfig+0xb8>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d103      	bne.n	80071ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	615a      	str	r2, [r3, #20]
}
 80071b2:	bf00      	nop
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40000400 	.word	0x40000400
 80071c4:	40000800 	.word	0x40000800

080071c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f023 0201 	bic.w	r2, r3, #1
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f023 030a 	bic.w	r3, r3, #10
 8007204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr

08007224 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f023 0210 	bic.w	r2, r3, #16
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800724e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	031b      	lsls	r3, r3, #12
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	621a      	str	r2, [r3, #32]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr

08007282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007282:	b480      	push	{r7}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	f043 0307 	orr.w	r3, r3, #7
 80072a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	609a      	str	r2, [r3, #8]
}
 80072ac:	bf00      	nop
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bc80      	pop	{r7}
 80072b4:	4770      	bx	lr

080072b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b087      	sub	sp, #28
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	607a      	str	r2, [r7, #4]
 80072c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	021a      	lsls	r2, r3, #8
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	431a      	orrs	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	4313      	orrs	r3, r2
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	609a      	str	r2, [r3, #8]
}
 80072ea:	bf00      	nop
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr

080072f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f003 031f 	and.w	r3, r3, #31
 8007306:	2201      	movs	r2, #1
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a1a      	ldr	r2, [r3, #32]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	43db      	mvns	r3, r3
 8007316:	401a      	ands	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a1a      	ldr	r2, [r3, #32]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	fa01 f303 	lsl.w	r3, r1, r3
 800732c:	431a      	orrs	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	621a      	str	r2, [r3, #32]
}
 8007332:	bf00      	nop
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007350:	2302      	movs	r3, #2
 8007352:	e046      	b.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a16      	ldr	r2, [pc, #88]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00e      	beq.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a0:	d009      	beq.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a12      	ldr	r2, [pc, #72]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d004      	beq.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a10      	ldr	r2, [pc, #64]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d10c      	bne.n	80073d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr
 80073ec:	40012c00 	.word	0x40012c00
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800

080073f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	bc80      	pop	{r7}
 8007408:	4770      	bx	lr

0800740a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e03f      	b.n	80074ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fb f81c 	bl	8002480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2224      	movs	r2, #36	; 0x24
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800745e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fc85 	bl	8007d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695a      	ldr	r2, [r3, #20]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b08a      	sub	sp, #40	; 0x28
 80074ba:	af02      	add	r7, sp, #8
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	603b      	str	r3, [r7, #0]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d17c      	bne.n	80075d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <HAL_UART_Transmit+0x2c>
 80074dc:	88fb      	ldrh	r3, [r7, #6]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e075      	b.n	80075d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_UART_Transmit+0x3e>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e06e      	b.n	80075d2 <HAL_UART_Transmit+0x11c>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2221      	movs	r2, #33	; 0x21
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800750a:	f7fb fa37 	bl	800297c <HAL_GetTick>
 800750e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	88fa      	ldrh	r2, [r7, #6]
 8007514:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007524:	d108      	bne.n	8007538 <HAL_UART_Transmit+0x82>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	e003      	b.n	8007540 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800753c:	2300      	movs	r3, #0
 800753e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007548:	e02a      	b.n	80075a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2200      	movs	r2, #0
 8007552:	2180      	movs	r1, #128	; 0x80
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fa38 	bl	80079ca <UART_WaitOnFlagUntilTimeout>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e036      	b.n	80075d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10b      	bne.n	8007582 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007578:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	3302      	adds	r3, #2
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	e007      	b.n	8007592 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	781a      	ldrb	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	3301      	adds	r3, #1
 8007590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b01      	subs	r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1cf      	bne.n	800754a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2200      	movs	r2, #0
 80075b2:	2140      	movs	r1, #64	; 0x40
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fa08 	bl	80079ca <UART_WaitOnFlagUntilTimeout>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e006      	b.n	80075d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	e000      	b.n	80075d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075d0:	2302      	movs	r3, #2
  }
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3720      	adds	r7, #32
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	4613      	mov	r3, r2
 80075e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d11d      	bne.n	8007630 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_UART_Receive_IT+0x26>
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e016      	b.n	8007632 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <HAL_UART_Receive_IT+0x38>
 800760e:	2302      	movs	r3, #2
 8007610:	e00f      	b.n	8007632 <HAL_UART_Receive_IT+0x58>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007620:	88fb      	ldrh	r3, [r7, #6]
 8007622:	461a      	mov	r2, r3
 8007624:	68b9      	ldr	r1, [r7, #8]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 fa19 	bl	8007a5e <UART_Start_Receive_IT>
 800762c:	4603      	mov	r3, r0
 800762e:	e000      	b.n	8007632 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007630:	2302      	movs	r3, #2
  }
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08a      	sub	sp, #40	; 0x28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800765c:	2300      	movs	r3, #0
 800765e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007660:	2300      	movs	r3, #0
 8007662:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10d      	bne.n	800768e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b00      	cmp	r3, #0
 800767a:	d008      	beq.n	800768e <HAL_UART_IRQHandler+0x52>
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fac9 	bl	8007c1e <UART_Receive_IT>
      return;
 800768c:	e17b      	b.n	8007986 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 80b1 	beq.w	80077f8 <HAL_UART_IRQHandler+0x1bc>
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d105      	bne.n	80076ac <HAL_UART_IRQHandler+0x70>
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 80a6 	beq.w	80077f8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <HAL_UART_IRQHandler+0x90>
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	f043 0201 	orr.w	r2, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <HAL_UART_IRQHandler+0xb0>
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	f043 0202 	orr.w	r2, r3, #2
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <HAL_UART_IRQHandler+0xd0>
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	f043 0204 	orr.w	r2, r3, #4
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00f      	beq.n	8007736 <HAL_UART_IRQHandler+0xfa>
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <HAL_UART_IRQHandler+0xee>
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	f043 0208 	orr.w	r2, r3, #8
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 811e 	beq.w	800797c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	d007      	beq.n	800775a <HAL_UART_IRQHandler+0x11e>
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	f003 0320 	and.w	r3, r3, #32
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fa62 	bl	8007c1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007764:	2b00      	cmp	r3, #0
 8007766:	bf14      	ite	ne
 8007768:	2301      	movne	r3, #1
 800776a:	2300      	moveq	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b00      	cmp	r3, #0
 800777a:	d102      	bne.n	8007782 <HAL_UART_IRQHandler+0x146>
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d031      	beq.n	80077e6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9a4 	bl	8007ad0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007792:	2b00      	cmp	r3, #0
 8007794:	d023      	beq.n	80077de <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695a      	ldr	r2, [r3, #20]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d013      	beq.n	80077d6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b2:	4a76      	ldr	r2, [pc, #472]	; (800798c <HAL_UART_IRQHandler+0x350>)
 80077b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fb fa30 	bl	8002c20 <HAL_DMA_Abort_IT>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d016      	beq.n	80077f4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d4:	e00e      	b.n	80077f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f8e3 	bl	80079a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077dc:	e00a      	b.n	80077f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f8df 	bl	80079a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e4:	e006      	b.n	80077f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f8db 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077f2:	e0c3      	b.n	800797c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	bf00      	nop
    return;
 80077f6:	e0c1      	b.n	800797c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	f040 80a1 	bne.w	8007944 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 809b 	beq.w	8007944 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8095 	beq.w	8007944 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	60fb      	str	r3, [r7, #12]
 800782e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d04e      	beq.n	80078dc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007848:	8a3b      	ldrh	r3, [r7, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8098 	beq.w	8007980 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007854:	8a3a      	ldrh	r2, [r7, #16]
 8007856:	429a      	cmp	r2, r3
 8007858:	f080 8092 	bcs.w	8007980 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	8a3a      	ldrh	r2, [r7, #16]
 8007860:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	2b20      	cmp	r3, #32
 800786a:	d02b      	beq.n	80078c4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800787a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695a      	ldr	r2, [r3, #20]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0201 	bic.w	r2, r2, #1
 800788a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	695a      	ldr	r2, [r3, #20]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800789a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0210 	bic.w	r2, r2, #16
 80078b8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fb f973 	bl	8002baa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f86d 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80078da:	e051      	b.n	8007980 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d047      	beq.n	8007984 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80078f4:	8a7b      	ldrh	r3, [r7, #18]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d044      	beq.n	8007984 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68da      	ldr	r2, [r3, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007908:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695a      	ldr	r2, [r3, #20]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0201 	bic.w	r2, r2, #1
 8007918:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0210 	bic.w	r2, r2, #16
 8007936:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007938:	8a7b      	ldrh	r3, [r7, #18]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f839 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007942:	e01f      	b.n	8007984 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794a:	2b00      	cmp	r3, #0
 800794c:	d008      	beq.n	8007960 <HAL_UART_IRQHandler+0x324>
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f8f9 	bl	8007b50 <UART_Transmit_IT>
    return;
 800795e:	e012      	b.n	8007986 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00d      	beq.n	8007986 <HAL_UART_IRQHandler+0x34a>
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f93a 	bl	8007bee <UART_EndTransmit_IT>
    return;
 800797a:	e004      	b.n	8007986 <HAL_UART_IRQHandler+0x34a>
    return;
 800797c:	bf00      	nop
 800797e:	e002      	b.n	8007986 <HAL_UART_IRQHandler+0x34a>
      return;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <HAL_UART_IRQHandler+0x34a>
      return;
 8007984:	bf00      	nop
  }
}
 8007986:	3728      	adds	r7, #40	; 0x28
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	08007b29 	.word	0x08007b29

08007990 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr

080079b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr

080079ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	60f8      	str	r0, [r7, #12]
 80079d2:	60b9      	str	r1, [r7, #8]
 80079d4:	603b      	str	r3, [r7, #0]
 80079d6:	4613      	mov	r3, r2
 80079d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079da:	e02c      	b.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e2:	d028      	beq.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d007      	beq.n	80079fa <UART_WaitOnFlagUntilTimeout+0x30>
 80079ea:	f7fa ffc7 	bl	800297c <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d21d      	bcs.n	8007a36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0201 	bic.w	r2, r2, #1
 8007a18:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e00f      	b.n	8007a56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	bf0c      	ite	eq
 8007a46:	2301      	moveq	r3, #1
 8007a48:	2300      	movne	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d0c3      	beq.n	80079dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	88fa      	ldrh	r2, [r7, #6]
 8007a76:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	88fa      	ldrh	r2, [r7, #6]
 8007a7c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2222      	movs	r2, #34	; 0x22
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aa2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0201 	orr.w	r2, r2, #1
 8007ab2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0220 	orr.w	r2, r2, #32
 8007ac2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr

08007ad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ae6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	695a      	ldr	r2, [r3, #20]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0201 	bic.w	r2, r2, #1
 8007af6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d107      	bne.n	8007b10 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0210 	bic.w	r2, r2, #16
 8007b0e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr

08007b28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7ff ff2d 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b48:	bf00      	nop
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b21      	cmp	r3, #33	; 0x21
 8007b62:	d13e      	bne.n	8007be2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6c:	d114      	bne.n	8007b98 <UART_Transmit_IT+0x48>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d110      	bne.n	8007b98 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	1c9a      	adds	r2, r3, #2
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	621a      	str	r2, [r3, #32]
 8007b96:	e008      	b.n	8007baa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	1c59      	adds	r1, r3, #1
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6211      	str	r1, [r2, #32]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10f      	bne.n	8007bde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	e000      	b.n	8007be4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007be2:	2302      	movs	r3, #2
  }
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr

08007bee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff febe 	bl	8007990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b086      	sub	sp, #24
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b22      	cmp	r3, #34	; 0x22
 8007c30:	f040 8099 	bne.w	8007d66 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3c:	d117      	bne.n	8007c6e <UART_Receive_IT+0x50>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d113      	bne.n	8007c6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	1c9a      	adds	r2, r3, #2
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c6c:	e026      	b.n	8007cbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c80:	d007      	beq.n	8007c92 <UART_Receive_IT+0x74>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10a      	bne.n	8007ca0 <UART_Receive_IT+0x82>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e008      	b.n	8007cb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d148      	bne.n	8007d62 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0220 	bic.w	r2, r2, #32
 8007cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695a      	ldr	r2, [r3, #20]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0201 	bic.w	r2, r2, #1
 8007cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d123      	bne.n	8007d58 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0210 	bic.w	r2, r2, #16
 8007d24:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b10      	cmp	r3, #16
 8007d32:	d10a      	bne.n	8007d4a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff fe2f 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 8007d56:	e002      	b.n	8007d5e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fa f8c3 	bl	8001ee4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e002      	b.n	8007d68 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e000      	b.n	8007d68 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007d66:	2302      	movs	r3, #2
  }
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007daa:	f023 030c 	bic.w	r3, r3, #12
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	430b      	orrs	r3, r1
 8007db6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a2c      	ldr	r2, [pc, #176]	; (8007e84 <UART_SetConfig+0x114>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d103      	bne.n	8007de0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007dd8:	f7fe fb16 	bl	8006408 <HAL_RCC_GetPCLK2Freq>
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	e002      	b.n	8007de6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007de0:	f7fe fafe 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8007de4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4613      	mov	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	009a      	lsls	r2, r3, #2
 8007df0:	441a      	add	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfc:	4a22      	ldr	r2, [pc, #136]	; (8007e88 <UART_SetConfig+0x118>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	095b      	lsrs	r3, r3, #5
 8007e04:	0119      	lsls	r1, r3, #4
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009a      	lsls	r2, r3, #2
 8007e10:	441a      	add	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e1c:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <UART_SetConfig+0x118>)
 8007e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	2064      	movs	r0, #100	; 0x64
 8007e26:	fb00 f303 	mul.w	r3, r0, r3
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	3332      	adds	r3, #50	; 0x32
 8007e30:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <UART_SetConfig+0x118>)
 8007e32:	fba2 2303 	umull	r2, r3, r2, r3
 8007e36:	095b      	lsrs	r3, r3, #5
 8007e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e3c:	4419      	add	r1, r3
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	009a      	lsls	r2, r3, #2
 8007e48:	441a      	add	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e54:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <UART_SetConfig+0x118>)
 8007e56:	fba3 0302 	umull	r0, r3, r3, r2
 8007e5a:	095b      	lsrs	r3, r3, #5
 8007e5c:	2064      	movs	r0, #100	; 0x64
 8007e5e:	fb00 f303 	mul.w	r3, r0, r3
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	3332      	adds	r3, #50	; 0x32
 8007e68:	4a07      	ldr	r2, [pc, #28]	; (8007e88 <UART_SetConfig+0x118>)
 8007e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6e:	095b      	lsrs	r3, r3, #5
 8007e70:	f003 020f 	and.w	r2, r3, #15
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	440a      	add	r2, r1
 8007e7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007e7c:	bf00      	nop
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	40013800 	.word	0x40013800
 8007e88:	51eb851f 	.word	0x51eb851f

08007e8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	f107 0014 	add.w	r0, r7, #20
 8007e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	b004      	add	sp, #16
 8007eaa:	4770      	bx	lr

08007eac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007eb4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007eb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	43db      	mvns	r3, r3
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	4013      	ands	r3, r2
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bc80      	pop	{r7}
 8007ede:	4770      	bx	lr

08007ee0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr

08007ef8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ef8:	b084      	sub	sp, #16
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	f107 0014 	add.w	r0, r7, #20
 8007f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	b004      	add	sp, #16
 8007f36:	4770      	bx	lr

08007f38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr

08007f4c <atof>:
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	f001 babf 	b.w	80094d0 <strtod>
	...

08007f54 <__errno>:
 8007f54:	4b01      	ldr	r3, [pc, #4]	; (8007f5c <__errno+0x8>)
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	20000024 	.word	0x20000024

08007f60 <__libc_init_array>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	2600      	movs	r6, #0
 8007f64:	4d0c      	ldr	r5, [pc, #48]	; (8007f98 <__libc_init_array+0x38>)
 8007f66:	4c0d      	ldr	r4, [pc, #52]	; (8007f9c <__libc_init_array+0x3c>)
 8007f68:	1b64      	subs	r4, r4, r5
 8007f6a:	10a4      	asrs	r4, r4, #2
 8007f6c:	42a6      	cmp	r6, r4
 8007f6e:	d109      	bne.n	8007f84 <__libc_init_array+0x24>
 8007f70:	f004 f9c8 	bl	800c304 <_init>
 8007f74:	2600      	movs	r6, #0
 8007f76:	4d0a      	ldr	r5, [pc, #40]	; (8007fa0 <__libc_init_array+0x40>)
 8007f78:	4c0a      	ldr	r4, [pc, #40]	; (8007fa4 <__libc_init_array+0x44>)
 8007f7a:	1b64      	subs	r4, r4, r5
 8007f7c:	10a4      	asrs	r4, r4, #2
 8007f7e:	42a6      	cmp	r6, r4
 8007f80:	d105      	bne.n	8007f8e <__libc_init_array+0x2e>
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f88:	4798      	blx	r3
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7ee      	b.n	8007f6c <__libc_init_array+0xc>
 8007f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f92:	4798      	blx	r3
 8007f94:	3601      	adds	r6, #1
 8007f96:	e7f2      	b.n	8007f7e <__libc_init_array+0x1e>
 8007f98:	0800c83c 	.word	0x0800c83c
 8007f9c:	0800c83c 	.word	0x0800c83c
 8007fa0:	0800c83c 	.word	0x0800c83c
 8007fa4:	0800c840 	.word	0x0800c840

08007fa8 <memset>:
 8007fa8:	4603      	mov	r3, r0
 8007faa:	4402      	add	r2, r0
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d100      	bne.n	8007fb2 <memset+0xa>
 8007fb0:	4770      	bx	lr
 8007fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fb6:	e7f9      	b.n	8007fac <memset+0x4>

08007fb8 <__cvt>:
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbe:	461f      	mov	r7, r3
 8007fc0:	bfbb      	ittet	lt
 8007fc2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007fc6:	461f      	movlt	r7, r3
 8007fc8:	2300      	movge	r3, #0
 8007fca:	232d      	movlt	r3, #45	; 0x2d
 8007fcc:	b088      	sub	sp, #32
 8007fce:	4614      	mov	r4, r2
 8007fd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007fd4:	7013      	strb	r3, [r2, #0]
 8007fd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fd8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007fdc:	f023 0820 	bic.w	r8, r3, #32
 8007fe0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fe4:	d005      	beq.n	8007ff2 <__cvt+0x3a>
 8007fe6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fea:	d100      	bne.n	8007fee <__cvt+0x36>
 8007fec:	3501      	adds	r5, #1
 8007fee:	2302      	movs	r3, #2
 8007ff0:	e000      	b.n	8007ff4 <__cvt+0x3c>
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	aa07      	add	r2, sp, #28
 8007ff6:	9204      	str	r2, [sp, #16]
 8007ff8:	aa06      	add	r2, sp, #24
 8007ffa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007ffe:	e9cd 3500 	strd	r3, r5, [sp]
 8008002:	4622      	mov	r2, r4
 8008004:	463b      	mov	r3, r7
 8008006:	f001 fafb 	bl	8009600 <_dtoa_r>
 800800a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800800e:	4606      	mov	r6, r0
 8008010:	d102      	bne.n	8008018 <__cvt+0x60>
 8008012:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008014:	07db      	lsls	r3, r3, #31
 8008016:	d522      	bpl.n	800805e <__cvt+0xa6>
 8008018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800801c:	eb06 0905 	add.w	r9, r6, r5
 8008020:	d110      	bne.n	8008044 <__cvt+0x8c>
 8008022:	7833      	ldrb	r3, [r6, #0]
 8008024:	2b30      	cmp	r3, #48	; 0x30
 8008026:	d10a      	bne.n	800803e <__cvt+0x86>
 8008028:	2200      	movs	r2, #0
 800802a:	2300      	movs	r3, #0
 800802c:	4620      	mov	r0, r4
 800802e:	4639      	mov	r1, r7
 8008030:	f7f8 fd6e 	bl	8000b10 <__aeabi_dcmpeq>
 8008034:	b918      	cbnz	r0, 800803e <__cvt+0x86>
 8008036:	f1c5 0501 	rsb	r5, r5, #1
 800803a:	f8ca 5000 	str.w	r5, [sl]
 800803e:	f8da 3000 	ldr.w	r3, [sl]
 8008042:	4499      	add	r9, r3
 8008044:	2200      	movs	r2, #0
 8008046:	2300      	movs	r3, #0
 8008048:	4620      	mov	r0, r4
 800804a:	4639      	mov	r1, r7
 800804c:	f7f8 fd60 	bl	8000b10 <__aeabi_dcmpeq>
 8008050:	b108      	cbz	r0, 8008056 <__cvt+0x9e>
 8008052:	f8cd 901c 	str.w	r9, [sp, #28]
 8008056:	2230      	movs	r2, #48	; 0x30
 8008058:	9b07      	ldr	r3, [sp, #28]
 800805a:	454b      	cmp	r3, r9
 800805c:	d307      	bcc.n	800806e <__cvt+0xb6>
 800805e:	4630      	mov	r0, r6
 8008060:	9b07      	ldr	r3, [sp, #28]
 8008062:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008064:	1b9b      	subs	r3, r3, r6
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	b008      	add	sp, #32
 800806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806e:	1c59      	adds	r1, r3, #1
 8008070:	9107      	str	r1, [sp, #28]
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	e7f0      	b.n	8008058 <__cvt+0xa0>

08008076 <__exponent>:
 8008076:	4603      	mov	r3, r0
 8008078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800807a:	2900      	cmp	r1, #0
 800807c:	f803 2b02 	strb.w	r2, [r3], #2
 8008080:	bfb6      	itet	lt
 8008082:	222d      	movlt	r2, #45	; 0x2d
 8008084:	222b      	movge	r2, #43	; 0x2b
 8008086:	4249      	neglt	r1, r1
 8008088:	2909      	cmp	r1, #9
 800808a:	7042      	strb	r2, [r0, #1]
 800808c:	dd2b      	ble.n	80080e6 <__exponent+0x70>
 800808e:	f10d 0407 	add.w	r4, sp, #7
 8008092:	46a4      	mov	ip, r4
 8008094:	270a      	movs	r7, #10
 8008096:	fb91 f6f7 	sdiv	r6, r1, r7
 800809a:	460a      	mov	r2, r1
 800809c:	46a6      	mov	lr, r4
 800809e:	fb07 1516 	mls	r5, r7, r6, r1
 80080a2:	2a63      	cmp	r2, #99	; 0x63
 80080a4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80080a8:	4631      	mov	r1, r6
 80080aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80080ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080b2:	dcf0      	bgt.n	8008096 <__exponent+0x20>
 80080b4:	3130      	adds	r1, #48	; 0x30
 80080b6:	f1ae 0502 	sub.w	r5, lr, #2
 80080ba:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080be:	4629      	mov	r1, r5
 80080c0:	1c44      	adds	r4, r0, #1
 80080c2:	4561      	cmp	r1, ip
 80080c4:	d30a      	bcc.n	80080dc <__exponent+0x66>
 80080c6:	f10d 0209 	add.w	r2, sp, #9
 80080ca:	eba2 020e 	sub.w	r2, r2, lr
 80080ce:	4565      	cmp	r5, ip
 80080d0:	bf88      	it	hi
 80080d2:	2200      	movhi	r2, #0
 80080d4:	4413      	add	r3, r2
 80080d6:	1a18      	subs	r0, r3, r0
 80080d8:	b003      	add	sp, #12
 80080da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080e0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80080e4:	e7ed      	b.n	80080c2 <__exponent+0x4c>
 80080e6:	2330      	movs	r3, #48	; 0x30
 80080e8:	3130      	adds	r1, #48	; 0x30
 80080ea:	7083      	strb	r3, [r0, #2]
 80080ec:	70c1      	strb	r1, [r0, #3]
 80080ee:	1d03      	adds	r3, r0, #4
 80080f0:	e7f1      	b.n	80080d6 <__exponent+0x60>
	...

080080f4 <_printf_float>:
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f8:	b091      	sub	sp, #68	; 0x44
 80080fa:	460c      	mov	r4, r1
 80080fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008100:	4616      	mov	r6, r2
 8008102:	461f      	mov	r7, r3
 8008104:	4605      	mov	r5, r0
 8008106:	f002 fbcf 	bl	800a8a8 <_localeconv_r>
 800810a:	6803      	ldr	r3, [r0, #0]
 800810c:	4618      	mov	r0, r3
 800810e:	9309      	str	r3, [sp, #36]	; 0x24
 8008110:	f7f8 f81e 	bl	8000150 <strlen>
 8008114:	2300      	movs	r3, #0
 8008116:	930e      	str	r3, [sp, #56]	; 0x38
 8008118:	f8d8 3000 	ldr.w	r3, [r8]
 800811c:	900a      	str	r0, [sp, #40]	; 0x28
 800811e:	3307      	adds	r3, #7
 8008120:	f023 0307 	bic.w	r3, r3, #7
 8008124:	f103 0208 	add.w	r2, r3, #8
 8008128:	f894 9018 	ldrb.w	r9, [r4, #24]
 800812c:	f8d4 b000 	ldr.w	fp, [r4]
 8008130:	f8c8 2000 	str.w	r2, [r8]
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800813c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008140:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008144:	930b      	str	r3, [sp, #44]	; 0x2c
 8008146:	f04f 32ff 	mov.w	r2, #4294967295
 800814a:	4640      	mov	r0, r8
 800814c:	4b9c      	ldr	r3, [pc, #624]	; (80083c0 <_printf_float+0x2cc>)
 800814e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008150:	f7f8 fd10 	bl	8000b74 <__aeabi_dcmpun>
 8008154:	bb70      	cbnz	r0, 80081b4 <_printf_float+0xc0>
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	4640      	mov	r0, r8
 800815c:	4b98      	ldr	r3, [pc, #608]	; (80083c0 <_printf_float+0x2cc>)
 800815e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008160:	f7f8 fcea 	bl	8000b38 <__aeabi_dcmple>
 8008164:	bb30      	cbnz	r0, 80081b4 <_printf_float+0xc0>
 8008166:	2200      	movs	r2, #0
 8008168:	2300      	movs	r3, #0
 800816a:	4640      	mov	r0, r8
 800816c:	4651      	mov	r1, sl
 800816e:	f7f8 fcd9 	bl	8000b24 <__aeabi_dcmplt>
 8008172:	b110      	cbz	r0, 800817a <_printf_float+0x86>
 8008174:	232d      	movs	r3, #45	; 0x2d
 8008176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800817a:	4b92      	ldr	r3, [pc, #584]	; (80083c4 <_printf_float+0x2d0>)
 800817c:	4892      	ldr	r0, [pc, #584]	; (80083c8 <_printf_float+0x2d4>)
 800817e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008182:	bf94      	ite	ls
 8008184:	4698      	movls	r8, r3
 8008186:	4680      	movhi	r8, r0
 8008188:	2303      	movs	r3, #3
 800818a:	f04f 0a00 	mov.w	sl, #0
 800818e:	6123      	str	r3, [r4, #16]
 8008190:	f02b 0304 	bic.w	r3, fp, #4
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	4633      	mov	r3, r6
 8008198:	4621      	mov	r1, r4
 800819a:	4628      	mov	r0, r5
 800819c:	9700      	str	r7, [sp, #0]
 800819e:	aa0f      	add	r2, sp, #60	; 0x3c
 80081a0:	f000 f9d4 	bl	800854c <_printf_common>
 80081a4:	3001      	adds	r0, #1
 80081a6:	f040 8090 	bne.w	80082ca <_printf_float+0x1d6>
 80081aa:	f04f 30ff 	mov.w	r0, #4294967295
 80081ae:	b011      	add	sp, #68	; 0x44
 80081b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b4:	4642      	mov	r2, r8
 80081b6:	4653      	mov	r3, sl
 80081b8:	4640      	mov	r0, r8
 80081ba:	4651      	mov	r1, sl
 80081bc:	f7f8 fcda 	bl	8000b74 <__aeabi_dcmpun>
 80081c0:	b148      	cbz	r0, 80081d6 <_printf_float+0xe2>
 80081c2:	f1ba 0f00 	cmp.w	sl, #0
 80081c6:	bfb8      	it	lt
 80081c8:	232d      	movlt	r3, #45	; 0x2d
 80081ca:	4880      	ldr	r0, [pc, #512]	; (80083cc <_printf_float+0x2d8>)
 80081cc:	bfb8      	it	lt
 80081ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081d2:	4b7f      	ldr	r3, [pc, #508]	; (80083d0 <_printf_float+0x2dc>)
 80081d4:	e7d3      	b.n	800817e <_printf_float+0x8a>
 80081d6:	6863      	ldr	r3, [r4, #4]
 80081d8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	d142      	bne.n	8008266 <_printf_float+0x172>
 80081e0:	2306      	movs	r3, #6
 80081e2:	6063      	str	r3, [r4, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	9206      	str	r2, [sp, #24]
 80081e8:	aa0e      	add	r2, sp, #56	; 0x38
 80081ea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80081ee:	aa0d      	add	r2, sp, #52	; 0x34
 80081f0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80081f4:	9203      	str	r2, [sp, #12]
 80081f6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80081fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	6863      	ldr	r3, [r4, #4]
 8008202:	4642      	mov	r2, r8
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	4628      	mov	r0, r5
 8008208:	4653      	mov	r3, sl
 800820a:	910b      	str	r1, [sp, #44]	; 0x2c
 800820c:	f7ff fed4 	bl	8007fb8 <__cvt>
 8008210:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008212:	4680      	mov	r8, r0
 8008214:	2947      	cmp	r1, #71	; 0x47
 8008216:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008218:	d108      	bne.n	800822c <_printf_float+0x138>
 800821a:	1cc8      	adds	r0, r1, #3
 800821c:	db02      	blt.n	8008224 <_printf_float+0x130>
 800821e:	6863      	ldr	r3, [r4, #4]
 8008220:	4299      	cmp	r1, r3
 8008222:	dd40      	ble.n	80082a6 <_printf_float+0x1b2>
 8008224:	f1a9 0902 	sub.w	r9, r9, #2
 8008228:	fa5f f989 	uxtb.w	r9, r9
 800822c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008230:	d81f      	bhi.n	8008272 <_printf_float+0x17e>
 8008232:	464a      	mov	r2, r9
 8008234:	3901      	subs	r1, #1
 8008236:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800823a:	910d      	str	r1, [sp, #52]	; 0x34
 800823c:	f7ff ff1b 	bl	8008076 <__exponent>
 8008240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008242:	4682      	mov	sl, r0
 8008244:	1813      	adds	r3, r2, r0
 8008246:	2a01      	cmp	r2, #1
 8008248:	6123      	str	r3, [r4, #16]
 800824a:	dc02      	bgt.n	8008252 <_printf_float+0x15e>
 800824c:	6822      	ldr	r2, [r4, #0]
 800824e:	07d2      	lsls	r2, r2, #31
 8008250:	d501      	bpl.n	8008256 <_printf_float+0x162>
 8008252:	3301      	adds	r3, #1
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800825a:	2b00      	cmp	r3, #0
 800825c:	d09b      	beq.n	8008196 <_printf_float+0xa2>
 800825e:	232d      	movs	r3, #45	; 0x2d
 8008260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008264:	e797      	b.n	8008196 <_printf_float+0xa2>
 8008266:	2947      	cmp	r1, #71	; 0x47
 8008268:	d1bc      	bne.n	80081e4 <_printf_float+0xf0>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1ba      	bne.n	80081e4 <_printf_float+0xf0>
 800826e:	2301      	movs	r3, #1
 8008270:	e7b7      	b.n	80081e2 <_printf_float+0xee>
 8008272:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008276:	d118      	bne.n	80082aa <_printf_float+0x1b6>
 8008278:	2900      	cmp	r1, #0
 800827a:	6863      	ldr	r3, [r4, #4]
 800827c:	dd0b      	ble.n	8008296 <_printf_float+0x1a2>
 800827e:	6121      	str	r1, [r4, #16]
 8008280:	b913      	cbnz	r3, 8008288 <_printf_float+0x194>
 8008282:	6822      	ldr	r2, [r4, #0]
 8008284:	07d0      	lsls	r0, r2, #31
 8008286:	d502      	bpl.n	800828e <_printf_float+0x19a>
 8008288:	3301      	adds	r3, #1
 800828a:	440b      	add	r3, r1
 800828c:	6123      	str	r3, [r4, #16]
 800828e:	f04f 0a00 	mov.w	sl, #0
 8008292:	65a1      	str	r1, [r4, #88]	; 0x58
 8008294:	e7df      	b.n	8008256 <_printf_float+0x162>
 8008296:	b913      	cbnz	r3, 800829e <_printf_float+0x1aa>
 8008298:	6822      	ldr	r2, [r4, #0]
 800829a:	07d2      	lsls	r2, r2, #31
 800829c:	d501      	bpl.n	80082a2 <_printf_float+0x1ae>
 800829e:	3302      	adds	r3, #2
 80082a0:	e7f4      	b.n	800828c <_printf_float+0x198>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e7f2      	b.n	800828c <_printf_float+0x198>
 80082a6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80082aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082ac:	4299      	cmp	r1, r3
 80082ae:	db05      	blt.n	80082bc <_printf_float+0x1c8>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	6121      	str	r1, [r4, #16]
 80082b4:	07d8      	lsls	r0, r3, #31
 80082b6:	d5ea      	bpl.n	800828e <_printf_float+0x19a>
 80082b8:	1c4b      	adds	r3, r1, #1
 80082ba:	e7e7      	b.n	800828c <_printf_float+0x198>
 80082bc:	2900      	cmp	r1, #0
 80082be:	bfcc      	ite	gt
 80082c0:	2201      	movgt	r2, #1
 80082c2:	f1c1 0202 	rsble	r2, r1, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	e7e0      	b.n	800828c <_printf_float+0x198>
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	055a      	lsls	r2, r3, #21
 80082ce:	d407      	bmi.n	80082e0 <_printf_float+0x1ec>
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	4642      	mov	r2, r8
 80082d4:	4631      	mov	r1, r6
 80082d6:	4628      	mov	r0, r5
 80082d8:	47b8      	blx	r7
 80082da:	3001      	adds	r0, #1
 80082dc:	d12b      	bne.n	8008336 <_printf_float+0x242>
 80082de:	e764      	b.n	80081aa <_printf_float+0xb6>
 80082e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082e4:	f240 80dd 	bls.w	80084a2 <_printf_float+0x3ae>
 80082e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082ec:	2200      	movs	r2, #0
 80082ee:	2300      	movs	r3, #0
 80082f0:	f7f8 fc0e 	bl	8000b10 <__aeabi_dcmpeq>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d033      	beq.n	8008360 <_printf_float+0x26c>
 80082f8:	2301      	movs	r3, #1
 80082fa:	4631      	mov	r1, r6
 80082fc:	4628      	mov	r0, r5
 80082fe:	4a35      	ldr	r2, [pc, #212]	; (80083d4 <_printf_float+0x2e0>)
 8008300:	47b8      	blx	r7
 8008302:	3001      	adds	r0, #1
 8008304:	f43f af51 	beq.w	80081aa <_printf_float+0xb6>
 8008308:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800830c:	429a      	cmp	r2, r3
 800830e:	db02      	blt.n	8008316 <_printf_float+0x222>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	07d8      	lsls	r0, r3, #31
 8008314:	d50f      	bpl.n	8008336 <_printf_float+0x242>
 8008316:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800831a:	4631      	mov	r1, r6
 800831c:	4628      	mov	r0, r5
 800831e:	47b8      	blx	r7
 8008320:	3001      	adds	r0, #1
 8008322:	f43f af42 	beq.w	80081aa <_printf_float+0xb6>
 8008326:	f04f 0800 	mov.w	r8, #0
 800832a:	f104 091a 	add.w	r9, r4, #26
 800832e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008330:	3b01      	subs	r3, #1
 8008332:	4543      	cmp	r3, r8
 8008334:	dc09      	bgt.n	800834a <_printf_float+0x256>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	079b      	lsls	r3, r3, #30
 800833a:	f100 8102 	bmi.w	8008542 <_printf_float+0x44e>
 800833e:	68e0      	ldr	r0, [r4, #12]
 8008340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008342:	4298      	cmp	r0, r3
 8008344:	bfb8      	it	lt
 8008346:	4618      	movlt	r0, r3
 8008348:	e731      	b.n	80081ae <_printf_float+0xba>
 800834a:	2301      	movs	r3, #1
 800834c:	464a      	mov	r2, r9
 800834e:	4631      	mov	r1, r6
 8008350:	4628      	mov	r0, r5
 8008352:	47b8      	blx	r7
 8008354:	3001      	adds	r0, #1
 8008356:	f43f af28 	beq.w	80081aa <_printf_float+0xb6>
 800835a:	f108 0801 	add.w	r8, r8, #1
 800835e:	e7e6      	b.n	800832e <_printf_float+0x23a>
 8008360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008362:	2b00      	cmp	r3, #0
 8008364:	dc38      	bgt.n	80083d8 <_printf_float+0x2e4>
 8008366:	2301      	movs	r3, #1
 8008368:	4631      	mov	r1, r6
 800836a:	4628      	mov	r0, r5
 800836c:	4a19      	ldr	r2, [pc, #100]	; (80083d4 <_printf_float+0x2e0>)
 800836e:	47b8      	blx	r7
 8008370:	3001      	adds	r0, #1
 8008372:	f43f af1a 	beq.w	80081aa <_printf_float+0xb6>
 8008376:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800837a:	4313      	orrs	r3, r2
 800837c:	d102      	bne.n	8008384 <_printf_float+0x290>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	07d9      	lsls	r1, r3, #31
 8008382:	d5d8      	bpl.n	8008336 <_printf_float+0x242>
 8008384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008388:	4631      	mov	r1, r6
 800838a:	4628      	mov	r0, r5
 800838c:	47b8      	blx	r7
 800838e:	3001      	adds	r0, #1
 8008390:	f43f af0b 	beq.w	80081aa <_printf_float+0xb6>
 8008394:	f04f 0900 	mov.w	r9, #0
 8008398:	f104 0a1a 	add.w	sl, r4, #26
 800839c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800839e:	425b      	negs	r3, r3
 80083a0:	454b      	cmp	r3, r9
 80083a2:	dc01      	bgt.n	80083a8 <_printf_float+0x2b4>
 80083a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a6:	e794      	b.n	80082d2 <_printf_float+0x1de>
 80083a8:	2301      	movs	r3, #1
 80083aa:	4652      	mov	r2, sl
 80083ac:	4631      	mov	r1, r6
 80083ae:	4628      	mov	r0, r5
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	f43f aef9 	beq.w	80081aa <_printf_float+0xb6>
 80083b8:	f109 0901 	add.w	r9, r9, #1
 80083bc:	e7ee      	b.n	800839c <_printf_float+0x2a8>
 80083be:	bf00      	nop
 80083c0:	7fefffff 	.word	0x7fefffff
 80083c4:	0800c3a0 	.word	0x0800c3a0
 80083c8:	0800c3a4 	.word	0x0800c3a4
 80083cc:	0800c3ac 	.word	0x0800c3ac
 80083d0:	0800c3a8 	.word	0x0800c3a8
 80083d4:	0800c3b0 	.word	0x0800c3b0
 80083d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083dc:	429a      	cmp	r2, r3
 80083de:	bfa8      	it	ge
 80083e0:	461a      	movge	r2, r3
 80083e2:	2a00      	cmp	r2, #0
 80083e4:	4691      	mov	r9, r2
 80083e6:	dc37      	bgt.n	8008458 <_printf_float+0x364>
 80083e8:	f04f 0b00 	mov.w	fp, #0
 80083ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083f0:	f104 021a 	add.w	r2, r4, #26
 80083f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083f8:	ebaa 0309 	sub.w	r3, sl, r9
 80083fc:	455b      	cmp	r3, fp
 80083fe:	dc33      	bgt.n	8008468 <_printf_float+0x374>
 8008400:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008404:	429a      	cmp	r2, r3
 8008406:	db3b      	blt.n	8008480 <_printf_float+0x38c>
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	07da      	lsls	r2, r3, #31
 800840c:	d438      	bmi.n	8008480 <_printf_float+0x38c>
 800840e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008410:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008412:	eba3 020a 	sub.w	r2, r3, sl
 8008416:	eba3 0901 	sub.w	r9, r3, r1
 800841a:	4591      	cmp	r9, r2
 800841c:	bfa8      	it	ge
 800841e:	4691      	movge	r9, r2
 8008420:	f1b9 0f00 	cmp.w	r9, #0
 8008424:	dc34      	bgt.n	8008490 <_printf_float+0x39c>
 8008426:	f04f 0800 	mov.w	r8, #0
 800842a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800842e:	f104 0a1a 	add.w	sl, r4, #26
 8008432:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	eba3 0309 	sub.w	r3, r3, r9
 800843c:	4543      	cmp	r3, r8
 800843e:	f77f af7a 	ble.w	8008336 <_printf_float+0x242>
 8008442:	2301      	movs	r3, #1
 8008444:	4652      	mov	r2, sl
 8008446:	4631      	mov	r1, r6
 8008448:	4628      	mov	r0, r5
 800844a:	47b8      	blx	r7
 800844c:	3001      	adds	r0, #1
 800844e:	f43f aeac 	beq.w	80081aa <_printf_float+0xb6>
 8008452:	f108 0801 	add.w	r8, r8, #1
 8008456:	e7ec      	b.n	8008432 <_printf_float+0x33e>
 8008458:	4613      	mov	r3, r2
 800845a:	4631      	mov	r1, r6
 800845c:	4642      	mov	r2, r8
 800845e:	4628      	mov	r0, r5
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	d1c0      	bne.n	80083e8 <_printf_float+0x2f4>
 8008466:	e6a0      	b.n	80081aa <_printf_float+0xb6>
 8008468:	2301      	movs	r3, #1
 800846a:	4631      	mov	r1, r6
 800846c:	4628      	mov	r0, r5
 800846e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	f43f ae99 	beq.w	80081aa <_printf_float+0xb6>
 8008478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800847a:	f10b 0b01 	add.w	fp, fp, #1
 800847e:	e7b9      	b.n	80083f4 <_printf_float+0x300>
 8008480:	4631      	mov	r1, r6
 8008482:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008486:	4628      	mov	r0, r5
 8008488:	47b8      	blx	r7
 800848a:	3001      	adds	r0, #1
 800848c:	d1bf      	bne.n	800840e <_printf_float+0x31a>
 800848e:	e68c      	b.n	80081aa <_printf_float+0xb6>
 8008490:	464b      	mov	r3, r9
 8008492:	4631      	mov	r1, r6
 8008494:	4628      	mov	r0, r5
 8008496:	eb08 020a 	add.w	r2, r8, sl
 800849a:	47b8      	blx	r7
 800849c:	3001      	adds	r0, #1
 800849e:	d1c2      	bne.n	8008426 <_printf_float+0x332>
 80084a0:	e683      	b.n	80081aa <_printf_float+0xb6>
 80084a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084a4:	2a01      	cmp	r2, #1
 80084a6:	dc01      	bgt.n	80084ac <_printf_float+0x3b8>
 80084a8:	07db      	lsls	r3, r3, #31
 80084aa:	d537      	bpl.n	800851c <_printf_float+0x428>
 80084ac:	2301      	movs	r3, #1
 80084ae:	4642      	mov	r2, r8
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	f43f ae77 	beq.w	80081aa <_printf_float+0xb6>
 80084bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084c0:	4631      	mov	r1, r6
 80084c2:	4628      	mov	r0, r5
 80084c4:	47b8      	blx	r7
 80084c6:	3001      	adds	r0, #1
 80084c8:	f43f ae6f 	beq.w	80081aa <_printf_float+0xb6>
 80084cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084d0:	2200      	movs	r2, #0
 80084d2:	2300      	movs	r3, #0
 80084d4:	f7f8 fb1c 	bl	8000b10 <__aeabi_dcmpeq>
 80084d8:	b9d8      	cbnz	r0, 8008512 <_printf_float+0x41e>
 80084da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084dc:	f108 0201 	add.w	r2, r8, #1
 80084e0:	3b01      	subs	r3, #1
 80084e2:	4631      	mov	r1, r6
 80084e4:	4628      	mov	r0, r5
 80084e6:	47b8      	blx	r7
 80084e8:	3001      	adds	r0, #1
 80084ea:	d10e      	bne.n	800850a <_printf_float+0x416>
 80084ec:	e65d      	b.n	80081aa <_printf_float+0xb6>
 80084ee:	2301      	movs	r3, #1
 80084f0:	464a      	mov	r2, r9
 80084f2:	4631      	mov	r1, r6
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b8      	blx	r7
 80084f8:	3001      	adds	r0, #1
 80084fa:	f43f ae56 	beq.w	80081aa <_printf_float+0xb6>
 80084fe:	f108 0801 	add.w	r8, r8, #1
 8008502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008504:	3b01      	subs	r3, #1
 8008506:	4543      	cmp	r3, r8
 8008508:	dcf1      	bgt.n	80084ee <_printf_float+0x3fa>
 800850a:	4653      	mov	r3, sl
 800850c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008510:	e6e0      	b.n	80082d4 <_printf_float+0x1e0>
 8008512:	f04f 0800 	mov.w	r8, #0
 8008516:	f104 091a 	add.w	r9, r4, #26
 800851a:	e7f2      	b.n	8008502 <_printf_float+0x40e>
 800851c:	2301      	movs	r3, #1
 800851e:	4642      	mov	r2, r8
 8008520:	e7df      	b.n	80084e2 <_printf_float+0x3ee>
 8008522:	2301      	movs	r3, #1
 8008524:	464a      	mov	r2, r9
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	47b8      	blx	r7
 800852c:	3001      	adds	r0, #1
 800852e:	f43f ae3c 	beq.w	80081aa <_printf_float+0xb6>
 8008532:	f108 0801 	add.w	r8, r8, #1
 8008536:	68e3      	ldr	r3, [r4, #12]
 8008538:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800853a:	1a5b      	subs	r3, r3, r1
 800853c:	4543      	cmp	r3, r8
 800853e:	dcf0      	bgt.n	8008522 <_printf_float+0x42e>
 8008540:	e6fd      	b.n	800833e <_printf_float+0x24a>
 8008542:	f04f 0800 	mov.w	r8, #0
 8008546:	f104 0919 	add.w	r9, r4, #25
 800854a:	e7f4      	b.n	8008536 <_printf_float+0x442>

0800854c <_printf_common>:
 800854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008550:	4616      	mov	r6, r2
 8008552:	4699      	mov	r9, r3
 8008554:	688a      	ldr	r2, [r1, #8]
 8008556:	690b      	ldr	r3, [r1, #16]
 8008558:	4607      	mov	r7, r0
 800855a:	4293      	cmp	r3, r2
 800855c:	bfb8      	it	lt
 800855e:	4613      	movlt	r3, r2
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008566:	460c      	mov	r4, r1
 8008568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800856c:	b10a      	cbz	r2, 8008572 <_printf_common+0x26>
 800856e:	3301      	adds	r3, #1
 8008570:	6033      	str	r3, [r6, #0]
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	0699      	lsls	r1, r3, #26
 8008576:	bf42      	ittt	mi
 8008578:	6833      	ldrmi	r3, [r6, #0]
 800857a:	3302      	addmi	r3, #2
 800857c:	6033      	strmi	r3, [r6, #0]
 800857e:	6825      	ldr	r5, [r4, #0]
 8008580:	f015 0506 	ands.w	r5, r5, #6
 8008584:	d106      	bne.n	8008594 <_printf_common+0x48>
 8008586:	f104 0a19 	add.w	sl, r4, #25
 800858a:	68e3      	ldr	r3, [r4, #12]
 800858c:	6832      	ldr	r2, [r6, #0]
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	42ab      	cmp	r3, r5
 8008592:	dc28      	bgt.n	80085e6 <_printf_common+0x9a>
 8008594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008598:	1e13      	subs	r3, r2, #0
 800859a:	6822      	ldr	r2, [r4, #0]
 800859c:	bf18      	it	ne
 800859e:	2301      	movne	r3, #1
 80085a0:	0692      	lsls	r2, r2, #26
 80085a2:	d42d      	bmi.n	8008600 <_printf_common+0xb4>
 80085a4:	4649      	mov	r1, r9
 80085a6:	4638      	mov	r0, r7
 80085a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085ac:	47c0      	blx	r8
 80085ae:	3001      	adds	r0, #1
 80085b0:	d020      	beq.n	80085f4 <_printf_common+0xa8>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	68e5      	ldr	r5, [r4, #12]
 80085b6:	f003 0306 	and.w	r3, r3, #6
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	bf18      	it	ne
 80085be:	2500      	movne	r5, #0
 80085c0:	6832      	ldr	r2, [r6, #0]
 80085c2:	f04f 0600 	mov.w	r6, #0
 80085c6:	68a3      	ldr	r3, [r4, #8]
 80085c8:	bf08      	it	eq
 80085ca:	1aad      	subeq	r5, r5, r2
 80085cc:	6922      	ldr	r2, [r4, #16]
 80085ce:	bf08      	it	eq
 80085d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085d4:	4293      	cmp	r3, r2
 80085d6:	bfc4      	itt	gt
 80085d8:	1a9b      	subgt	r3, r3, r2
 80085da:	18ed      	addgt	r5, r5, r3
 80085dc:	341a      	adds	r4, #26
 80085de:	42b5      	cmp	r5, r6
 80085e0:	d11a      	bne.n	8008618 <_printf_common+0xcc>
 80085e2:	2000      	movs	r0, #0
 80085e4:	e008      	b.n	80085f8 <_printf_common+0xac>
 80085e6:	2301      	movs	r3, #1
 80085e8:	4652      	mov	r2, sl
 80085ea:	4649      	mov	r1, r9
 80085ec:	4638      	mov	r0, r7
 80085ee:	47c0      	blx	r8
 80085f0:	3001      	adds	r0, #1
 80085f2:	d103      	bne.n	80085fc <_printf_common+0xb0>
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295
 80085f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fc:	3501      	adds	r5, #1
 80085fe:	e7c4      	b.n	800858a <_printf_common+0x3e>
 8008600:	2030      	movs	r0, #48	; 0x30
 8008602:	18e1      	adds	r1, r4, r3
 8008604:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800860e:	4422      	add	r2, r4
 8008610:	3302      	adds	r3, #2
 8008612:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008616:	e7c5      	b.n	80085a4 <_printf_common+0x58>
 8008618:	2301      	movs	r3, #1
 800861a:	4622      	mov	r2, r4
 800861c:	4649      	mov	r1, r9
 800861e:	4638      	mov	r0, r7
 8008620:	47c0      	blx	r8
 8008622:	3001      	adds	r0, #1
 8008624:	d0e6      	beq.n	80085f4 <_printf_common+0xa8>
 8008626:	3601      	adds	r6, #1
 8008628:	e7d9      	b.n	80085de <_printf_common+0x92>
	...

0800862c <_printf_i>:
 800862c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	7e0f      	ldrb	r7, [r1, #24]
 8008632:	4691      	mov	r9, r2
 8008634:	2f78      	cmp	r7, #120	; 0x78
 8008636:	4680      	mov	r8, r0
 8008638:	460c      	mov	r4, r1
 800863a:	469a      	mov	sl, r3
 800863c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800863e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008642:	d807      	bhi.n	8008654 <_printf_i+0x28>
 8008644:	2f62      	cmp	r7, #98	; 0x62
 8008646:	d80a      	bhi.n	800865e <_printf_i+0x32>
 8008648:	2f00      	cmp	r7, #0
 800864a:	f000 80d9 	beq.w	8008800 <_printf_i+0x1d4>
 800864e:	2f58      	cmp	r7, #88	; 0x58
 8008650:	f000 80a4 	beq.w	800879c <_printf_i+0x170>
 8008654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800865c:	e03a      	b.n	80086d4 <_printf_i+0xa8>
 800865e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008662:	2b15      	cmp	r3, #21
 8008664:	d8f6      	bhi.n	8008654 <_printf_i+0x28>
 8008666:	a101      	add	r1, pc, #4	; (adr r1, 800866c <_printf_i+0x40>)
 8008668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800866c:	080086c5 	.word	0x080086c5
 8008670:	080086d9 	.word	0x080086d9
 8008674:	08008655 	.word	0x08008655
 8008678:	08008655 	.word	0x08008655
 800867c:	08008655 	.word	0x08008655
 8008680:	08008655 	.word	0x08008655
 8008684:	080086d9 	.word	0x080086d9
 8008688:	08008655 	.word	0x08008655
 800868c:	08008655 	.word	0x08008655
 8008690:	08008655 	.word	0x08008655
 8008694:	08008655 	.word	0x08008655
 8008698:	080087e7 	.word	0x080087e7
 800869c:	08008709 	.word	0x08008709
 80086a0:	080087c9 	.word	0x080087c9
 80086a4:	08008655 	.word	0x08008655
 80086a8:	08008655 	.word	0x08008655
 80086ac:	08008809 	.word	0x08008809
 80086b0:	08008655 	.word	0x08008655
 80086b4:	08008709 	.word	0x08008709
 80086b8:	08008655 	.word	0x08008655
 80086bc:	08008655 	.word	0x08008655
 80086c0:	080087d1 	.word	0x080087d1
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	1d1a      	adds	r2, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	602a      	str	r2, [r5, #0]
 80086cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0a4      	b.n	8008822 <_printf_i+0x1f6>
 80086d8:	6820      	ldr	r0, [r4, #0]
 80086da:	6829      	ldr	r1, [r5, #0]
 80086dc:	0606      	lsls	r6, r0, #24
 80086de:	f101 0304 	add.w	r3, r1, #4
 80086e2:	d50a      	bpl.n	80086fa <_printf_i+0xce>
 80086e4:	680e      	ldr	r6, [r1, #0]
 80086e6:	602b      	str	r3, [r5, #0]
 80086e8:	2e00      	cmp	r6, #0
 80086ea:	da03      	bge.n	80086f4 <_printf_i+0xc8>
 80086ec:	232d      	movs	r3, #45	; 0x2d
 80086ee:	4276      	negs	r6, r6
 80086f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f4:	230a      	movs	r3, #10
 80086f6:	485e      	ldr	r0, [pc, #376]	; (8008870 <_printf_i+0x244>)
 80086f8:	e019      	b.n	800872e <_printf_i+0x102>
 80086fa:	680e      	ldr	r6, [r1, #0]
 80086fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008700:	602b      	str	r3, [r5, #0]
 8008702:	bf18      	it	ne
 8008704:	b236      	sxthne	r6, r6
 8008706:	e7ef      	b.n	80086e8 <_printf_i+0xbc>
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	6820      	ldr	r0, [r4, #0]
 800870c:	1d19      	adds	r1, r3, #4
 800870e:	6029      	str	r1, [r5, #0]
 8008710:	0601      	lsls	r1, r0, #24
 8008712:	d501      	bpl.n	8008718 <_printf_i+0xec>
 8008714:	681e      	ldr	r6, [r3, #0]
 8008716:	e002      	b.n	800871e <_printf_i+0xf2>
 8008718:	0646      	lsls	r6, r0, #25
 800871a:	d5fb      	bpl.n	8008714 <_printf_i+0xe8>
 800871c:	881e      	ldrh	r6, [r3, #0]
 800871e:	2f6f      	cmp	r7, #111	; 0x6f
 8008720:	bf0c      	ite	eq
 8008722:	2308      	moveq	r3, #8
 8008724:	230a      	movne	r3, #10
 8008726:	4852      	ldr	r0, [pc, #328]	; (8008870 <_printf_i+0x244>)
 8008728:	2100      	movs	r1, #0
 800872a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800872e:	6865      	ldr	r5, [r4, #4]
 8008730:	2d00      	cmp	r5, #0
 8008732:	bfa8      	it	ge
 8008734:	6821      	ldrge	r1, [r4, #0]
 8008736:	60a5      	str	r5, [r4, #8]
 8008738:	bfa4      	itt	ge
 800873a:	f021 0104 	bicge.w	r1, r1, #4
 800873e:	6021      	strge	r1, [r4, #0]
 8008740:	b90e      	cbnz	r6, 8008746 <_printf_i+0x11a>
 8008742:	2d00      	cmp	r5, #0
 8008744:	d04d      	beq.n	80087e2 <_printf_i+0x1b6>
 8008746:	4615      	mov	r5, r2
 8008748:	fbb6 f1f3 	udiv	r1, r6, r3
 800874c:	fb03 6711 	mls	r7, r3, r1, r6
 8008750:	5dc7      	ldrb	r7, [r0, r7]
 8008752:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008756:	4637      	mov	r7, r6
 8008758:	42bb      	cmp	r3, r7
 800875a:	460e      	mov	r6, r1
 800875c:	d9f4      	bls.n	8008748 <_printf_i+0x11c>
 800875e:	2b08      	cmp	r3, #8
 8008760:	d10b      	bne.n	800877a <_printf_i+0x14e>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	07de      	lsls	r6, r3, #31
 8008766:	d508      	bpl.n	800877a <_printf_i+0x14e>
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	6861      	ldr	r1, [r4, #4]
 800876c:	4299      	cmp	r1, r3
 800876e:	bfde      	ittt	le
 8008770:	2330      	movle	r3, #48	; 0x30
 8008772:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008776:	f105 35ff 	addle.w	r5, r5, #4294967295
 800877a:	1b52      	subs	r2, r2, r5
 800877c:	6122      	str	r2, [r4, #16]
 800877e:	464b      	mov	r3, r9
 8008780:	4621      	mov	r1, r4
 8008782:	4640      	mov	r0, r8
 8008784:	f8cd a000 	str.w	sl, [sp]
 8008788:	aa03      	add	r2, sp, #12
 800878a:	f7ff fedf 	bl	800854c <_printf_common>
 800878e:	3001      	adds	r0, #1
 8008790:	d14c      	bne.n	800882c <_printf_i+0x200>
 8008792:	f04f 30ff 	mov.w	r0, #4294967295
 8008796:	b004      	add	sp, #16
 8008798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879c:	4834      	ldr	r0, [pc, #208]	; (8008870 <_printf_i+0x244>)
 800879e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087a2:	6829      	ldr	r1, [r5, #0]
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80087aa:	6029      	str	r1, [r5, #0]
 80087ac:	061d      	lsls	r5, r3, #24
 80087ae:	d514      	bpl.n	80087da <_printf_i+0x1ae>
 80087b0:	07df      	lsls	r7, r3, #31
 80087b2:	bf44      	itt	mi
 80087b4:	f043 0320 	orrmi.w	r3, r3, #32
 80087b8:	6023      	strmi	r3, [r4, #0]
 80087ba:	b91e      	cbnz	r6, 80087c4 <_printf_i+0x198>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	f023 0320 	bic.w	r3, r3, #32
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	2310      	movs	r3, #16
 80087c6:	e7af      	b.n	8008728 <_printf_i+0xfc>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	f043 0320 	orr.w	r3, r3, #32
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	2378      	movs	r3, #120	; 0x78
 80087d2:	4828      	ldr	r0, [pc, #160]	; (8008874 <_printf_i+0x248>)
 80087d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087d8:	e7e3      	b.n	80087a2 <_printf_i+0x176>
 80087da:	0659      	lsls	r1, r3, #25
 80087dc:	bf48      	it	mi
 80087de:	b2b6      	uxthmi	r6, r6
 80087e0:	e7e6      	b.n	80087b0 <_printf_i+0x184>
 80087e2:	4615      	mov	r5, r2
 80087e4:	e7bb      	b.n	800875e <_printf_i+0x132>
 80087e6:	682b      	ldr	r3, [r5, #0]
 80087e8:	6826      	ldr	r6, [r4, #0]
 80087ea:	1d18      	adds	r0, r3, #4
 80087ec:	6961      	ldr	r1, [r4, #20]
 80087ee:	6028      	str	r0, [r5, #0]
 80087f0:	0635      	lsls	r5, r6, #24
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	d501      	bpl.n	80087fa <_printf_i+0x1ce>
 80087f6:	6019      	str	r1, [r3, #0]
 80087f8:	e002      	b.n	8008800 <_printf_i+0x1d4>
 80087fa:	0670      	lsls	r0, r6, #25
 80087fc:	d5fb      	bpl.n	80087f6 <_printf_i+0x1ca>
 80087fe:	8019      	strh	r1, [r3, #0]
 8008800:	2300      	movs	r3, #0
 8008802:	4615      	mov	r5, r2
 8008804:	6123      	str	r3, [r4, #16]
 8008806:	e7ba      	b.n	800877e <_printf_i+0x152>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	2100      	movs	r1, #0
 800880c:	1d1a      	adds	r2, r3, #4
 800880e:	602a      	str	r2, [r5, #0]
 8008810:	681d      	ldr	r5, [r3, #0]
 8008812:	6862      	ldr	r2, [r4, #4]
 8008814:	4628      	mov	r0, r5
 8008816:	f002 f865 	bl	800a8e4 <memchr>
 800881a:	b108      	cbz	r0, 8008820 <_printf_i+0x1f4>
 800881c:	1b40      	subs	r0, r0, r5
 800881e:	6060      	str	r0, [r4, #4]
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	6123      	str	r3, [r4, #16]
 8008824:	2300      	movs	r3, #0
 8008826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800882a:	e7a8      	b.n	800877e <_printf_i+0x152>
 800882c:	462a      	mov	r2, r5
 800882e:	4649      	mov	r1, r9
 8008830:	4640      	mov	r0, r8
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	47d0      	blx	sl
 8008836:	3001      	adds	r0, #1
 8008838:	d0ab      	beq.n	8008792 <_printf_i+0x166>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	079b      	lsls	r3, r3, #30
 800883e:	d413      	bmi.n	8008868 <_printf_i+0x23c>
 8008840:	68e0      	ldr	r0, [r4, #12]
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	4298      	cmp	r0, r3
 8008846:	bfb8      	it	lt
 8008848:	4618      	movlt	r0, r3
 800884a:	e7a4      	b.n	8008796 <_printf_i+0x16a>
 800884c:	2301      	movs	r3, #1
 800884e:	4632      	mov	r2, r6
 8008850:	4649      	mov	r1, r9
 8008852:	4640      	mov	r0, r8
 8008854:	47d0      	blx	sl
 8008856:	3001      	adds	r0, #1
 8008858:	d09b      	beq.n	8008792 <_printf_i+0x166>
 800885a:	3501      	adds	r5, #1
 800885c:	68e3      	ldr	r3, [r4, #12]
 800885e:	9903      	ldr	r1, [sp, #12]
 8008860:	1a5b      	subs	r3, r3, r1
 8008862:	42ab      	cmp	r3, r5
 8008864:	dcf2      	bgt.n	800884c <_printf_i+0x220>
 8008866:	e7eb      	b.n	8008840 <_printf_i+0x214>
 8008868:	2500      	movs	r5, #0
 800886a:	f104 0619 	add.w	r6, r4, #25
 800886e:	e7f5      	b.n	800885c <_printf_i+0x230>
 8008870:	0800c3b2 	.word	0x0800c3b2
 8008874:	0800c3c3 	.word	0x0800c3c3

08008878 <siprintf>:
 8008878:	b40e      	push	{r1, r2, r3}
 800887a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800887e:	b500      	push	{lr}
 8008880:	b09c      	sub	sp, #112	; 0x70
 8008882:	ab1d      	add	r3, sp, #116	; 0x74
 8008884:	9002      	str	r0, [sp, #8]
 8008886:	9006      	str	r0, [sp, #24]
 8008888:	9107      	str	r1, [sp, #28]
 800888a:	9104      	str	r1, [sp, #16]
 800888c:	4808      	ldr	r0, [pc, #32]	; (80088b0 <siprintf+0x38>)
 800888e:	4909      	ldr	r1, [pc, #36]	; (80088b4 <siprintf+0x3c>)
 8008890:	f853 2b04 	ldr.w	r2, [r3], #4
 8008894:	9105      	str	r1, [sp, #20]
 8008896:	6800      	ldr	r0, [r0, #0]
 8008898:	a902      	add	r1, sp, #8
 800889a:	9301      	str	r3, [sp, #4]
 800889c:	f002 fe42 	bl	800b524 <_svfiprintf_r>
 80088a0:	2200      	movs	r2, #0
 80088a2:	9b02      	ldr	r3, [sp, #8]
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	b01c      	add	sp, #112	; 0x70
 80088a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088ac:	b003      	add	sp, #12
 80088ae:	4770      	bx	lr
 80088b0:	20000024 	.word	0x20000024
 80088b4:	ffff0208 	.word	0xffff0208

080088b8 <sulp>:
 80088b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088bc:	460f      	mov	r7, r1
 80088be:	4690      	mov	r8, r2
 80088c0:	f002 fb9c 	bl	800affc <__ulp>
 80088c4:	4604      	mov	r4, r0
 80088c6:	460d      	mov	r5, r1
 80088c8:	f1b8 0f00 	cmp.w	r8, #0
 80088cc:	d011      	beq.n	80088f2 <sulp+0x3a>
 80088ce:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80088d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	dd0b      	ble.n	80088f2 <sulp+0x3a>
 80088da:	2400      	movs	r4, #0
 80088dc:	051b      	lsls	r3, r3, #20
 80088de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088e6:	4622      	mov	r2, r4
 80088e8:	462b      	mov	r3, r5
 80088ea:	f7f7 fea9 	bl	8000640 <__aeabi_dmul>
 80088ee:	4604      	mov	r4, r0
 80088f0:	460d      	mov	r5, r1
 80088f2:	4620      	mov	r0, r4
 80088f4:	4629      	mov	r1, r5
 80088f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fa:	0000      	movs	r0, r0
 80088fc:	0000      	movs	r0, r0
	...

08008900 <_strtod_l>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	469b      	mov	fp, r3
 8008906:	2300      	movs	r3, #0
 8008908:	b09f      	sub	sp, #124	; 0x7c
 800890a:	931a      	str	r3, [sp, #104]	; 0x68
 800890c:	4b9e      	ldr	r3, [pc, #632]	; (8008b88 <_strtod_l+0x288>)
 800890e:	4682      	mov	sl, r0
 8008910:	681f      	ldr	r7, [r3, #0]
 8008912:	460e      	mov	r6, r1
 8008914:	4638      	mov	r0, r7
 8008916:	9215      	str	r2, [sp, #84]	; 0x54
 8008918:	f7f7 fc1a 	bl	8000150 <strlen>
 800891c:	f04f 0800 	mov.w	r8, #0
 8008920:	4604      	mov	r4, r0
 8008922:	f04f 0900 	mov.w	r9, #0
 8008926:	9619      	str	r6, [sp, #100]	; 0x64
 8008928:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800892a:	781a      	ldrb	r2, [r3, #0]
 800892c:	2a2b      	cmp	r2, #43	; 0x2b
 800892e:	d04c      	beq.n	80089ca <_strtod_l+0xca>
 8008930:	d83a      	bhi.n	80089a8 <_strtod_l+0xa8>
 8008932:	2a0d      	cmp	r2, #13
 8008934:	d833      	bhi.n	800899e <_strtod_l+0x9e>
 8008936:	2a08      	cmp	r2, #8
 8008938:	d833      	bhi.n	80089a2 <_strtod_l+0xa2>
 800893a:	2a00      	cmp	r2, #0
 800893c:	d03d      	beq.n	80089ba <_strtod_l+0xba>
 800893e:	2300      	movs	r3, #0
 8008940:	930a      	str	r3, [sp, #40]	; 0x28
 8008942:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008944:	782b      	ldrb	r3, [r5, #0]
 8008946:	2b30      	cmp	r3, #48	; 0x30
 8008948:	f040 80aa 	bne.w	8008aa0 <_strtod_l+0x1a0>
 800894c:	786b      	ldrb	r3, [r5, #1]
 800894e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008952:	2b58      	cmp	r3, #88	; 0x58
 8008954:	d166      	bne.n	8008a24 <_strtod_l+0x124>
 8008956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008958:	4650      	mov	r0, sl
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	ab1a      	add	r3, sp, #104	; 0x68
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	4a8a      	ldr	r2, [pc, #552]	; (8008b8c <_strtod_l+0x28c>)
 8008962:	f8cd b008 	str.w	fp, [sp, #8]
 8008966:	ab1b      	add	r3, sp, #108	; 0x6c
 8008968:	a919      	add	r1, sp, #100	; 0x64
 800896a:	f001 fc9f 	bl	800a2ac <__gethex>
 800896e:	f010 0607 	ands.w	r6, r0, #7
 8008972:	4604      	mov	r4, r0
 8008974:	d005      	beq.n	8008982 <_strtod_l+0x82>
 8008976:	2e06      	cmp	r6, #6
 8008978:	d129      	bne.n	80089ce <_strtod_l+0xce>
 800897a:	2300      	movs	r3, #0
 800897c:	3501      	adds	r5, #1
 800897e:	9519      	str	r5, [sp, #100]	; 0x64
 8008980:	930a      	str	r3, [sp, #40]	; 0x28
 8008982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 858a 	bne.w	800949e <_strtod_l+0xb9e>
 800898a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898c:	b1d3      	cbz	r3, 80089c4 <_strtod_l+0xc4>
 800898e:	4642      	mov	r2, r8
 8008990:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008994:	4610      	mov	r0, r2
 8008996:	4619      	mov	r1, r3
 8008998:	b01f      	add	sp, #124	; 0x7c
 800899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899e:	2a20      	cmp	r2, #32
 80089a0:	d1cd      	bne.n	800893e <_strtod_l+0x3e>
 80089a2:	3301      	adds	r3, #1
 80089a4:	9319      	str	r3, [sp, #100]	; 0x64
 80089a6:	e7bf      	b.n	8008928 <_strtod_l+0x28>
 80089a8:	2a2d      	cmp	r2, #45	; 0x2d
 80089aa:	d1c8      	bne.n	800893e <_strtod_l+0x3e>
 80089ac:	2201      	movs	r2, #1
 80089ae:	920a      	str	r2, [sp, #40]	; 0x28
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	9219      	str	r2, [sp, #100]	; 0x64
 80089b4:	785b      	ldrb	r3, [r3, #1]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1c3      	bne.n	8008942 <_strtod_l+0x42>
 80089ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089bc:	9619      	str	r6, [sp, #100]	; 0x64
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f040 856b 	bne.w	800949a <_strtod_l+0xb9a>
 80089c4:	4642      	mov	r2, r8
 80089c6:	464b      	mov	r3, r9
 80089c8:	e7e4      	b.n	8008994 <_strtod_l+0x94>
 80089ca:	2200      	movs	r2, #0
 80089cc:	e7ef      	b.n	80089ae <_strtod_l+0xae>
 80089ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80089d0:	b13a      	cbz	r2, 80089e2 <_strtod_l+0xe2>
 80089d2:	2135      	movs	r1, #53	; 0x35
 80089d4:	a81c      	add	r0, sp, #112	; 0x70
 80089d6:	f002 fc15 	bl	800b204 <__copybits>
 80089da:	4650      	mov	r0, sl
 80089dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80089de:	f001 ffdd 	bl	800a99c <_Bfree>
 80089e2:	3e01      	subs	r6, #1
 80089e4:	2e04      	cmp	r6, #4
 80089e6:	d806      	bhi.n	80089f6 <_strtod_l+0xf6>
 80089e8:	e8df f006 	tbb	[pc, r6]
 80089ec:	1714030a 	.word	0x1714030a
 80089f0:	0a          	.byte	0x0a
 80089f1:	00          	.byte	0x00
 80089f2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80089f6:	0721      	lsls	r1, r4, #28
 80089f8:	d5c3      	bpl.n	8008982 <_strtod_l+0x82>
 80089fa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80089fe:	e7c0      	b.n	8008982 <_strtod_l+0x82>
 8008a00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a02:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008a06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a0e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008a12:	e7f0      	b.n	80089f6 <_strtod_l+0xf6>
 8008a14:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008b90 <_strtod_l+0x290>
 8008a18:	e7ed      	b.n	80089f6 <_strtod_l+0xf6>
 8008a1a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008a1e:	f04f 38ff 	mov.w	r8, #4294967295
 8008a22:	e7e8      	b.n	80089f6 <_strtod_l+0xf6>
 8008a24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	9219      	str	r2, [sp, #100]	; 0x64
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	2b30      	cmp	r3, #48	; 0x30
 8008a2e:	d0f9      	beq.n	8008a24 <_strtod_l+0x124>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0a6      	beq.n	8008982 <_strtod_l+0x82>
 8008a34:	2301      	movs	r3, #1
 8008a36:	9307      	str	r3, [sp, #28]
 8008a38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a3a:	220a      	movs	r2, #10
 8008a3c:	9308      	str	r3, [sp, #32]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	469b      	mov	fp, r3
 8008a42:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008a46:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008a48:	7805      	ldrb	r5, [r0, #0]
 8008a4a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008a4e:	b2d9      	uxtb	r1, r3
 8008a50:	2909      	cmp	r1, #9
 8008a52:	d927      	bls.n	8008aa4 <_strtod_l+0x1a4>
 8008a54:	4622      	mov	r2, r4
 8008a56:	4639      	mov	r1, r7
 8008a58:	f002 fe7a 	bl	800b750 <strncmp>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d033      	beq.n	8008ac8 <_strtod_l+0x1c8>
 8008a60:	2000      	movs	r0, #0
 8008a62:	462a      	mov	r2, r5
 8008a64:	465c      	mov	r4, fp
 8008a66:	4603      	mov	r3, r0
 8008a68:	9004      	str	r0, [sp, #16]
 8008a6a:	2a65      	cmp	r2, #101	; 0x65
 8008a6c:	d001      	beq.n	8008a72 <_strtod_l+0x172>
 8008a6e:	2a45      	cmp	r2, #69	; 0x45
 8008a70:	d114      	bne.n	8008a9c <_strtod_l+0x19c>
 8008a72:	b91c      	cbnz	r4, 8008a7c <_strtod_l+0x17c>
 8008a74:	9a07      	ldr	r2, [sp, #28]
 8008a76:	4302      	orrs	r2, r0
 8008a78:	d09f      	beq.n	80089ba <_strtod_l+0xba>
 8008a7a:	2400      	movs	r4, #0
 8008a7c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008a7e:	1c72      	adds	r2, r6, #1
 8008a80:	9219      	str	r2, [sp, #100]	; 0x64
 8008a82:	7872      	ldrb	r2, [r6, #1]
 8008a84:	2a2b      	cmp	r2, #43	; 0x2b
 8008a86:	d079      	beq.n	8008b7c <_strtod_l+0x27c>
 8008a88:	2a2d      	cmp	r2, #45	; 0x2d
 8008a8a:	f000 8083 	beq.w	8008b94 <_strtod_l+0x294>
 8008a8e:	2700      	movs	r7, #0
 8008a90:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008a94:	2909      	cmp	r1, #9
 8008a96:	f240 8083 	bls.w	8008ba0 <_strtod_l+0x2a0>
 8008a9a:	9619      	str	r6, [sp, #100]	; 0x64
 8008a9c:	2500      	movs	r5, #0
 8008a9e:	e09f      	b.n	8008be0 <_strtod_l+0x2e0>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	e7c8      	b.n	8008a36 <_strtod_l+0x136>
 8008aa4:	f1bb 0f08 	cmp.w	fp, #8
 8008aa8:	bfd5      	itete	le
 8008aaa:	9906      	ldrle	r1, [sp, #24]
 8008aac:	9905      	ldrgt	r1, [sp, #20]
 8008aae:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ab2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ab6:	f100 0001 	add.w	r0, r0, #1
 8008aba:	bfd4      	ite	le
 8008abc:	9306      	strle	r3, [sp, #24]
 8008abe:	9305      	strgt	r3, [sp, #20]
 8008ac0:	f10b 0b01 	add.w	fp, fp, #1
 8008ac4:	9019      	str	r0, [sp, #100]	; 0x64
 8008ac6:	e7be      	b.n	8008a46 <_strtod_l+0x146>
 8008ac8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008aca:	191a      	adds	r2, r3, r4
 8008acc:	9219      	str	r2, [sp, #100]	; 0x64
 8008ace:	5d1a      	ldrb	r2, [r3, r4]
 8008ad0:	f1bb 0f00 	cmp.w	fp, #0
 8008ad4:	d036      	beq.n	8008b44 <_strtod_l+0x244>
 8008ad6:	465c      	mov	r4, fp
 8008ad8:	9004      	str	r0, [sp, #16]
 8008ada:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ade:	2b09      	cmp	r3, #9
 8008ae0:	d912      	bls.n	8008b08 <_strtod_l+0x208>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e7c1      	b.n	8008a6a <_strtod_l+0x16a>
 8008ae6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ae8:	3001      	adds	r0, #1
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	9219      	str	r2, [sp, #100]	; 0x64
 8008aee:	785a      	ldrb	r2, [r3, #1]
 8008af0:	2a30      	cmp	r2, #48	; 0x30
 8008af2:	d0f8      	beq.n	8008ae6 <_strtod_l+0x1e6>
 8008af4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	f200 84d5 	bhi.w	80094a8 <_strtod_l+0xba8>
 8008afe:	9004      	str	r0, [sp, #16]
 8008b00:	2000      	movs	r0, #0
 8008b02:	4604      	mov	r4, r0
 8008b04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b06:	9308      	str	r3, [sp, #32]
 8008b08:	3a30      	subs	r2, #48	; 0x30
 8008b0a:	f100 0301 	add.w	r3, r0, #1
 8008b0e:	d013      	beq.n	8008b38 <_strtod_l+0x238>
 8008b10:	9904      	ldr	r1, [sp, #16]
 8008b12:	1905      	adds	r5, r0, r4
 8008b14:	4419      	add	r1, r3
 8008b16:	9104      	str	r1, [sp, #16]
 8008b18:	4623      	mov	r3, r4
 8008b1a:	210a      	movs	r1, #10
 8008b1c:	42ab      	cmp	r3, r5
 8008b1e:	d113      	bne.n	8008b48 <_strtod_l+0x248>
 8008b20:	1823      	adds	r3, r4, r0
 8008b22:	2b08      	cmp	r3, #8
 8008b24:	f104 0401 	add.w	r4, r4, #1
 8008b28:	4404      	add	r4, r0
 8008b2a:	dc1b      	bgt.n	8008b64 <_strtod_l+0x264>
 8008b2c:	230a      	movs	r3, #10
 8008b2e:	9906      	ldr	r1, [sp, #24]
 8008b30:	fb03 2301 	mla	r3, r3, r1, r2
 8008b34:	9306      	str	r3, [sp, #24]
 8008b36:	2300      	movs	r3, #0
 8008b38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	1c51      	adds	r1, r2, #1
 8008b3e:	9119      	str	r1, [sp, #100]	; 0x64
 8008b40:	7852      	ldrb	r2, [r2, #1]
 8008b42:	e7ca      	b.n	8008ada <_strtod_l+0x1da>
 8008b44:	4658      	mov	r0, fp
 8008b46:	e7d3      	b.n	8008af0 <_strtod_l+0x1f0>
 8008b48:	2b08      	cmp	r3, #8
 8008b4a:	dc04      	bgt.n	8008b56 <_strtod_l+0x256>
 8008b4c:	9f06      	ldr	r7, [sp, #24]
 8008b4e:	434f      	muls	r7, r1
 8008b50:	9706      	str	r7, [sp, #24]
 8008b52:	3301      	adds	r3, #1
 8008b54:	e7e2      	b.n	8008b1c <_strtod_l+0x21c>
 8008b56:	1c5f      	adds	r7, r3, #1
 8008b58:	2f10      	cmp	r7, #16
 8008b5a:	bfde      	ittt	le
 8008b5c:	9f05      	ldrle	r7, [sp, #20]
 8008b5e:	434f      	mulle	r7, r1
 8008b60:	9705      	strle	r7, [sp, #20]
 8008b62:	e7f6      	b.n	8008b52 <_strtod_l+0x252>
 8008b64:	2c10      	cmp	r4, #16
 8008b66:	bfdf      	itttt	le
 8008b68:	230a      	movle	r3, #10
 8008b6a:	9905      	ldrle	r1, [sp, #20]
 8008b6c:	fb03 2301 	mlale	r3, r3, r1, r2
 8008b70:	9305      	strle	r3, [sp, #20]
 8008b72:	e7e0      	b.n	8008b36 <_strtod_l+0x236>
 8008b74:	2300      	movs	r3, #0
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e77b      	b.n	8008a74 <_strtod_l+0x174>
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	1cb2      	adds	r2, r6, #2
 8008b80:	9219      	str	r2, [sp, #100]	; 0x64
 8008b82:	78b2      	ldrb	r2, [r6, #2]
 8008b84:	e784      	b.n	8008a90 <_strtod_l+0x190>
 8008b86:	bf00      	nop
 8008b88:	0800c520 	.word	0x0800c520
 8008b8c:	0800c3d4 	.word	0x0800c3d4
 8008b90:	7ff00000 	.word	0x7ff00000
 8008b94:	2701      	movs	r7, #1
 8008b96:	e7f2      	b.n	8008b7e <_strtod_l+0x27e>
 8008b98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b9a:	1c51      	adds	r1, r2, #1
 8008b9c:	9119      	str	r1, [sp, #100]	; 0x64
 8008b9e:	7852      	ldrb	r2, [r2, #1]
 8008ba0:	2a30      	cmp	r2, #48	; 0x30
 8008ba2:	d0f9      	beq.n	8008b98 <_strtod_l+0x298>
 8008ba4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ba8:	2908      	cmp	r1, #8
 8008baa:	f63f af77 	bhi.w	8008a9c <_strtod_l+0x19c>
 8008bae:	f04f 0e0a 	mov.w	lr, #10
 8008bb2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008bb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8008bba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bbc:	1c51      	adds	r1, r2, #1
 8008bbe:	9119      	str	r1, [sp, #100]	; 0x64
 8008bc0:	7852      	ldrb	r2, [r2, #1]
 8008bc2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008bc6:	2d09      	cmp	r5, #9
 8008bc8:	d935      	bls.n	8008c36 <_strtod_l+0x336>
 8008bca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008bcc:	1b49      	subs	r1, r1, r5
 8008bce:	2908      	cmp	r1, #8
 8008bd0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008bd4:	dc02      	bgt.n	8008bdc <_strtod_l+0x2dc>
 8008bd6:	4565      	cmp	r5, ip
 8008bd8:	bfa8      	it	ge
 8008bda:	4665      	movge	r5, ip
 8008bdc:	b107      	cbz	r7, 8008be0 <_strtod_l+0x2e0>
 8008bde:	426d      	negs	r5, r5
 8008be0:	2c00      	cmp	r4, #0
 8008be2:	d14c      	bne.n	8008c7e <_strtod_l+0x37e>
 8008be4:	9907      	ldr	r1, [sp, #28]
 8008be6:	4301      	orrs	r1, r0
 8008be8:	f47f aecb 	bne.w	8008982 <_strtod_l+0x82>
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f47f aee4 	bne.w	80089ba <_strtod_l+0xba>
 8008bf2:	2a69      	cmp	r2, #105	; 0x69
 8008bf4:	d026      	beq.n	8008c44 <_strtod_l+0x344>
 8008bf6:	dc23      	bgt.n	8008c40 <_strtod_l+0x340>
 8008bf8:	2a49      	cmp	r2, #73	; 0x49
 8008bfa:	d023      	beq.n	8008c44 <_strtod_l+0x344>
 8008bfc:	2a4e      	cmp	r2, #78	; 0x4e
 8008bfe:	f47f aedc 	bne.w	80089ba <_strtod_l+0xba>
 8008c02:	499d      	ldr	r1, [pc, #628]	; (8008e78 <_strtod_l+0x578>)
 8008c04:	a819      	add	r0, sp, #100	; 0x64
 8008c06:	f001 fd9f 	bl	800a748 <__match>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f43f aed5 	beq.w	80089ba <_strtod_l+0xba>
 8008c10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b28      	cmp	r3, #40	; 0x28
 8008c16:	d12c      	bne.n	8008c72 <_strtod_l+0x372>
 8008c18:	4998      	ldr	r1, [pc, #608]	; (8008e7c <_strtod_l+0x57c>)
 8008c1a:	aa1c      	add	r2, sp, #112	; 0x70
 8008c1c:	a819      	add	r0, sp, #100	; 0x64
 8008c1e:	f001 fda7 	bl	800a770 <__hexnan>
 8008c22:	2805      	cmp	r0, #5
 8008c24:	d125      	bne.n	8008c72 <_strtod_l+0x372>
 8008c26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c28:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008c2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c34:	e6a5      	b.n	8008982 <_strtod_l+0x82>
 8008c36:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008c3a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008c3e:	e7bc      	b.n	8008bba <_strtod_l+0x2ba>
 8008c40:	2a6e      	cmp	r2, #110	; 0x6e
 8008c42:	e7dc      	b.n	8008bfe <_strtod_l+0x2fe>
 8008c44:	498e      	ldr	r1, [pc, #568]	; (8008e80 <_strtod_l+0x580>)
 8008c46:	a819      	add	r0, sp, #100	; 0x64
 8008c48:	f001 fd7e 	bl	800a748 <__match>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	f43f aeb4 	beq.w	80089ba <_strtod_l+0xba>
 8008c52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c54:	498b      	ldr	r1, [pc, #556]	; (8008e84 <_strtod_l+0x584>)
 8008c56:	3b01      	subs	r3, #1
 8008c58:	a819      	add	r0, sp, #100	; 0x64
 8008c5a:	9319      	str	r3, [sp, #100]	; 0x64
 8008c5c:	f001 fd74 	bl	800a748 <__match>
 8008c60:	b910      	cbnz	r0, 8008c68 <_strtod_l+0x368>
 8008c62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c64:	3301      	adds	r3, #1
 8008c66:	9319      	str	r3, [sp, #100]	; 0x64
 8008c68:	f04f 0800 	mov.w	r8, #0
 8008c6c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008e88 <_strtod_l+0x588>
 8008c70:	e687      	b.n	8008982 <_strtod_l+0x82>
 8008c72:	4886      	ldr	r0, [pc, #536]	; (8008e8c <_strtod_l+0x58c>)
 8008c74:	f002 fd56 	bl	800b724 <nan>
 8008c78:	4680      	mov	r8, r0
 8008c7a:	4689      	mov	r9, r1
 8008c7c:	e681      	b.n	8008982 <_strtod_l+0x82>
 8008c7e:	9b04      	ldr	r3, [sp, #16]
 8008c80:	f1bb 0f00 	cmp.w	fp, #0
 8008c84:	bf08      	it	eq
 8008c86:	46a3      	moveq	fp, r4
 8008c88:	1aeb      	subs	r3, r5, r3
 8008c8a:	2c10      	cmp	r4, #16
 8008c8c:	9806      	ldr	r0, [sp, #24]
 8008c8e:	4626      	mov	r6, r4
 8008c90:	9307      	str	r3, [sp, #28]
 8008c92:	bfa8      	it	ge
 8008c94:	2610      	movge	r6, #16
 8008c96:	f7f7 fc59 	bl	800054c <__aeabi_ui2d>
 8008c9a:	2c09      	cmp	r4, #9
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	4689      	mov	r9, r1
 8008ca0:	dd13      	ble.n	8008cca <_strtod_l+0x3ca>
 8008ca2:	4b7b      	ldr	r3, [pc, #492]	; (8008e90 <_strtod_l+0x590>)
 8008ca4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ca8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008cac:	f7f7 fcc8 	bl	8000640 <__aeabi_dmul>
 8008cb0:	4680      	mov	r8, r0
 8008cb2:	9805      	ldr	r0, [sp, #20]
 8008cb4:	4689      	mov	r9, r1
 8008cb6:	f7f7 fc49 	bl	800054c <__aeabi_ui2d>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 fb07 	bl	80002d4 <__adddf3>
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	4689      	mov	r9, r1
 8008cca:	2c0f      	cmp	r4, #15
 8008ccc:	dc36      	bgt.n	8008d3c <_strtod_l+0x43c>
 8008cce:	9b07      	ldr	r3, [sp, #28]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f43f ae56 	beq.w	8008982 <_strtod_l+0x82>
 8008cd6:	dd22      	ble.n	8008d1e <_strtod_l+0x41e>
 8008cd8:	2b16      	cmp	r3, #22
 8008cda:	dc09      	bgt.n	8008cf0 <_strtod_l+0x3f0>
 8008cdc:	496c      	ldr	r1, [pc, #432]	; (8008e90 <_strtod_l+0x590>)
 8008cde:	4642      	mov	r2, r8
 8008ce0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cea:	f7f7 fca9 	bl	8000640 <__aeabi_dmul>
 8008cee:	e7c3      	b.n	8008c78 <_strtod_l+0x378>
 8008cf0:	9a07      	ldr	r2, [sp, #28]
 8008cf2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	db20      	blt.n	8008d3c <_strtod_l+0x43c>
 8008cfa:	4d65      	ldr	r5, [pc, #404]	; (8008e90 <_strtod_l+0x590>)
 8008cfc:	f1c4 040f 	rsb	r4, r4, #15
 8008d00:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008d04:	4642      	mov	r2, r8
 8008d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	f7f7 fc98 	bl	8000640 <__aeabi_dmul>
 8008d10:	9b07      	ldr	r3, [sp, #28]
 8008d12:	1b1c      	subs	r4, r3, r4
 8008d14:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008d18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d1c:	e7e5      	b.n	8008cea <_strtod_l+0x3ea>
 8008d1e:	9b07      	ldr	r3, [sp, #28]
 8008d20:	3316      	adds	r3, #22
 8008d22:	db0b      	blt.n	8008d3c <_strtod_l+0x43c>
 8008d24:	9b04      	ldr	r3, [sp, #16]
 8008d26:	4640      	mov	r0, r8
 8008d28:	1b5d      	subs	r5, r3, r5
 8008d2a:	4b59      	ldr	r3, [pc, #356]	; (8008e90 <_strtod_l+0x590>)
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008d32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d36:	f7f7 fdad 	bl	8000894 <__aeabi_ddiv>
 8008d3a:	e79d      	b.n	8008c78 <_strtod_l+0x378>
 8008d3c:	9b07      	ldr	r3, [sp, #28]
 8008d3e:	1ba6      	subs	r6, r4, r6
 8008d40:	441e      	add	r6, r3
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	dd74      	ble.n	8008e30 <_strtod_l+0x530>
 8008d46:	f016 030f 	ands.w	r3, r6, #15
 8008d4a:	d00a      	beq.n	8008d62 <_strtod_l+0x462>
 8008d4c:	4950      	ldr	r1, [pc, #320]	; (8008e90 <_strtod_l+0x590>)
 8008d4e:	4642      	mov	r2, r8
 8008d50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d58:	464b      	mov	r3, r9
 8008d5a:	f7f7 fc71 	bl	8000640 <__aeabi_dmul>
 8008d5e:	4680      	mov	r8, r0
 8008d60:	4689      	mov	r9, r1
 8008d62:	f036 060f 	bics.w	r6, r6, #15
 8008d66:	d052      	beq.n	8008e0e <_strtod_l+0x50e>
 8008d68:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008d6c:	dd27      	ble.n	8008dbe <_strtod_l+0x4be>
 8008d6e:	f04f 0b00 	mov.w	fp, #0
 8008d72:	f8cd b010 	str.w	fp, [sp, #16]
 8008d76:	f8cd b020 	str.w	fp, [sp, #32]
 8008d7a:	f8cd b018 	str.w	fp, [sp, #24]
 8008d7e:	2322      	movs	r3, #34	; 0x22
 8008d80:	f04f 0800 	mov.w	r8, #0
 8008d84:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008e88 <_strtod_l+0x588>
 8008d88:	f8ca 3000 	str.w	r3, [sl]
 8008d8c:	9b08      	ldr	r3, [sp, #32]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f43f adf7 	beq.w	8008982 <_strtod_l+0x82>
 8008d94:	4650      	mov	r0, sl
 8008d96:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d98:	f001 fe00 	bl	800a99c <_Bfree>
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	9906      	ldr	r1, [sp, #24]
 8008da0:	f001 fdfc 	bl	800a99c <_Bfree>
 8008da4:	4650      	mov	r0, sl
 8008da6:	9904      	ldr	r1, [sp, #16]
 8008da8:	f001 fdf8 	bl	800a99c <_Bfree>
 8008dac:	4650      	mov	r0, sl
 8008dae:	9908      	ldr	r1, [sp, #32]
 8008db0:	f001 fdf4 	bl	800a99c <_Bfree>
 8008db4:	4659      	mov	r1, fp
 8008db6:	4650      	mov	r0, sl
 8008db8:	f001 fdf0 	bl	800a99c <_Bfree>
 8008dbc:	e5e1      	b.n	8008982 <_strtod_l+0x82>
 8008dbe:	4b35      	ldr	r3, [pc, #212]	; (8008e94 <_strtod_l+0x594>)
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	9305      	str	r3, [sp, #20]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	461f      	mov	r7, r3
 8008dca:	1136      	asrs	r6, r6, #4
 8008dcc:	2e01      	cmp	r6, #1
 8008dce:	dc21      	bgt.n	8008e14 <_strtod_l+0x514>
 8008dd0:	b10b      	cbz	r3, 8008dd6 <_strtod_l+0x4d6>
 8008dd2:	4680      	mov	r8, r0
 8008dd4:	4689      	mov	r9, r1
 8008dd6:	4b2f      	ldr	r3, [pc, #188]	; (8008e94 <_strtod_l+0x594>)
 8008dd8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008ddc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008de0:	4642      	mov	r2, r8
 8008de2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008de6:	464b      	mov	r3, r9
 8008de8:	f7f7 fc2a 	bl	8000640 <__aeabi_dmul>
 8008dec:	4b26      	ldr	r3, [pc, #152]	; (8008e88 <_strtod_l+0x588>)
 8008dee:	460a      	mov	r2, r1
 8008df0:	400b      	ands	r3, r1
 8008df2:	4929      	ldr	r1, [pc, #164]	; (8008e98 <_strtod_l+0x598>)
 8008df4:	4680      	mov	r8, r0
 8008df6:	428b      	cmp	r3, r1
 8008df8:	d8b9      	bhi.n	8008d6e <_strtod_l+0x46e>
 8008dfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008dfe:	428b      	cmp	r3, r1
 8008e00:	bf86      	itte	hi
 8008e02:	f04f 38ff 	movhi.w	r8, #4294967295
 8008e06:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008e9c <_strtod_l+0x59c>
 8008e0a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	e07f      	b.n	8008f14 <_strtod_l+0x614>
 8008e14:	07f2      	lsls	r2, r6, #31
 8008e16:	d505      	bpl.n	8008e24 <_strtod_l+0x524>
 8008e18:	9b05      	ldr	r3, [sp, #20]
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f7f7 fc0f 	bl	8000640 <__aeabi_dmul>
 8008e22:	2301      	movs	r3, #1
 8008e24:	9a05      	ldr	r2, [sp, #20]
 8008e26:	3701      	adds	r7, #1
 8008e28:	3208      	adds	r2, #8
 8008e2a:	1076      	asrs	r6, r6, #1
 8008e2c:	9205      	str	r2, [sp, #20]
 8008e2e:	e7cd      	b.n	8008dcc <_strtod_l+0x4cc>
 8008e30:	d0ed      	beq.n	8008e0e <_strtod_l+0x50e>
 8008e32:	4276      	negs	r6, r6
 8008e34:	f016 020f 	ands.w	r2, r6, #15
 8008e38:	d00a      	beq.n	8008e50 <_strtod_l+0x550>
 8008e3a:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <_strtod_l+0x590>)
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e42:	4649      	mov	r1, r9
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fd24 	bl	8000894 <__aeabi_ddiv>
 8008e4c:	4680      	mov	r8, r0
 8008e4e:	4689      	mov	r9, r1
 8008e50:	1136      	asrs	r6, r6, #4
 8008e52:	d0dc      	beq.n	8008e0e <_strtod_l+0x50e>
 8008e54:	2e1f      	cmp	r6, #31
 8008e56:	dd23      	ble.n	8008ea0 <_strtod_l+0x5a0>
 8008e58:	f04f 0b00 	mov.w	fp, #0
 8008e5c:	f8cd b010 	str.w	fp, [sp, #16]
 8008e60:	f8cd b020 	str.w	fp, [sp, #32]
 8008e64:	f8cd b018 	str.w	fp, [sp, #24]
 8008e68:	2322      	movs	r3, #34	; 0x22
 8008e6a:	f04f 0800 	mov.w	r8, #0
 8008e6e:	f04f 0900 	mov.w	r9, #0
 8008e72:	f8ca 3000 	str.w	r3, [sl]
 8008e76:	e789      	b.n	8008d8c <_strtod_l+0x48c>
 8008e78:	0800c3ad 	.word	0x0800c3ad
 8008e7c:	0800c3e8 	.word	0x0800c3e8
 8008e80:	0800c3a5 	.word	0x0800c3a5
 8008e84:	0800c42b 	.word	0x0800c42b
 8008e88:	7ff00000 	.word	0x7ff00000
 8008e8c:	0800c6d8 	.word	0x0800c6d8
 8008e90:	0800c5b8 	.word	0x0800c5b8
 8008e94:	0800c590 	.word	0x0800c590
 8008e98:	7ca00000 	.word	0x7ca00000
 8008e9c:	7fefffff 	.word	0x7fefffff
 8008ea0:	f016 0310 	ands.w	r3, r6, #16
 8008ea4:	bf18      	it	ne
 8008ea6:	236a      	movne	r3, #106	; 0x6a
 8008ea8:	4640      	mov	r0, r8
 8008eaa:	9305      	str	r3, [sp, #20]
 8008eac:	4649      	mov	r1, r9
 8008eae:	2300      	movs	r3, #0
 8008eb0:	4fb0      	ldr	r7, [pc, #704]	; (8009174 <_strtod_l+0x874>)
 8008eb2:	07f2      	lsls	r2, r6, #31
 8008eb4:	d504      	bpl.n	8008ec0 <_strtod_l+0x5c0>
 8008eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eba:	f7f7 fbc1 	bl	8000640 <__aeabi_dmul>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	1076      	asrs	r6, r6, #1
 8008ec2:	f107 0708 	add.w	r7, r7, #8
 8008ec6:	d1f4      	bne.n	8008eb2 <_strtod_l+0x5b2>
 8008ec8:	b10b      	cbz	r3, 8008ece <_strtod_l+0x5ce>
 8008eca:	4680      	mov	r8, r0
 8008ecc:	4689      	mov	r9, r1
 8008ece:	9b05      	ldr	r3, [sp, #20]
 8008ed0:	b1c3      	cbz	r3, 8008f04 <_strtod_l+0x604>
 8008ed2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008ed6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	4649      	mov	r1, r9
 8008ede:	dd11      	ble.n	8008f04 <_strtod_l+0x604>
 8008ee0:	2b1f      	cmp	r3, #31
 8008ee2:	f340 8127 	ble.w	8009134 <_strtod_l+0x834>
 8008ee6:	2b34      	cmp	r3, #52	; 0x34
 8008ee8:	bfd8      	it	le
 8008eea:	f04f 33ff 	movle.w	r3, #4294967295
 8008eee:	f04f 0800 	mov.w	r8, #0
 8008ef2:	bfcf      	iteee	gt
 8008ef4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ef8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008efc:	fa03 f202 	lslle.w	r2, r3, r2
 8008f00:	ea02 0901 	andle.w	r9, r2, r1
 8008f04:	2200      	movs	r2, #0
 8008f06:	2300      	movs	r3, #0
 8008f08:	4640      	mov	r0, r8
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	f7f7 fe00 	bl	8000b10 <__aeabi_dcmpeq>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d1a1      	bne.n	8008e58 <_strtod_l+0x558>
 8008f14:	9b06      	ldr	r3, [sp, #24]
 8008f16:	465a      	mov	r2, fp
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	4650      	mov	r0, sl
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	9908      	ldr	r1, [sp, #32]
 8008f20:	f001 fda4 	bl	800aa6c <__s2b>
 8008f24:	9008      	str	r0, [sp, #32]
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f43f af21 	beq.w	8008d6e <_strtod_l+0x46e>
 8008f2c:	9b04      	ldr	r3, [sp, #16]
 8008f2e:	f04f 0b00 	mov.w	fp, #0
 8008f32:	1b5d      	subs	r5, r3, r5
 8008f34:	9b07      	ldr	r3, [sp, #28]
 8008f36:	f8cd b010 	str.w	fp, [sp, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	bfb4      	ite	lt
 8008f3e:	462b      	movlt	r3, r5
 8008f40:	2300      	movge	r3, #0
 8008f42:	930e      	str	r3, [sp, #56]	; 0x38
 8008f44:	9b07      	ldr	r3, [sp, #28]
 8008f46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008f4a:	9314      	str	r3, [sp, #80]	; 0x50
 8008f4c:	9b08      	ldr	r3, [sp, #32]
 8008f4e:	4650      	mov	r0, sl
 8008f50:	6859      	ldr	r1, [r3, #4]
 8008f52:	f001 fce3 	bl	800a91c <_Balloc>
 8008f56:	9006      	str	r0, [sp, #24]
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	f43f af10 	beq.w	8008d7e <_strtod_l+0x47e>
 8008f5e:	9b08      	ldr	r3, [sp, #32]
 8008f60:	300c      	adds	r0, #12
 8008f62:	691a      	ldr	r2, [r3, #16]
 8008f64:	f103 010c 	add.w	r1, r3, #12
 8008f68:	3202      	adds	r2, #2
 8008f6a:	0092      	lsls	r2, r2, #2
 8008f6c:	f001 fcc8 	bl	800a900 <memcpy>
 8008f70:	ab1c      	add	r3, sp, #112	; 0x70
 8008f72:	9301      	str	r3, [sp, #4]
 8008f74:	ab1b      	add	r3, sp, #108	; 0x6c
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	4642      	mov	r2, r8
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	4650      	mov	r0, sl
 8008f7e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008f82:	f002 f8b5 	bl	800b0f0 <__d2b>
 8008f86:	901a      	str	r0, [sp, #104]	; 0x68
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	f43f aef8 	beq.w	8008d7e <_strtod_l+0x47e>
 8008f8e:	2101      	movs	r1, #1
 8008f90:	4650      	mov	r0, sl
 8008f92:	f001 fe03 	bl	800ab9c <__i2b>
 8008f96:	4603      	mov	r3, r0
 8008f98:	9004      	str	r0, [sp, #16]
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	f43f aeef 	beq.w	8008d7e <_strtod_l+0x47e>
 8008fa0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008fa2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008fa4:	2d00      	cmp	r5, #0
 8008fa6:	bfab      	itete	ge
 8008fa8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008faa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8008fac:	18ee      	addge	r6, r5, r3
 8008fae:	1b5c      	sublt	r4, r3, r5
 8008fb0:	9b05      	ldr	r3, [sp, #20]
 8008fb2:	bfa8      	it	ge
 8008fb4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8008fb6:	eba5 0503 	sub.w	r5, r5, r3
 8008fba:	4415      	add	r5, r2
 8008fbc:	4b6e      	ldr	r3, [pc, #440]	; (8009178 <_strtod_l+0x878>)
 8008fbe:	f105 35ff 	add.w	r5, r5, #4294967295
 8008fc2:	bfb8      	it	lt
 8008fc4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008fcc:	f280 80c4 	bge.w	8009158 <_strtod_l+0x858>
 8008fd0:	1b5b      	subs	r3, r3, r5
 8008fd2:	2b1f      	cmp	r3, #31
 8008fd4:	f04f 0701 	mov.w	r7, #1
 8008fd8:	eba2 0203 	sub.w	r2, r2, r3
 8008fdc:	f300 80b1 	bgt.w	8009142 <_strtod_l+0x842>
 8008fe0:	2500      	movs	r5, #0
 8008fe2:	fa07 f303 	lsl.w	r3, r7, r3
 8008fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fe8:	18b7      	adds	r7, r6, r2
 8008fea:	9b05      	ldr	r3, [sp, #20]
 8008fec:	42be      	cmp	r6, r7
 8008fee:	4414      	add	r4, r2
 8008ff0:	441c      	add	r4, r3
 8008ff2:	4633      	mov	r3, r6
 8008ff4:	bfa8      	it	ge
 8008ff6:	463b      	movge	r3, r7
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	bfa8      	it	ge
 8008ffc:	4623      	movge	r3, r4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfc2      	ittt	gt
 8009002:	1aff      	subgt	r7, r7, r3
 8009004:	1ae4      	subgt	r4, r4, r3
 8009006:	1af6      	subgt	r6, r6, r3
 8009008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800900a:	2b00      	cmp	r3, #0
 800900c:	dd17      	ble.n	800903e <_strtod_l+0x73e>
 800900e:	461a      	mov	r2, r3
 8009010:	4650      	mov	r0, sl
 8009012:	9904      	ldr	r1, [sp, #16]
 8009014:	f001 fe80 	bl	800ad18 <__pow5mult>
 8009018:	9004      	str	r0, [sp, #16]
 800901a:	2800      	cmp	r0, #0
 800901c:	f43f aeaf 	beq.w	8008d7e <_strtod_l+0x47e>
 8009020:	4601      	mov	r1, r0
 8009022:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009024:	4650      	mov	r0, sl
 8009026:	f001 fdcf 	bl	800abc8 <__multiply>
 800902a:	9009      	str	r0, [sp, #36]	; 0x24
 800902c:	2800      	cmp	r0, #0
 800902e:	f43f aea6 	beq.w	8008d7e <_strtod_l+0x47e>
 8009032:	4650      	mov	r0, sl
 8009034:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009036:	f001 fcb1 	bl	800a99c <_Bfree>
 800903a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903c:	931a      	str	r3, [sp, #104]	; 0x68
 800903e:	2f00      	cmp	r7, #0
 8009040:	f300 808e 	bgt.w	8009160 <_strtod_l+0x860>
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	2b00      	cmp	r3, #0
 8009048:	dd08      	ble.n	800905c <_strtod_l+0x75c>
 800904a:	4650      	mov	r0, sl
 800904c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800904e:	9906      	ldr	r1, [sp, #24]
 8009050:	f001 fe62 	bl	800ad18 <__pow5mult>
 8009054:	9006      	str	r0, [sp, #24]
 8009056:	2800      	cmp	r0, #0
 8009058:	f43f ae91 	beq.w	8008d7e <_strtod_l+0x47e>
 800905c:	2c00      	cmp	r4, #0
 800905e:	dd08      	ble.n	8009072 <_strtod_l+0x772>
 8009060:	4622      	mov	r2, r4
 8009062:	4650      	mov	r0, sl
 8009064:	9906      	ldr	r1, [sp, #24]
 8009066:	f001 feb1 	bl	800adcc <__lshift>
 800906a:	9006      	str	r0, [sp, #24]
 800906c:	2800      	cmp	r0, #0
 800906e:	f43f ae86 	beq.w	8008d7e <_strtod_l+0x47e>
 8009072:	2e00      	cmp	r6, #0
 8009074:	dd08      	ble.n	8009088 <_strtod_l+0x788>
 8009076:	4632      	mov	r2, r6
 8009078:	4650      	mov	r0, sl
 800907a:	9904      	ldr	r1, [sp, #16]
 800907c:	f001 fea6 	bl	800adcc <__lshift>
 8009080:	9004      	str	r0, [sp, #16]
 8009082:	2800      	cmp	r0, #0
 8009084:	f43f ae7b 	beq.w	8008d7e <_strtod_l+0x47e>
 8009088:	4650      	mov	r0, sl
 800908a:	9a06      	ldr	r2, [sp, #24]
 800908c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800908e:	f001 ff29 	bl	800aee4 <__mdiff>
 8009092:	4683      	mov	fp, r0
 8009094:	2800      	cmp	r0, #0
 8009096:	f43f ae72 	beq.w	8008d7e <_strtod_l+0x47e>
 800909a:	2400      	movs	r4, #0
 800909c:	68c3      	ldr	r3, [r0, #12]
 800909e:	9904      	ldr	r1, [sp, #16]
 80090a0:	60c4      	str	r4, [r0, #12]
 80090a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80090a4:	f001 ff02 	bl	800aeac <__mcmp>
 80090a8:	42a0      	cmp	r0, r4
 80090aa:	da6b      	bge.n	8009184 <_strtod_l+0x884>
 80090ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ae:	ea53 0308 	orrs.w	r3, r3, r8
 80090b2:	f040 8091 	bne.w	80091d8 <_strtod_l+0x8d8>
 80090b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f040 808c 	bne.w	80091d8 <_strtod_l+0x8d8>
 80090c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090c4:	0d1b      	lsrs	r3, r3, #20
 80090c6:	051b      	lsls	r3, r3, #20
 80090c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090cc:	f240 8084 	bls.w	80091d8 <_strtod_l+0x8d8>
 80090d0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80090d4:	b91b      	cbnz	r3, 80090de <_strtod_l+0x7de>
 80090d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	dd7c      	ble.n	80091d8 <_strtod_l+0x8d8>
 80090de:	4659      	mov	r1, fp
 80090e0:	2201      	movs	r2, #1
 80090e2:	4650      	mov	r0, sl
 80090e4:	f001 fe72 	bl	800adcc <__lshift>
 80090e8:	9904      	ldr	r1, [sp, #16]
 80090ea:	4683      	mov	fp, r0
 80090ec:	f001 fede 	bl	800aeac <__mcmp>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	dd71      	ble.n	80091d8 <_strtod_l+0x8d8>
 80090f4:	9905      	ldr	r1, [sp, #20]
 80090f6:	464b      	mov	r3, r9
 80090f8:	4a20      	ldr	r2, [pc, #128]	; (800917c <_strtod_l+0x87c>)
 80090fa:	2900      	cmp	r1, #0
 80090fc:	f000 808c 	beq.w	8009218 <_strtod_l+0x918>
 8009100:	ea02 0109 	and.w	r1, r2, r9
 8009104:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009108:	f300 8086 	bgt.w	8009218 <_strtod_l+0x918>
 800910c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009110:	f77f aeaa 	ble.w	8008e68 <_strtod_l+0x568>
 8009114:	4640      	mov	r0, r8
 8009116:	4649      	mov	r1, r9
 8009118:	4b19      	ldr	r3, [pc, #100]	; (8009180 <_strtod_l+0x880>)
 800911a:	2200      	movs	r2, #0
 800911c:	f7f7 fa90 	bl	8000640 <__aeabi_dmul>
 8009120:	460b      	mov	r3, r1
 8009122:	4303      	orrs	r3, r0
 8009124:	bf08      	it	eq
 8009126:	2322      	moveq	r3, #34	; 0x22
 8009128:	4680      	mov	r8, r0
 800912a:	4689      	mov	r9, r1
 800912c:	bf08      	it	eq
 800912e:	f8ca 3000 	streq.w	r3, [sl]
 8009132:	e62f      	b.n	8008d94 <_strtod_l+0x494>
 8009134:	f04f 32ff 	mov.w	r2, #4294967295
 8009138:	fa02 f303 	lsl.w	r3, r2, r3
 800913c:	ea03 0808 	and.w	r8, r3, r8
 8009140:	e6e0      	b.n	8008f04 <_strtod_l+0x604>
 8009142:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009146:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800914a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800914e:	35e2      	adds	r5, #226	; 0xe2
 8009150:	fa07 f505 	lsl.w	r5, r7, r5
 8009154:	970f      	str	r7, [sp, #60]	; 0x3c
 8009156:	e747      	b.n	8008fe8 <_strtod_l+0x6e8>
 8009158:	2301      	movs	r3, #1
 800915a:	2500      	movs	r5, #0
 800915c:	930f      	str	r3, [sp, #60]	; 0x3c
 800915e:	e743      	b.n	8008fe8 <_strtod_l+0x6e8>
 8009160:	463a      	mov	r2, r7
 8009162:	4650      	mov	r0, sl
 8009164:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009166:	f001 fe31 	bl	800adcc <__lshift>
 800916a:	901a      	str	r0, [sp, #104]	; 0x68
 800916c:	2800      	cmp	r0, #0
 800916e:	f47f af69 	bne.w	8009044 <_strtod_l+0x744>
 8009172:	e604      	b.n	8008d7e <_strtod_l+0x47e>
 8009174:	0800c400 	.word	0x0800c400
 8009178:	fffffc02 	.word	0xfffffc02
 800917c:	7ff00000 	.word	0x7ff00000
 8009180:	39500000 	.word	0x39500000
 8009184:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009188:	d165      	bne.n	8009256 <_strtod_l+0x956>
 800918a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800918c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009190:	b35a      	cbz	r2, 80091ea <_strtod_l+0x8ea>
 8009192:	4a99      	ldr	r2, [pc, #612]	; (80093f8 <_strtod_l+0xaf8>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d12b      	bne.n	80091f0 <_strtod_l+0x8f0>
 8009198:	9b05      	ldr	r3, [sp, #20]
 800919a:	4641      	mov	r1, r8
 800919c:	b303      	cbz	r3, 80091e0 <_strtod_l+0x8e0>
 800919e:	464a      	mov	r2, r9
 80091a0:	4b96      	ldr	r3, [pc, #600]	; (80093fc <_strtod_l+0xafc>)
 80091a2:	4013      	ands	r3, r2
 80091a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80091a8:	f04f 32ff 	mov.w	r2, #4294967295
 80091ac:	d81b      	bhi.n	80091e6 <_strtod_l+0x8e6>
 80091ae:	0d1b      	lsrs	r3, r3, #20
 80091b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091b4:	fa02 f303 	lsl.w	r3, r2, r3
 80091b8:	4299      	cmp	r1, r3
 80091ba:	d119      	bne.n	80091f0 <_strtod_l+0x8f0>
 80091bc:	4b90      	ldr	r3, [pc, #576]	; (8009400 <_strtod_l+0xb00>)
 80091be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d102      	bne.n	80091ca <_strtod_l+0x8ca>
 80091c4:	3101      	adds	r1, #1
 80091c6:	f43f adda 	beq.w	8008d7e <_strtod_l+0x47e>
 80091ca:	f04f 0800 	mov.w	r8, #0
 80091ce:	4b8b      	ldr	r3, [pc, #556]	; (80093fc <_strtod_l+0xafc>)
 80091d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d2:	401a      	ands	r2, r3
 80091d4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80091d8:	9b05      	ldr	r3, [sp, #20]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d19a      	bne.n	8009114 <_strtod_l+0x814>
 80091de:	e5d9      	b.n	8008d94 <_strtod_l+0x494>
 80091e0:	f04f 33ff 	mov.w	r3, #4294967295
 80091e4:	e7e8      	b.n	80091b8 <_strtod_l+0x8b8>
 80091e6:	4613      	mov	r3, r2
 80091e8:	e7e6      	b.n	80091b8 <_strtod_l+0x8b8>
 80091ea:	ea53 0308 	orrs.w	r3, r3, r8
 80091ee:	d081      	beq.n	80090f4 <_strtod_l+0x7f4>
 80091f0:	b1e5      	cbz	r5, 800922c <_strtod_l+0x92c>
 80091f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f4:	421d      	tst	r5, r3
 80091f6:	d0ef      	beq.n	80091d8 <_strtod_l+0x8d8>
 80091f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091fa:	4640      	mov	r0, r8
 80091fc:	4649      	mov	r1, r9
 80091fe:	9a05      	ldr	r2, [sp, #20]
 8009200:	b1c3      	cbz	r3, 8009234 <_strtod_l+0x934>
 8009202:	f7ff fb59 	bl	80088b8 <sulp>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800920e:	f7f7 f861 	bl	80002d4 <__adddf3>
 8009212:	4680      	mov	r8, r0
 8009214:	4689      	mov	r9, r1
 8009216:	e7df      	b.n	80091d8 <_strtod_l+0x8d8>
 8009218:	4013      	ands	r3, r2
 800921a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800921e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009222:	f04f 38ff 	mov.w	r8, #4294967295
 8009226:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800922a:	e7d5      	b.n	80091d8 <_strtod_l+0x8d8>
 800922c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800922e:	ea13 0f08 	tst.w	r3, r8
 8009232:	e7e0      	b.n	80091f6 <_strtod_l+0x8f6>
 8009234:	f7ff fb40 	bl	80088b8 <sulp>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009240:	f7f7 f846 	bl	80002d0 <__aeabi_dsub>
 8009244:	2200      	movs	r2, #0
 8009246:	2300      	movs	r3, #0
 8009248:	4680      	mov	r8, r0
 800924a:	4689      	mov	r9, r1
 800924c:	f7f7 fc60 	bl	8000b10 <__aeabi_dcmpeq>
 8009250:	2800      	cmp	r0, #0
 8009252:	d0c1      	beq.n	80091d8 <_strtod_l+0x8d8>
 8009254:	e608      	b.n	8008e68 <_strtod_l+0x568>
 8009256:	4658      	mov	r0, fp
 8009258:	9904      	ldr	r1, [sp, #16]
 800925a:	f001 ffa5 	bl	800b1a8 <__ratio>
 800925e:	2200      	movs	r2, #0
 8009260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009264:	4606      	mov	r6, r0
 8009266:	460f      	mov	r7, r1
 8009268:	f7f7 fc66 	bl	8000b38 <__aeabi_dcmple>
 800926c:	2800      	cmp	r0, #0
 800926e:	d070      	beq.n	8009352 <_strtod_l+0xa52>
 8009270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d042      	beq.n	80092fc <_strtod_l+0x9fc>
 8009276:	2600      	movs	r6, #0
 8009278:	4f62      	ldr	r7, [pc, #392]	; (8009404 <_strtod_l+0xb04>)
 800927a:	4d62      	ldr	r5, [pc, #392]	; (8009404 <_strtod_l+0xb04>)
 800927c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009282:	0d1b      	lsrs	r3, r3, #20
 8009284:	051b      	lsls	r3, r3, #20
 8009286:	930f      	str	r3, [sp, #60]	; 0x3c
 8009288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800928a:	4b5f      	ldr	r3, [pc, #380]	; (8009408 <_strtod_l+0xb08>)
 800928c:	429a      	cmp	r2, r3
 800928e:	f040 80c3 	bne.w	8009418 <_strtod_l+0xb18>
 8009292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009294:	4640      	mov	r0, r8
 8009296:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800929a:	4649      	mov	r1, r9
 800929c:	f001 feae 	bl	800affc <__ulp>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4630      	mov	r0, r6
 80092a6:	4639      	mov	r1, r7
 80092a8:	f7f7 f9ca 	bl	8000640 <__aeabi_dmul>
 80092ac:	4642      	mov	r2, r8
 80092ae:	464b      	mov	r3, r9
 80092b0:	f7f7 f810 	bl	80002d4 <__adddf3>
 80092b4:	460b      	mov	r3, r1
 80092b6:	4951      	ldr	r1, [pc, #324]	; (80093fc <_strtod_l+0xafc>)
 80092b8:	4a54      	ldr	r2, [pc, #336]	; (800940c <_strtod_l+0xb0c>)
 80092ba:	4019      	ands	r1, r3
 80092bc:	4291      	cmp	r1, r2
 80092be:	4680      	mov	r8, r0
 80092c0:	d95d      	bls.n	800937e <_strtod_l+0xa7e>
 80092c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092c4:	4b4e      	ldr	r3, [pc, #312]	; (8009400 <_strtod_l+0xb00>)
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d103      	bne.n	80092d2 <_strtod_l+0x9d2>
 80092ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092cc:	3301      	adds	r3, #1
 80092ce:	f43f ad56 	beq.w	8008d7e <_strtod_l+0x47e>
 80092d2:	f04f 38ff 	mov.w	r8, #4294967295
 80092d6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009400 <_strtod_l+0xb00>
 80092da:	4650      	mov	r0, sl
 80092dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80092de:	f001 fb5d 	bl	800a99c <_Bfree>
 80092e2:	4650      	mov	r0, sl
 80092e4:	9906      	ldr	r1, [sp, #24]
 80092e6:	f001 fb59 	bl	800a99c <_Bfree>
 80092ea:	4650      	mov	r0, sl
 80092ec:	9904      	ldr	r1, [sp, #16]
 80092ee:	f001 fb55 	bl	800a99c <_Bfree>
 80092f2:	4659      	mov	r1, fp
 80092f4:	4650      	mov	r0, sl
 80092f6:	f001 fb51 	bl	800a99c <_Bfree>
 80092fa:	e627      	b.n	8008f4c <_strtod_l+0x64c>
 80092fc:	f1b8 0f00 	cmp.w	r8, #0
 8009300:	d119      	bne.n	8009336 <_strtod_l+0xa36>
 8009302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009308:	b9e3      	cbnz	r3, 8009344 <_strtod_l+0xa44>
 800930a:	2200      	movs	r2, #0
 800930c:	4630      	mov	r0, r6
 800930e:	4639      	mov	r1, r7
 8009310:	4b3c      	ldr	r3, [pc, #240]	; (8009404 <_strtod_l+0xb04>)
 8009312:	f7f7 fc07 	bl	8000b24 <__aeabi_dcmplt>
 8009316:	b9c8      	cbnz	r0, 800934c <_strtod_l+0xa4c>
 8009318:	2200      	movs	r2, #0
 800931a:	4630      	mov	r0, r6
 800931c:	4639      	mov	r1, r7
 800931e:	4b3c      	ldr	r3, [pc, #240]	; (8009410 <_strtod_l+0xb10>)
 8009320:	f7f7 f98e 	bl	8000640 <__aeabi_dmul>
 8009324:	4604      	mov	r4, r0
 8009326:	460d      	mov	r5, r1
 8009328:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800932c:	9416      	str	r4, [sp, #88]	; 0x58
 800932e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009330:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8009334:	e7a2      	b.n	800927c <_strtod_l+0x97c>
 8009336:	f1b8 0f01 	cmp.w	r8, #1
 800933a:	d103      	bne.n	8009344 <_strtod_l+0xa44>
 800933c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933e:	2b00      	cmp	r3, #0
 8009340:	f43f ad92 	beq.w	8008e68 <_strtod_l+0x568>
 8009344:	2600      	movs	r6, #0
 8009346:	2400      	movs	r4, #0
 8009348:	4f32      	ldr	r7, [pc, #200]	; (8009414 <_strtod_l+0xb14>)
 800934a:	e796      	b.n	800927a <_strtod_l+0x97a>
 800934c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800934e:	4d30      	ldr	r5, [pc, #192]	; (8009410 <_strtod_l+0xb10>)
 8009350:	e7ea      	b.n	8009328 <_strtod_l+0xa28>
 8009352:	4b2f      	ldr	r3, [pc, #188]	; (8009410 <_strtod_l+0xb10>)
 8009354:	2200      	movs	r2, #0
 8009356:	4630      	mov	r0, r6
 8009358:	4639      	mov	r1, r7
 800935a:	f7f7 f971 	bl	8000640 <__aeabi_dmul>
 800935e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009360:	4604      	mov	r4, r0
 8009362:	460d      	mov	r5, r1
 8009364:	b933      	cbnz	r3, 8009374 <_strtod_l+0xa74>
 8009366:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800936a:	9010      	str	r0, [sp, #64]	; 0x40
 800936c:	9311      	str	r3, [sp, #68]	; 0x44
 800936e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009372:	e783      	b.n	800927c <_strtod_l+0x97c>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800937c:	e7f7      	b.n	800936e <_strtod_l+0xa6e>
 800937e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009382:	9b05      	ldr	r3, [sp, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1a8      	bne.n	80092da <_strtod_l+0x9da>
 8009388:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800938c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800938e:	0d1b      	lsrs	r3, r3, #20
 8009390:	051b      	lsls	r3, r3, #20
 8009392:	429a      	cmp	r2, r3
 8009394:	d1a1      	bne.n	80092da <_strtod_l+0x9da>
 8009396:	4620      	mov	r0, r4
 8009398:	4629      	mov	r1, r5
 800939a:	f7f7 fd57 	bl	8000e4c <__aeabi_d2lz>
 800939e:	f7f7 f921 	bl	80005e4 <__aeabi_l2d>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4620      	mov	r0, r4
 80093a8:	4629      	mov	r1, r5
 80093aa:	f7f6 ff91 	bl	80002d0 <__aeabi_dsub>
 80093ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093b4:	ea43 0308 	orr.w	r3, r3, r8
 80093b8:	4313      	orrs	r3, r2
 80093ba:	4604      	mov	r4, r0
 80093bc:	460d      	mov	r5, r1
 80093be:	d066      	beq.n	800948e <_strtod_l+0xb8e>
 80093c0:	a309      	add	r3, pc, #36	; (adr r3, 80093e8 <_strtod_l+0xae8>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f7 fbad 	bl	8000b24 <__aeabi_dcmplt>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	f47f ace2 	bne.w	8008d94 <_strtod_l+0x494>
 80093d0:	a307      	add	r3, pc, #28	; (adr r3, 80093f0 <_strtod_l+0xaf0>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	4620      	mov	r0, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	f7f7 fbc1 	bl	8000b60 <__aeabi_dcmpgt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	f43f af7b 	beq.w	80092da <_strtod_l+0x9da>
 80093e4:	e4d6      	b.n	8008d94 <_strtod_l+0x494>
 80093e6:	bf00      	nop
 80093e8:	94a03595 	.word	0x94a03595
 80093ec:	3fdfffff 	.word	0x3fdfffff
 80093f0:	35afe535 	.word	0x35afe535
 80093f4:	3fe00000 	.word	0x3fe00000
 80093f8:	000fffff 	.word	0x000fffff
 80093fc:	7ff00000 	.word	0x7ff00000
 8009400:	7fefffff 	.word	0x7fefffff
 8009404:	3ff00000 	.word	0x3ff00000
 8009408:	7fe00000 	.word	0x7fe00000
 800940c:	7c9fffff 	.word	0x7c9fffff
 8009410:	3fe00000 	.word	0x3fe00000
 8009414:	bff00000 	.word	0xbff00000
 8009418:	9b05      	ldr	r3, [sp, #20]
 800941a:	b313      	cbz	r3, 8009462 <_strtod_l+0xb62>
 800941c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800941e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009422:	d81e      	bhi.n	8009462 <_strtod_l+0xb62>
 8009424:	a326      	add	r3, pc, #152	; (adr r3, 80094c0 <_strtod_l+0xbc0>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	4620      	mov	r0, r4
 800942c:	4629      	mov	r1, r5
 800942e:	f7f7 fb83 	bl	8000b38 <__aeabi_dcmple>
 8009432:	b190      	cbz	r0, 800945a <_strtod_l+0xb5a>
 8009434:	4629      	mov	r1, r5
 8009436:	4620      	mov	r0, r4
 8009438:	f7f7 fbda 	bl	8000bf0 <__aeabi_d2uiz>
 800943c:	2801      	cmp	r0, #1
 800943e:	bf38      	it	cc
 8009440:	2001      	movcc	r0, #1
 8009442:	f7f7 f883 	bl	800054c <__aeabi_ui2d>
 8009446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	b9d3      	cbnz	r3, 8009484 <_strtod_l+0xb84>
 800944e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009452:	9012      	str	r0, [sp, #72]	; 0x48
 8009454:	9313      	str	r3, [sp, #76]	; 0x4c
 8009456:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800945a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800945c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009460:	1a9f      	subs	r7, r3, r2
 8009462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009466:	f001 fdc9 	bl	800affc <__ulp>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4630      	mov	r0, r6
 8009470:	4639      	mov	r1, r7
 8009472:	f7f7 f8e5 	bl	8000640 <__aeabi_dmul>
 8009476:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800947a:	f7f6 ff2b 	bl	80002d4 <__adddf3>
 800947e:	4680      	mov	r8, r0
 8009480:	4689      	mov	r9, r1
 8009482:	e77e      	b.n	8009382 <_strtod_l+0xa82>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800948c:	e7e3      	b.n	8009456 <_strtod_l+0xb56>
 800948e:	a30e      	add	r3, pc, #56	; (adr r3, 80094c8 <_strtod_l+0xbc8>)
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	f7f7 fb46 	bl	8000b24 <__aeabi_dcmplt>
 8009498:	e7a1      	b.n	80093de <_strtod_l+0xade>
 800949a:	2300      	movs	r3, #0
 800949c:	930a      	str	r3, [sp, #40]	; 0x28
 800949e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	f7ff ba71 	b.w	800898a <_strtod_l+0x8a>
 80094a8:	2a65      	cmp	r2, #101	; 0x65
 80094aa:	f43f ab63 	beq.w	8008b74 <_strtod_l+0x274>
 80094ae:	2a45      	cmp	r2, #69	; 0x45
 80094b0:	f43f ab60 	beq.w	8008b74 <_strtod_l+0x274>
 80094b4:	2301      	movs	r3, #1
 80094b6:	f7ff bb95 	b.w	8008be4 <_strtod_l+0x2e4>
 80094ba:	bf00      	nop
 80094bc:	f3af 8000 	nop.w
 80094c0:	ffc00000 	.word	0xffc00000
 80094c4:	41dfffff 	.word	0x41dfffff
 80094c8:	94a03595 	.word	0x94a03595
 80094cc:	3fcfffff 	.word	0x3fcfffff

080094d0 <strtod>:
 80094d0:	460a      	mov	r2, r1
 80094d2:	4601      	mov	r1, r0
 80094d4:	4802      	ldr	r0, [pc, #8]	; (80094e0 <strtod+0x10>)
 80094d6:	4b03      	ldr	r3, [pc, #12]	; (80094e4 <strtod+0x14>)
 80094d8:	6800      	ldr	r0, [r0, #0]
 80094da:	f7ff ba11 	b.w	8008900 <_strtod_l>
 80094de:	bf00      	nop
 80094e0:	20000024 	.word	0x20000024
 80094e4:	2000008c 	.word	0x2000008c

080094e8 <quorem>:
 80094e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	6903      	ldr	r3, [r0, #16]
 80094ee:	690c      	ldr	r4, [r1, #16]
 80094f0:	4607      	mov	r7, r0
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	f2c0 8082 	blt.w	80095fc <quorem+0x114>
 80094f8:	3c01      	subs	r4, #1
 80094fa:	f100 0514 	add.w	r5, r0, #20
 80094fe:	f101 0814 	add.w	r8, r1, #20
 8009502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800950c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009510:	3301      	adds	r3, #1
 8009512:	429a      	cmp	r2, r3
 8009514:	fbb2 f6f3 	udiv	r6, r2, r3
 8009518:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800951c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009520:	d331      	bcc.n	8009586 <quorem+0x9e>
 8009522:	f04f 0e00 	mov.w	lr, #0
 8009526:	4640      	mov	r0, r8
 8009528:	46ac      	mov	ip, r5
 800952a:	46f2      	mov	sl, lr
 800952c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009530:	b293      	uxth	r3, r2
 8009532:	fb06 e303 	mla	r3, r6, r3, lr
 8009536:	0c12      	lsrs	r2, r2, #16
 8009538:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800953c:	b29b      	uxth	r3, r3
 800953e:	fb06 e202 	mla	r2, r6, r2, lr
 8009542:	ebaa 0303 	sub.w	r3, sl, r3
 8009546:	f8dc a000 	ldr.w	sl, [ip]
 800954a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800954e:	fa1f fa8a 	uxth.w	sl, sl
 8009552:	4453      	add	r3, sl
 8009554:	f8dc a000 	ldr.w	sl, [ip]
 8009558:	b292      	uxth	r2, r2
 800955a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800955e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009562:	b29b      	uxth	r3, r3
 8009564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009568:	4581      	cmp	r9, r0
 800956a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800956e:	f84c 3b04 	str.w	r3, [ip], #4
 8009572:	d2db      	bcs.n	800952c <quorem+0x44>
 8009574:	f855 300b 	ldr.w	r3, [r5, fp]
 8009578:	b92b      	cbnz	r3, 8009586 <quorem+0x9e>
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	3b04      	subs	r3, #4
 800957e:	429d      	cmp	r5, r3
 8009580:	461a      	mov	r2, r3
 8009582:	d32f      	bcc.n	80095e4 <quorem+0xfc>
 8009584:	613c      	str	r4, [r7, #16]
 8009586:	4638      	mov	r0, r7
 8009588:	f001 fc90 	bl	800aeac <__mcmp>
 800958c:	2800      	cmp	r0, #0
 800958e:	db25      	blt.n	80095dc <quorem+0xf4>
 8009590:	4628      	mov	r0, r5
 8009592:	f04f 0c00 	mov.w	ip, #0
 8009596:	3601      	adds	r6, #1
 8009598:	f858 1b04 	ldr.w	r1, [r8], #4
 800959c:	f8d0 e000 	ldr.w	lr, [r0]
 80095a0:	b28b      	uxth	r3, r1
 80095a2:	ebac 0303 	sub.w	r3, ip, r3
 80095a6:	fa1f f28e 	uxth.w	r2, lr
 80095aa:	4413      	add	r3, r2
 80095ac:	0c0a      	lsrs	r2, r1, #16
 80095ae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80095b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095bc:	45c1      	cmp	r9, r8
 80095be:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80095c2:	f840 3b04 	str.w	r3, [r0], #4
 80095c6:	d2e7      	bcs.n	8009598 <quorem+0xb0>
 80095c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095d0:	b922      	cbnz	r2, 80095dc <quorem+0xf4>
 80095d2:	3b04      	subs	r3, #4
 80095d4:	429d      	cmp	r5, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	d30a      	bcc.n	80095f0 <quorem+0x108>
 80095da:	613c      	str	r4, [r7, #16]
 80095dc:	4630      	mov	r0, r6
 80095de:	b003      	add	sp, #12
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e4:	6812      	ldr	r2, [r2, #0]
 80095e6:	3b04      	subs	r3, #4
 80095e8:	2a00      	cmp	r2, #0
 80095ea:	d1cb      	bne.n	8009584 <quorem+0x9c>
 80095ec:	3c01      	subs	r4, #1
 80095ee:	e7c6      	b.n	800957e <quorem+0x96>
 80095f0:	6812      	ldr	r2, [r2, #0]
 80095f2:	3b04      	subs	r3, #4
 80095f4:	2a00      	cmp	r2, #0
 80095f6:	d1f0      	bne.n	80095da <quorem+0xf2>
 80095f8:	3c01      	subs	r4, #1
 80095fa:	e7eb      	b.n	80095d4 <quorem+0xec>
 80095fc:	2000      	movs	r0, #0
 80095fe:	e7ee      	b.n	80095de <quorem+0xf6>

08009600 <_dtoa_r>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	4616      	mov	r6, r2
 8009606:	461f      	mov	r7, r3
 8009608:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800960a:	b099      	sub	sp, #100	; 0x64
 800960c:	4605      	mov	r5, r0
 800960e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009612:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009616:	b974      	cbnz	r4, 8009636 <_dtoa_r+0x36>
 8009618:	2010      	movs	r0, #16
 800961a:	f001 f949 	bl	800a8b0 <malloc>
 800961e:	4602      	mov	r2, r0
 8009620:	6268      	str	r0, [r5, #36]	; 0x24
 8009622:	b920      	cbnz	r0, 800962e <_dtoa_r+0x2e>
 8009624:	21ea      	movs	r1, #234	; 0xea
 8009626:	4ba8      	ldr	r3, [pc, #672]	; (80098c8 <_dtoa_r+0x2c8>)
 8009628:	48a8      	ldr	r0, [pc, #672]	; (80098cc <_dtoa_r+0x2cc>)
 800962a:	f002 f8b3 	bl	800b794 <__assert_func>
 800962e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009632:	6004      	str	r4, [r0, #0]
 8009634:	60c4      	str	r4, [r0, #12]
 8009636:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009638:	6819      	ldr	r1, [r3, #0]
 800963a:	b151      	cbz	r1, 8009652 <_dtoa_r+0x52>
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	2301      	movs	r3, #1
 8009640:	4093      	lsls	r3, r2
 8009642:	604a      	str	r2, [r1, #4]
 8009644:	608b      	str	r3, [r1, #8]
 8009646:	4628      	mov	r0, r5
 8009648:	f001 f9a8 	bl	800a99c <_Bfree>
 800964c:	2200      	movs	r2, #0
 800964e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	1e3b      	subs	r3, r7, #0
 8009654:	bfaf      	iteee	ge
 8009656:	2300      	movge	r3, #0
 8009658:	2201      	movlt	r2, #1
 800965a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800965e:	9305      	strlt	r3, [sp, #20]
 8009660:	bfa8      	it	ge
 8009662:	f8c8 3000 	strge.w	r3, [r8]
 8009666:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800966a:	4b99      	ldr	r3, [pc, #612]	; (80098d0 <_dtoa_r+0x2d0>)
 800966c:	bfb8      	it	lt
 800966e:	f8c8 2000 	strlt.w	r2, [r8]
 8009672:	ea33 0309 	bics.w	r3, r3, r9
 8009676:	d119      	bne.n	80096ac <_dtoa_r+0xac>
 8009678:	f242 730f 	movw	r3, #9999	; 0x270f
 800967c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009684:	4333      	orrs	r3, r6
 8009686:	f000 857f 	beq.w	800a188 <_dtoa_r+0xb88>
 800968a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800968c:	b953      	cbnz	r3, 80096a4 <_dtoa_r+0xa4>
 800968e:	4b91      	ldr	r3, [pc, #580]	; (80098d4 <_dtoa_r+0x2d4>)
 8009690:	e022      	b.n	80096d8 <_dtoa_r+0xd8>
 8009692:	4b91      	ldr	r3, [pc, #580]	; (80098d8 <_dtoa_r+0x2d8>)
 8009694:	9303      	str	r3, [sp, #12]
 8009696:	3308      	adds	r3, #8
 8009698:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	9803      	ldr	r0, [sp, #12]
 800969e:	b019      	add	sp, #100	; 0x64
 80096a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a4:	4b8b      	ldr	r3, [pc, #556]	; (80098d4 <_dtoa_r+0x2d4>)
 80096a6:	9303      	str	r3, [sp, #12]
 80096a8:	3303      	adds	r3, #3
 80096aa:	e7f5      	b.n	8009698 <_dtoa_r+0x98>
 80096ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80096b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80096b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096b8:	2200      	movs	r2, #0
 80096ba:	2300      	movs	r3, #0
 80096bc:	f7f7 fa28 	bl	8000b10 <__aeabi_dcmpeq>
 80096c0:	4680      	mov	r8, r0
 80096c2:	b158      	cbz	r0, 80096dc <_dtoa_r+0xdc>
 80096c4:	2301      	movs	r3, #1
 80096c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f000 8558 	beq.w	800a182 <_dtoa_r+0xb82>
 80096d2:	4882      	ldr	r0, [pc, #520]	; (80098dc <_dtoa_r+0x2dc>)
 80096d4:	6018      	str	r0, [r3, #0]
 80096d6:	1e43      	subs	r3, r0, #1
 80096d8:	9303      	str	r3, [sp, #12]
 80096da:	e7df      	b.n	800969c <_dtoa_r+0x9c>
 80096dc:	ab16      	add	r3, sp, #88	; 0x58
 80096de:	9301      	str	r3, [sp, #4]
 80096e0:	ab17      	add	r3, sp, #92	; 0x5c
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	4628      	mov	r0, r5
 80096e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80096ea:	f001 fd01 	bl	800b0f0 <__d2b>
 80096ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80096f2:	4683      	mov	fp, r0
 80096f4:	2c00      	cmp	r4, #0
 80096f6:	d07f      	beq.n	80097f8 <_dtoa_r+0x1f8>
 80096f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009706:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800970a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800970e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009712:	2200      	movs	r2, #0
 8009714:	4b72      	ldr	r3, [pc, #456]	; (80098e0 <_dtoa_r+0x2e0>)
 8009716:	f7f6 fddb 	bl	80002d0 <__aeabi_dsub>
 800971a:	a365      	add	r3, pc, #404	; (adr r3, 80098b0 <_dtoa_r+0x2b0>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 ff8e 	bl	8000640 <__aeabi_dmul>
 8009724:	a364      	add	r3, pc, #400	; (adr r3, 80098b8 <_dtoa_r+0x2b8>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f7f6 fdd3 	bl	80002d4 <__adddf3>
 800972e:	4606      	mov	r6, r0
 8009730:	4620      	mov	r0, r4
 8009732:	460f      	mov	r7, r1
 8009734:	f7f6 ff1a 	bl	800056c <__aeabi_i2d>
 8009738:	a361      	add	r3, pc, #388	; (adr r3, 80098c0 <_dtoa_r+0x2c0>)
 800973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973e:	f7f6 ff7f 	bl	8000640 <__aeabi_dmul>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	f7f6 fdc3 	bl	80002d4 <__adddf3>
 800974e:	4606      	mov	r6, r0
 8009750:	460f      	mov	r7, r1
 8009752:	f7f7 fa25 	bl	8000ba0 <__aeabi_d2iz>
 8009756:	2200      	movs	r2, #0
 8009758:	4682      	mov	sl, r0
 800975a:	2300      	movs	r3, #0
 800975c:	4630      	mov	r0, r6
 800975e:	4639      	mov	r1, r7
 8009760:	f7f7 f9e0 	bl	8000b24 <__aeabi_dcmplt>
 8009764:	b148      	cbz	r0, 800977a <_dtoa_r+0x17a>
 8009766:	4650      	mov	r0, sl
 8009768:	f7f6 ff00 	bl	800056c <__aeabi_i2d>
 800976c:	4632      	mov	r2, r6
 800976e:	463b      	mov	r3, r7
 8009770:	f7f7 f9ce 	bl	8000b10 <__aeabi_dcmpeq>
 8009774:	b908      	cbnz	r0, 800977a <_dtoa_r+0x17a>
 8009776:	f10a 3aff 	add.w	sl, sl, #4294967295
 800977a:	f1ba 0f16 	cmp.w	sl, #22
 800977e:	d858      	bhi.n	8009832 <_dtoa_r+0x232>
 8009780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009784:	4b57      	ldr	r3, [pc, #348]	; (80098e4 <_dtoa_r+0x2e4>)
 8009786:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	f7f7 f9c9 	bl	8000b24 <__aeabi_dcmplt>
 8009792:	2800      	cmp	r0, #0
 8009794:	d04f      	beq.n	8009836 <_dtoa_r+0x236>
 8009796:	2300      	movs	r3, #0
 8009798:	f10a 3aff 	add.w	sl, sl, #4294967295
 800979c:	930f      	str	r3, [sp, #60]	; 0x3c
 800979e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80097a0:	1b1c      	subs	r4, r3, r4
 80097a2:	1e63      	subs	r3, r4, #1
 80097a4:	9309      	str	r3, [sp, #36]	; 0x24
 80097a6:	bf49      	itett	mi
 80097a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80097ac:	2300      	movpl	r3, #0
 80097ae:	9306      	strmi	r3, [sp, #24]
 80097b0:	2300      	movmi	r3, #0
 80097b2:	bf54      	ite	pl
 80097b4:	9306      	strpl	r3, [sp, #24]
 80097b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80097b8:	f1ba 0f00 	cmp.w	sl, #0
 80097bc:	db3d      	blt.n	800983a <_dtoa_r+0x23a>
 80097be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80097c4:	4453      	add	r3, sl
 80097c6:	9309      	str	r3, [sp, #36]	; 0x24
 80097c8:	2300      	movs	r3, #0
 80097ca:	930a      	str	r3, [sp, #40]	; 0x28
 80097cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097ce:	2b09      	cmp	r3, #9
 80097d0:	f200 808c 	bhi.w	80098ec <_dtoa_r+0x2ec>
 80097d4:	2b05      	cmp	r3, #5
 80097d6:	bfc4      	itt	gt
 80097d8:	3b04      	subgt	r3, #4
 80097da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80097dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097de:	bfc8      	it	gt
 80097e0:	2400      	movgt	r4, #0
 80097e2:	f1a3 0302 	sub.w	r3, r3, #2
 80097e6:	bfd8      	it	le
 80097e8:	2401      	movle	r4, #1
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	f200 808a 	bhi.w	8009904 <_dtoa_r+0x304>
 80097f0:	e8df f003 	tbb	[pc, r3]
 80097f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80097f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80097fc:	441c      	add	r4, r3
 80097fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009802:	2b20      	cmp	r3, #32
 8009804:	bfc3      	ittte	gt
 8009806:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800980a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800980e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009812:	f1c3 0320 	rsble	r3, r3, #32
 8009816:	bfc6      	itte	gt
 8009818:	fa26 f000 	lsrgt.w	r0, r6, r0
 800981c:	4318      	orrgt	r0, r3
 800981e:	fa06 f003 	lslle.w	r0, r6, r3
 8009822:	f7f6 fe93 	bl	800054c <__aeabi_ui2d>
 8009826:	2301      	movs	r3, #1
 8009828:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800982c:	3c01      	subs	r4, #1
 800982e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009830:	e76f      	b.n	8009712 <_dtoa_r+0x112>
 8009832:	2301      	movs	r3, #1
 8009834:	e7b2      	b.n	800979c <_dtoa_r+0x19c>
 8009836:	900f      	str	r0, [sp, #60]	; 0x3c
 8009838:	e7b1      	b.n	800979e <_dtoa_r+0x19e>
 800983a:	9b06      	ldr	r3, [sp, #24]
 800983c:	eba3 030a 	sub.w	r3, r3, sl
 8009840:	9306      	str	r3, [sp, #24]
 8009842:	f1ca 0300 	rsb	r3, sl, #0
 8009846:	930a      	str	r3, [sp, #40]	; 0x28
 8009848:	2300      	movs	r3, #0
 800984a:	930e      	str	r3, [sp, #56]	; 0x38
 800984c:	e7be      	b.n	80097cc <_dtoa_r+0x1cc>
 800984e:	2300      	movs	r3, #0
 8009850:	930b      	str	r3, [sp, #44]	; 0x2c
 8009852:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009854:	2b00      	cmp	r3, #0
 8009856:	dc58      	bgt.n	800990a <_dtoa_r+0x30a>
 8009858:	f04f 0901 	mov.w	r9, #1
 800985c:	464b      	mov	r3, r9
 800985e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009862:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009866:	2200      	movs	r2, #0
 8009868:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800986a:	6042      	str	r2, [r0, #4]
 800986c:	2204      	movs	r2, #4
 800986e:	f102 0614 	add.w	r6, r2, #20
 8009872:	429e      	cmp	r6, r3
 8009874:	6841      	ldr	r1, [r0, #4]
 8009876:	d94e      	bls.n	8009916 <_dtoa_r+0x316>
 8009878:	4628      	mov	r0, r5
 800987a:	f001 f84f 	bl	800a91c <_Balloc>
 800987e:	9003      	str	r0, [sp, #12]
 8009880:	2800      	cmp	r0, #0
 8009882:	d14c      	bne.n	800991e <_dtoa_r+0x31e>
 8009884:	4602      	mov	r2, r0
 8009886:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800988a:	4b17      	ldr	r3, [pc, #92]	; (80098e8 <_dtoa_r+0x2e8>)
 800988c:	e6cc      	b.n	8009628 <_dtoa_r+0x28>
 800988e:	2301      	movs	r3, #1
 8009890:	e7de      	b.n	8009850 <_dtoa_r+0x250>
 8009892:	2300      	movs	r3, #0
 8009894:	930b      	str	r3, [sp, #44]	; 0x2c
 8009896:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009898:	eb0a 0903 	add.w	r9, sl, r3
 800989c:	f109 0301 	add.w	r3, r9, #1
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	9308      	str	r3, [sp, #32]
 80098a4:	bfb8      	it	lt
 80098a6:	2301      	movlt	r3, #1
 80098a8:	e7dd      	b.n	8009866 <_dtoa_r+0x266>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e7f2      	b.n	8009894 <_dtoa_r+0x294>
 80098ae:	bf00      	nop
 80098b0:	636f4361 	.word	0x636f4361
 80098b4:	3fd287a7 	.word	0x3fd287a7
 80098b8:	8b60c8b3 	.word	0x8b60c8b3
 80098bc:	3fc68a28 	.word	0x3fc68a28
 80098c0:	509f79fb 	.word	0x509f79fb
 80098c4:	3fd34413 	.word	0x3fd34413
 80098c8:	0800c435 	.word	0x0800c435
 80098cc:	0800c44c 	.word	0x0800c44c
 80098d0:	7ff00000 	.word	0x7ff00000
 80098d4:	0800c431 	.word	0x0800c431
 80098d8:	0800c428 	.word	0x0800c428
 80098dc:	0800c3b1 	.word	0x0800c3b1
 80098e0:	3ff80000 	.word	0x3ff80000
 80098e4:	0800c5b8 	.word	0x0800c5b8
 80098e8:	0800c4a7 	.word	0x0800c4a7
 80098ec:	2401      	movs	r4, #1
 80098ee:	2300      	movs	r3, #0
 80098f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80098f2:	9322      	str	r3, [sp, #136]	; 0x88
 80098f4:	f04f 39ff 	mov.w	r9, #4294967295
 80098f8:	2200      	movs	r2, #0
 80098fa:	2312      	movs	r3, #18
 80098fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8009900:	9223      	str	r2, [sp, #140]	; 0x8c
 8009902:	e7b0      	b.n	8009866 <_dtoa_r+0x266>
 8009904:	2301      	movs	r3, #1
 8009906:	930b      	str	r3, [sp, #44]	; 0x2c
 8009908:	e7f4      	b.n	80098f4 <_dtoa_r+0x2f4>
 800990a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800990e:	464b      	mov	r3, r9
 8009910:	f8cd 9020 	str.w	r9, [sp, #32]
 8009914:	e7a7      	b.n	8009866 <_dtoa_r+0x266>
 8009916:	3101      	adds	r1, #1
 8009918:	6041      	str	r1, [r0, #4]
 800991a:	0052      	lsls	r2, r2, #1
 800991c:	e7a7      	b.n	800986e <_dtoa_r+0x26e>
 800991e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009920:	9a03      	ldr	r2, [sp, #12]
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	9b08      	ldr	r3, [sp, #32]
 8009926:	2b0e      	cmp	r3, #14
 8009928:	f200 80a8 	bhi.w	8009a7c <_dtoa_r+0x47c>
 800992c:	2c00      	cmp	r4, #0
 800992e:	f000 80a5 	beq.w	8009a7c <_dtoa_r+0x47c>
 8009932:	f1ba 0f00 	cmp.w	sl, #0
 8009936:	dd34      	ble.n	80099a2 <_dtoa_r+0x3a2>
 8009938:	4a9a      	ldr	r2, [pc, #616]	; (8009ba4 <_dtoa_r+0x5a4>)
 800993a:	f00a 030f 	and.w	r3, sl, #15
 800993e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009942:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009946:	e9d3 3400 	ldrd	r3, r4, [r3]
 800994a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800994e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009952:	d016      	beq.n	8009982 <_dtoa_r+0x382>
 8009954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009958:	4b93      	ldr	r3, [pc, #588]	; (8009ba8 <_dtoa_r+0x5a8>)
 800995a:	2703      	movs	r7, #3
 800995c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009960:	f7f6 ff98 	bl	8000894 <__aeabi_ddiv>
 8009964:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009968:	f004 040f 	and.w	r4, r4, #15
 800996c:	4e8e      	ldr	r6, [pc, #568]	; (8009ba8 <_dtoa_r+0x5a8>)
 800996e:	b954      	cbnz	r4, 8009986 <_dtoa_r+0x386>
 8009970:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009978:	f7f6 ff8c 	bl	8000894 <__aeabi_ddiv>
 800997c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009980:	e029      	b.n	80099d6 <_dtoa_r+0x3d6>
 8009982:	2702      	movs	r7, #2
 8009984:	e7f2      	b.n	800996c <_dtoa_r+0x36c>
 8009986:	07e1      	lsls	r1, r4, #31
 8009988:	d508      	bpl.n	800999c <_dtoa_r+0x39c>
 800998a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800998e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009992:	f7f6 fe55 	bl	8000640 <__aeabi_dmul>
 8009996:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800999a:	3701      	adds	r7, #1
 800999c:	1064      	asrs	r4, r4, #1
 800999e:	3608      	adds	r6, #8
 80099a0:	e7e5      	b.n	800996e <_dtoa_r+0x36e>
 80099a2:	f000 80a5 	beq.w	8009af0 <_dtoa_r+0x4f0>
 80099a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099aa:	f1ca 0400 	rsb	r4, sl, #0
 80099ae:	4b7d      	ldr	r3, [pc, #500]	; (8009ba4 <_dtoa_r+0x5a4>)
 80099b0:	f004 020f 	and.w	r2, r4, #15
 80099b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f7f6 fe40 	bl	8000640 <__aeabi_dmul>
 80099c0:	2702      	movs	r7, #2
 80099c2:	2300      	movs	r3, #0
 80099c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099c8:	4e77      	ldr	r6, [pc, #476]	; (8009ba8 <_dtoa_r+0x5a8>)
 80099ca:	1124      	asrs	r4, r4, #4
 80099cc:	2c00      	cmp	r4, #0
 80099ce:	f040 8084 	bne.w	8009ada <_dtoa_r+0x4da>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1d2      	bne.n	800997c <_dtoa_r+0x37c>
 80099d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 808b 	beq.w	8009af4 <_dtoa_r+0x4f4>
 80099de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80099e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80099e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80099ea:	2200      	movs	r2, #0
 80099ec:	4b6f      	ldr	r3, [pc, #444]	; (8009bac <_dtoa_r+0x5ac>)
 80099ee:	f7f7 f899 	bl	8000b24 <__aeabi_dcmplt>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d07e      	beq.n	8009af4 <_dtoa_r+0x4f4>
 80099f6:	9b08      	ldr	r3, [sp, #32]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d07b      	beq.n	8009af4 <_dtoa_r+0x4f4>
 80099fc:	f1b9 0f00 	cmp.w	r9, #0
 8009a00:	dd38      	ble.n	8009a74 <_dtoa_r+0x474>
 8009a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a06:	2200      	movs	r2, #0
 8009a08:	4b69      	ldr	r3, [pc, #420]	; (8009bb0 <_dtoa_r+0x5b0>)
 8009a0a:	f7f6 fe19 	bl	8000640 <__aeabi_dmul>
 8009a0e:	464c      	mov	r4, r9
 8009a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a14:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009a18:	3701      	adds	r7, #1
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	f7f6 fda6 	bl	800056c <__aeabi_i2d>
 8009a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a24:	f7f6 fe0c 	bl	8000640 <__aeabi_dmul>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4b62      	ldr	r3, [pc, #392]	; (8009bb4 <_dtoa_r+0x5b4>)
 8009a2c:	f7f6 fc52 	bl	80002d4 <__adddf3>
 8009a30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009a34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a38:	9611      	str	r6, [sp, #68]	; 0x44
 8009a3a:	2c00      	cmp	r4, #0
 8009a3c:	d15d      	bne.n	8009afa <_dtoa_r+0x4fa>
 8009a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a42:	2200      	movs	r2, #0
 8009a44:	4b5c      	ldr	r3, [pc, #368]	; (8009bb8 <_dtoa_r+0x5b8>)
 8009a46:	f7f6 fc43 	bl	80002d0 <__aeabi_dsub>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a52:	4633      	mov	r3, r6
 8009a54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a56:	f7f7 f883 	bl	8000b60 <__aeabi_dcmpgt>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f040 829c 	bne.w	8009f98 <_dtoa_r+0x998>
 8009a60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009a6a:	f7f7 f85b 	bl	8000b24 <__aeabi_dcmplt>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f040 8290 	bne.w	8009f94 <_dtoa_r+0x994>
 8009a74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009a78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009a7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f2c0 8152 	blt.w	8009d28 <_dtoa_r+0x728>
 8009a84:	f1ba 0f0e 	cmp.w	sl, #14
 8009a88:	f300 814e 	bgt.w	8009d28 <_dtoa_r+0x728>
 8009a8c:	4b45      	ldr	r3, [pc, #276]	; (8009ba4 <_dtoa_r+0x5a4>)
 8009a8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009a9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f280 80db 	bge.w	8009c58 <_dtoa_r+0x658>
 8009aa2:	9b08      	ldr	r3, [sp, #32]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f300 80d7 	bgt.w	8009c58 <_dtoa_r+0x658>
 8009aaa:	f040 8272 	bne.w	8009f92 <_dtoa_r+0x992>
 8009aae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4b40      	ldr	r3, [pc, #256]	; (8009bb8 <_dtoa_r+0x5b8>)
 8009ab6:	f7f6 fdc3 	bl	8000640 <__aeabi_dmul>
 8009aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009abe:	f7f7 f845 	bl	8000b4c <__aeabi_dcmpge>
 8009ac2:	9c08      	ldr	r4, [sp, #32]
 8009ac4:	4626      	mov	r6, r4
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	f040 8248 	bne.w	8009f5c <_dtoa_r+0x95c>
 8009acc:	2331      	movs	r3, #49	; 0x31
 8009ace:	9f03      	ldr	r7, [sp, #12]
 8009ad0:	f10a 0a01 	add.w	sl, sl, #1
 8009ad4:	f807 3b01 	strb.w	r3, [r7], #1
 8009ad8:	e244      	b.n	8009f64 <_dtoa_r+0x964>
 8009ada:	07e2      	lsls	r2, r4, #31
 8009adc:	d505      	bpl.n	8009aea <_dtoa_r+0x4ea>
 8009ade:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ae2:	f7f6 fdad 	bl	8000640 <__aeabi_dmul>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	3701      	adds	r7, #1
 8009aea:	1064      	asrs	r4, r4, #1
 8009aec:	3608      	adds	r6, #8
 8009aee:	e76d      	b.n	80099cc <_dtoa_r+0x3cc>
 8009af0:	2702      	movs	r7, #2
 8009af2:	e770      	b.n	80099d6 <_dtoa_r+0x3d6>
 8009af4:	46d0      	mov	r8, sl
 8009af6:	9c08      	ldr	r4, [sp, #32]
 8009af8:	e78f      	b.n	8009a1a <_dtoa_r+0x41a>
 8009afa:	9903      	ldr	r1, [sp, #12]
 8009afc:	4b29      	ldr	r3, [pc, #164]	; (8009ba4 <_dtoa_r+0x5a4>)
 8009afe:	4421      	add	r1, r4
 8009b00:	9112      	str	r1, [sp, #72]	; 0x48
 8009b02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009b0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b10:	2900      	cmp	r1, #0
 8009b12:	d055      	beq.n	8009bc0 <_dtoa_r+0x5c0>
 8009b14:	2000      	movs	r0, #0
 8009b16:	4929      	ldr	r1, [pc, #164]	; (8009bbc <_dtoa_r+0x5bc>)
 8009b18:	f7f6 febc 	bl	8000894 <__aeabi_ddiv>
 8009b1c:	463b      	mov	r3, r7
 8009b1e:	4632      	mov	r2, r6
 8009b20:	f7f6 fbd6 	bl	80002d0 <__aeabi_dsub>
 8009b24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b28:	9f03      	ldr	r7, [sp, #12]
 8009b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b2e:	f7f7 f837 	bl	8000ba0 <__aeabi_d2iz>
 8009b32:	4604      	mov	r4, r0
 8009b34:	f7f6 fd1a 	bl	800056c <__aeabi_i2d>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b40:	f7f6 fbc6 	bl	80002d0 <__aeabi_dsub>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	3430      	adds	r4, #48	; 0x30
 8009b4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b52:	f807 4b01 	strb.w	r4, [r7], #1
 8009b56:	f7f6 ffe5 	bl	8000b24 <__aeabi_dcmplt>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d174      	bne.n	8009c48 <_dtoa_r+0x648>
 8009b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b62:	2000      	movs	r0, #0
 8009b64:	4911      	ldr	r1, [pc, #68]	; (8009bac <_dtoa_r+0x5ac>)
 8009b66:	f7f6 fbb3 	bl	80002d0 <__aeabi_dsub>
 8009b6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b6e:	f7f6 ffd9 	bl	8000b24 <__aeabi_dcmplt>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f040 80b7 	bne.w	8009ce6 <_dtoa_r+0x6e6>
 8009b78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b7a:	429f      	cmp	r7, r3
 8009b7c:	f43f af7a 	beq.w	8009a74 <_dtoa_r+0x474>
 8009b80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b84:	2200      	movs	r2, #0
 8009b86:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <_dtoa_r+0x5b0>)
 8009b88:	f7f6 fd5a 	bl	8000640 <__aeabi_dmul>
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b96:	4b06      	ldr	r3, [pc, #24]	; (8009bb0 <_dtoa_r+0x5b0>)
 8009b98:	f7f6 fd52 	bl	8000640 <__aeabi_dmul>
 8009b9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ba0:	e7c3      	b.n	8009b2a <_dtoa_r+0x52a>
 8009ba2:	bf00      	nop
 8009ba4:	0800c5b8 	.word	0x0800c5b8
 8009ba8:	0800c590 	.word	0x0800c590
 8009bac:	3ff00000 	.word	0x3ff00000
 8009bb0:	40240000 	.word	0x40240000
 8009bb4:	401c0000 	.word	0x401c0000
 8009bb8:	40140000 	.word	0x40140000
 8009bbc:	3fe00000 	.word	0x3fe00000
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	f7f6 fd3c 	bl	8000640 <__aeabi_dmul>
 8009bc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009bce:	9c03      	ldr	r4, [sp, #12]
 8009bd0:	9314      	str	r3, [sp, #80]	; 0x50
 8009bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bd6:	f7f6 ffe3 	bl	8000ba0 <__aeabi_d2iz>
 8009bda:	9015      	str	r0, [sp, #84]	; 0x54
 8009bdc:	f7f6 fcc6 	bl	800056c <__aeabi_i2d>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009be8:	f7f6 fb72 	bl	80002d0 <__aeabi_dsub>
 8009bec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bee:	4606      	mov	r6, r0
 8009bf0:	3330      	adds	r3, #48	; 0x30
 8009bf2:	f804 3b01 	strb.w	r3, [r4], #1
 8009bf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bf8:	460f      	mov	r7, r1
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	f04f 0200 	mov.w	r2, #0
 8009c00:	d124      	bne.n	8009c4c <_dtoa_r+0x64c>
 8009c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c06:	4bb0      	ldr	r3, [pc, #704]	; (8009ec8 <_dtoa_r+0x8c8>)
 8009c08:	f7f6 fb64 	bl	80002d4 <__adddf3>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7f6 ffa4 	bl	8000b60 <__aeabi_dcmpgt>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d163      	bne.n	8009ce4 <_dtoa_r+0x6e4>
 8009c1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c20:	2000      	movs	r0, #0
 8009c22:	49a9      	ldr	r1, [pc, #676]	; (8009ec8 <_dtoa_r+0x8c8>)
 8009c24:	f7f6 fb54 	bl	80002d0 <__aeabi_dsub>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	4639      	mov	r1, r7
 8009c30:	f7f6 ff78 	bl	8000b24 <__aeabi_dcmplt>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	f43f af1d 	beq.w	8009a74 <_dtoa_r+0x474>
 8009c3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009c3c:	1e7b      	subs	r3, r7, #1
 8009c3e:	9314      	str	r3, [sp, #80]	; 0x50
 8009c40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009c44:	2b30      	cmp	r3, #48	; 0x30
 8009c46:	d0f8      	beq.n	8009c3a <_dtoa_r+0x63a>
 8009c48:	46c2      	mov	sl, r8
 8009c4a:	e03b      	b.n	8009cc4 <_dtoa_r+0x6c4>
 8009c4c:	4b9f      	ldr	r3, [pc, #636]	; (8009ecc <_dtoa_r+0x8cc>)
 8009c4e:	f7f6 fcf7 	bl	8000640 <__aeabi_dmul>
 8009c52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c56:	e7bc      	b.n	8009bd2 <_dtoa_r+0x5d2>
 8009c58:	9f03      	ldr	r7, [sp, #12]
 8009c5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009c5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c62:	4640      	mov	r0, r8
 8009c64:	4649      	mov	r1, r9
 8009c66:	f7f6 fe15 	bl	8000894 <__aeabi_ddiv>
 8009c6a:	f7f6 ff99 	bl	8000ba0 <__aeabi_d2iz>
 8009c6e:	4604      	mov	r4, r0
 8009c70:	f7f6 fc7c 	bl	800056c <__aeabi_i2d>
 8009c74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c78:	f7f6 fce2 	bl	8000640 <__aeabi_dmul>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4640      	mov	r0, r8
 8009c82:	4649      	mov	r1, r9
 8009c84:	f7f6 fb24 	bl	80002d0 <__aeabi_dsub>
 8009c88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009c8c:	f807 6b01 	strb.w	r6, [r7], #1
 8009c90:	9e03      	ldr	r6, [sp, #12]
 8009c92:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009c96:	1bbe      	subs	r6, r7, r6
 8009c98:	45b4      	cmp	ip, r6
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	d136      	bne.n	8009d0e <_dtoa_r+0x70e>
 8009ca0:	f7f6 fb18 	bl	80002d4 <__adddf3>
 8009ca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ca8:	4680      	mov	r8, r0
 8009caa:	4689      	mov	r9, r1
 8009cac:	f7f6 ff58 	bl	8000b60 <__aeabi_dcmpgt>
 8009cb0:	bb58      	cbnz	r0, 8009d0a <_dtoa_r+0x70a>
 8009cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	4649      	mov	r1, r9
 8009cba:	f7f6 ff29 	bl	8000b10 <__aeabi_dcmpeq>
 8009cbe:	b108      	cbz	r0, 8009cc4 <_dtoa_r+0x6c4>
 8009cc0:	07e1      	lsls	r1, r4, #31
 8009cc2:	d422      	bmi.n	8009d0a <_dtoa_r+0x70a>
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	4659      	mov	r1, fp
 8009cc8:	f000 fe68 	bl	800a99c <_Bfree>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	703b      	strb	r3, [r7, #0]
 8009cd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009cd2:	f10a 0001 	add.w	r0, sl, #1
 8009cd6:	6018      	str	r0, [r3, #0]
 8009cd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f43f acde 	beq.w	800969c <_dtoa_r+0x9c>
 8009ce0:	601f      	str	r7, [r3, #0]
 8009ce2:	e4db      	b.n	800969c <_dtoa_r+0x9c>
 8009ce4:	4627      	mov	r7, r4
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	461f      	mov	r7, r3
 8009cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cee:	2a39      	cmp	r2, #57	; 0x39
 8009cf0:	d107      	bne.n	8009d02 <_dtoa_r+0x702>
 8009cf2:	9a03      	ldr	r2, [sp, #12]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d1f7      	bne.n	8009ce8 <_dtoa_r+0x6e8>
 8009cf8:	2230      	movs	r2, #48	; 0x30
 8009cfa:	9903      	ldr	r1, [sp, #12]
 8009cfc:	f108 0801 	add.w	r8, r8, #1
 8009d00:	700a      	strb	r2, [r1, #0]
 8009d02:	781a      	ldrb	r2, [r3, #0]
 8009d04:	3201      	adds	r2, #1
 8009d06:	701a      	strb	r2, [r3, #0]
 8009d08:	e79e      	b.n	8009c48 <_dtoa_r+0x648>
 8009d0a:	46d0      	mov	r8, sl
 8009d0c:	e7eb      	b.n	8009ce6 <_dtoa_r+0x6e6>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	4b6e      	ldr	r3, [pc, #440]	; (8009ecc <_dtoa_r+0x8cc>)
 8009d12:	f7f6 fc95 	bl	8000640 <__aeabi_dmul>
 8009d16:	2200      	movs	r2, #0
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4680      	mov	r8, r0
 8009d1c:	4689      	mov	r9, r1
 8009d1e:	f7f6 fef7 	bl	8000b10 <__aeabi_dcmpeq>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d09b      	beq.n	8009c5e <_dtoa_r+0x65e>
 8009d26:	e7cd      	b.n	8009cc4 <_dtoa_r+0x6c4>
 8009d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d2a:	2a00      	cmp	r2, #0
 8009d2c:	f000 80d0 	beq.w	8009ed0 <_dtoa_r+0x8d0>
 8009d30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009d32:	2a01      	cmp	r2, #1
 8009d34:	f300 80ae 	bgt.w	8009e94 <_dtoa_r+0x894>
 8009d38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d3a:	2a00      	cmp	r2, #0
 8009d3c:	f000 80a6 	beq.w	8009e8c <_dtoa_r+0x88c>
 8009d40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009d46:	9f06      	ldr	r7, [sp, #24]
 8009d48:	9a06      	ldr	r2, [sp, #24]
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	441a      	add	r2, r3
 8009d4e:	9206      	str	r2, [sp, #24]
 8009d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d52:	4628      	mov	r0, r5
 8009d54:	441a      	add	r2, r3
 8009d56:	9209      	str	r2, [sp, #36]	; 0x24
 8009d58:	f000 ff20 	bl	800ab9c <__i2b>
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	2f00      	cmp	r7, #0
 8009d60:	dd0c      	ble.n	8009d7c <_dtoa_r+0x77c>
 8009d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dd09      	ble.n	8009d7c <_dtoa_r+0x77c>
 8009d68:	42bb      	cmp	r3, r7
 8009d6a:	bfa8      	it	ge
 8009d6c:	463b      	movge	r3, r7
 8009d6e:	9a06      	ldr	r2, [sp, #24]
 8009d70:	1aff      	subs	r7, r7, r3
 8009d72:	1ad2      	subs	r2, r2, r3
 8009d74:	9206      	str	r2, [sp, #24]
 8009d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d7e:	b1f3      	cbz	r3, 8009dbe <_dtoa_r+0x7be>
 8009d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 80a8 	beq.w	8009ed8 <_dtoa_r+0x8d8>
 8009d88:	2c00      	cmp	r4, #0
 8009d8a:	dd10      	ble.n	8009dae <_dtoa_r+0x7ae>
 8009d8c:	4631      	mov	r1, r6
 8009d8e:	4622      	mov	r2, r4
 8009d90:	4628      	mov	r0, r5
 8009d92:	f000 ffc1 	bl	800ad18 <__pow5mult>
 8009d96:	465a      	mov	r2, fp
 8009d98:	4601      	mov	r1, r0
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	f000 ff13 	bl	800abc8 <__multiply>
 8009da2:	4680      	mov	r8, r0
 8009da4:	4659      	mov	r1, fp
 8009da6:	4628      	mov	r0, r5
 8009da8:	f000 fdf8 	bl	800a99c <_Bfree>
 8009dac:	46c3      	mov	fp, r8
 8009dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db0:	1b1a      	subs	r2, r3, r4
 8009db2:	d004      	beq.n	8009dbe <_dtoa_r+0x7be>
 8009db4:	4659      	mov	r1, fp
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 ffae 	bl	800ad18 <__pow5mult>
 8009dbc:	4683      	mov	fp, r0
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	f000 feeb 	bl	800ab9c <__i2b>
 8009dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dc8:	4604      	mov	r4, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f340 8086 	ble.w	8009edc <_dtoa_r+0x8dc>
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f000 ff9f 	bl	800ad18 <__pow5mult>
 8009dda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ddc:	4604      	mov	r4, r0
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	dd7f      	ble.n	8009ee2 <_dtoa_r+0x8e2>
 8009de2:	f04f 0800 	mov.w	r8, #0
 8009de6:	6923      	ldr	r3, [r4, #16]
 8009de8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009dec:	6918      	ldr	r0, [r3, #16]
 8009dee:	f000 fe87 	bl	800ab00 <__hi0bits>
 8009df2:	f1c0 0020 	rsb	r0, r0, #32
 8009df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df8:	4418      	add	r0, r3
 8009dfa:	f010 001f 	ands.w	r0, r0, #31
 8009dfe:	f000 8092 	beq.w	8009f26 <_dtoa_r+0x926>
 8009e02:	f1c0 0320 	rsb	r3, r0, #32
 8009e06:	2b04      	cmp	r3, #4
 8009e08:	f340 808a 	ble.w	8009f20 <_dtoa_r+0x920>
 8009e0c:	f1c0 001c 	rsb	r0, r0, #28
 8009e10:	9b06      	ldr	r3, [sp, #24]
 8009e12:	4407      	add	r7, r0
 8009e14:	4403      	add	r3, r0
 8009e16:	9306      	str	r3, [sp, #24]
 8009e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1a:	4403      	add	r3, r0
 8009e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1e:	9b06      	ldr	r3, [sp, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	dd05      	ble.n	8009e30 <_dtoa_r+0x830>
 8009e24:	4659      	mov	r1, fp
 8009e26:	461a      	mov	r2, r3
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f000 ffcf 	bl	800adcc <__lshift>
 8009e2e:	4683      	mov	fp, r0
 8009e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	dd05      	ble.n	8009e42 <_dtoa_r+0x842>
 8009e36:	4621      	mov	r1, r4
 8009e38:	461a      	mov	r2, r3
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	f000 ffc6 	bl	800adcc <__lshift>
 8009e40:	4604      	mov	r4, r0
 8009e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d070      	beq.n	8009f2a <_dtoa_r+0x92a>
 8009e48:	4621      	mov	r1, r4
 8009e4a:	4658      	mov	r0, fp
 8009e4c:	f001 f82e 	bl	800aeac <__mcmp>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	da6a      	bge.n	8009f2a <_dtoa_r+0x92a>
 8009e54:	2300      	movs	r3, #0
 8009e56:	4659      	mov	r1, fp
 8009e58:	220a      	movs	r2, #10
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f000 fdc0 	bl	800a9e0 <__multadd>
 8009e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e62:	4683      	mov	fp, r0
 8009e64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 8194 	beq.w	800a196 <_dtoa_r+0xb96>
 8009e6e:	4631      	mov	r1, r6
 8009e70:	2300      	movs	r3, #0
 8009e72:	220a      	movs	r2, #10
 8009e74:	4628      	mov	r0, r5
 8009e76:	f000 fdb3 	bl	800a9e0 <__multadd>
 8009e7a:	f1b9 0f00 	cmp.w	r9, #0
 8009e7e:	4606      	mov	r6, r0
 8009e80:	f300 8093 	bgt.w	8009faa <_dtoa_r+0x9aa>
 8009e84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	dc57      	bgt.n	8009f3a <_dtoa_r+0x93a>
 8009e8a:	e08e      	b.n	8009faa <_dtoa_r+0x9aa>
 8009e8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e92:	e757      	b.n	8009d44 <_dtoa_r+0x744>
 8009e94:	9b08      	ldr	r3, [sp, #32]
 8009e96:	1e5c      	subs	r4, r3, #1
 8009e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e9a:	42a3      	cmp	r3, r4
 8009e9c:	bfb7      	itett	lt
 8009e9e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009ea0:	1b1c      	subge	r4, r3, r4
 8009ea2:	1ae2      	sublt	r2, r4, r3
 8009ea4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009ea6:	bfbe      	ittt	lt
 8009ea8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009eaa:	189b      	addlt	r3, r3, r2
 8009eac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009eae:	9b08      	ldr	r3, [sp, #32]
 8009eb0:	bfb8      	it	lt
 8009eb2:	2400      	movlt	r4, #0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	bfbb      	ittet	lt
 8009eb8:	9b06      	ldrlt	r3, [sp, #24]
 8009eba:	9a08      	ldrlt	r2, [sp, #32]
 8009ebc:	9f06      	ldrge	r7, [sp, #24]
 8009ebe:	1a9f      	sublt	r7, r3, r2
 8009ec0:	bfac      	ite	ge
 8009ec2:	9b08      	ldrge	r3, [sp, #32]
 8009ec4:	2300      	movlt	r3, #0
 8009ec6:	e73f      	b.n	8009d48 <_dtoa_r+0x748>
 8009ec8:	3fe00000 	.word	0x3fe00000
 8009ecc:	40240000 	.word	0x40240000
 8009ed0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ed2:	9f06      	ldr	r7, [sp, #24]
 8009ed4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009ed6:	e742      	b.n	8009d5e <_dtoa_r+0x75e>
 8009ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eda:	e76b      	b.n	8009db4 <_dtoa_r+0x7b4>
 8009edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	dc19      	bgt.n	8009f16 <_dtoa_r+0x916>
 8009ee2:	9b04      	ldr	r3, [sp, #16]
 8009ee4:	b9bb      	cbnz	r3, 8009f16 <_dtoa_r+0x916>
 8009ee6:	9b05      	ldr	r3, [sp, #20]
 8009ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eec:	b99b      	cbnz	r3, 8009f16 <_dtoa_r+0x916>
 8009eee:	9b05      	ldr	r3, [sp, #20]
 8009ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ef4:	0d1b      	lsrs	r3, r3, #20
 8009ef6:	051b      	lsls	r3, r3, #20
 8009ef8:	b183      	cbz	r3, 8009f1c <_dtoa_r+0x91c>
 8009efa:	f04f 0801 	mov.w	r8, #1
 8009efe:	9b06      	ldr	r3, [sp, #24]
 8009f00:	3301      	adds	r3, #1
 8009f02:	9306      	str	r3, [sp, #24]
 8009f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f06:	3301      	adds	r3, #1
 8009f08:	9309      	str	r3, [sp, #36]	; 0x24
 8009f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f47f af6a 	bne.w	8009de6 <_dtoa_r+0x7e6>
 8009f12:	2001      	movs	r0, #1
 8009f14:	e76f      	b.n	8009df6 <_dtoa_r+0x7f6>
 8009f16:	f04f 0800 	mov.w	r8, #0
 8009f1a:	e7f6      	b.n	8009f0a <_dtoa_r+0x90a>
 8009f1c:	4698      	mov	r8, r3
 8009f1e:	e7f4      	b.n	8009f0a <_dtoa_r+0x90a>
 8009f20:	f43f af7d 	beq.w	8009e1e <_dtoa_r+0x81e>
 8009f24:	4618      	mov	r0, r3
 8009f26:	301c      	adds	r0, #28
 8009f28:	e772      	b.n	8009e10 <_dtoa_r+0x810>
 8009f2a:	9b08      	ldr	r3, [sp, #32]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	dc36      	bgt.n	8009f9e <_dtoa_r+0x99e>
 8009f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	dd33      	ble.n	8009f9e <_dtoa_r+0x99e>
 8009f36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f3a:	f1b9 0f00 	cmp.w	r9, #0
 8009f3e:	d10d      	bne.n	8009f5c <_dtoa_r+0x95c>
 8009f40:	4621      	mov	r1, r4
 8009f42:	464b      	mov	r3, r9
 8009f44:	2205      	movs	r2, #5
 8009f46:	4628      	mov	r0, r5
 8009f48:	f000 fd4a 	bl	800a9e0 <__multadd>
 8009f4c:	4601      	mov	r1, r0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4658      	mov	r0, fp
 8009f52:	f000 ffab 	bl	800aeac <__mcmp>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	f73f adb8 	bgt.w	8009acc <_dtoa_r+0x4cc>
 8009f5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f5e:	9f03      	ldr	r7, [sp, #12]
 8009f60:	ea6f 0a03 	mvn.w	sl, r3
 8009f64:	f04f 0800 	mov.w	r8, #0
 8009f68:	4621      	mov	r1, r4
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f000 fd16 	bl	800a99c <_Bfree>
 8009f70:	2e00      	cmp	r6, #0
 8009f72:	f43f aea7 	beq.w	8009cc4 <_dtoa_r+0x6c4>
 8009f76:	f1b8 0f00 	cmp.w	r8, #0
 8009f7a:	d005      	beq.n	8009f88 <_dtoa_r+0x988>
 8009f7c:	45b0      	cmp	r8, r6
 8009f7e:	d003      	beq.n	8009f88 <_dtoa_r+0x988>
 8009f80:	4641      	mov	r1, r8
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 fd0a 	bl	800a99c <_Bfree>
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f000 fd06 	bl	800a99c <_Bfree>
 8009f90:	e698      	b.n	8009cc4 <_dtoa_r+0x6c4>
 8009f92:	2400      	movs	r4, #0
 8009f94:	4626      	mov	r6, r4
 8009f96:	e7e1      	b.n	8009f5c <_dtoa_r+0x95c>
 8009f98:	46c2      	mov	sl, r8
 8009f9a:	4626      	mov	r6, r4
 8009f9c:	e596      	b.n	8009acc <_dtoa_r+0x4cc>
 8009f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 80fd 	beq.w	800a1a4 <_dtoa_r+0xba4>
 8009faa:	2f00      	cmp	r7, #0
 8009fac:	dd05      	ble.n	8009fba <_dtoa_r+0x9ba>
 8009fae:	4631      	mov	r1, r6
 8009fb0:	463a      	mov	r2, r7
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f000 ff0a 	bl	800adcc <__lshift>
 8009fb8:	4606      	mov	r6, r0
 8009fba:	f1b8 0f00 	cmp.w	r8, #0
 8009fbe:	d05c      	beq.n	800a07a <_dtoa_r+0xa7a>
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	6871      	ldr	r1, [r6, #4]
 8009fc4:	f000 fcaa 	bl	800a91c <_Balloc>
 8009fc8:	4607      	mov	r7, r0
 8009fca:	b928      	cbnz	r0, 8009fd8 <_dtoa_r+0x9d8>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009fd2:	4b7f      	ldr	r3, [pc, #508]	; (800a1d0 <_dtoa_r+0xbd0>)
 8009fd4:	f7ff bb28 	b.w	8009628 <_dtoa_r+0x28>
 8009fd8:	6932      	ldr	r2, [r6, #16]
 8009fda:	f106 010c 	add.w	r1, r6, #12
 8009fde:	3202      	adds	r2, #2
 8009fe0:	0092      	lsls	r2, r2, #2
 8009fe2:	300c      	adds	r0, #12
 8009fe4:	f000 fc8c 	bl	800a900 <memcpy>
 8009fe8:	2201      	movs	r2, #1
 8009fea:	4639      	mov	r1, r7
 8009fec:	4628      	mov	r0, r5
 8009fee:	f000 feed 	bl	800adcc <__lshift>
 8009ff2:	46b0      	mov	r8, r6
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	9b03      	ldr	r3, [sp, #12]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	9308      	str	r3, [sp, #32]
 8009ffc:	9b03      	ldr	r3, [sp, #12]
 8009ffe:	444b      	add	r3, r9
 800a000:	930a      	str	r3, [sp, #40]	; 0x28
 800a002:	9b04      	ldr	r3, [sp, #16]
 800a004:	f003 0301 	and.w	r3, r3, #1
 800a008:	9309      	str	r3, [sp, #36]	; 0x24
 800a00a:	9b08      	ldr	r3, [sp, #32]
 800a00c:	4621      	mov	r1, r4
 800a00e:	3b01      	subs	r3, #1
 800a010:	4658      	mov	r0, fp
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	f7ff fa68 	bl	80094e8 <quorem>
 800a018:	4603      	mov	r3, r0
 800a01a:	4641      	mov	r1, r8
 800a01c:	3330      	adds	r3, #48	; 0x30
 800a01e:	9006      	str	r0, [sp, #24]
 800a020:	4658      	mov	r0, fp
 800a022:	930b      	str	r3, [sp, #44]	; 0x2c
 800a024:	f000 ff42 	bl	800aeac <__mcmp>
 800a028:	4632      	mov	r2, r6
 800a02a:	4681      	mov	r9, r0
 800a02c:	4621      	mov	r1, r4
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 ff58 	bl	800aee4 <__mdiff>
 800a034:	68c2      	ldr	r2, [r0, #12]
 800a036:	4607      	mov	r7, r0
 800a038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a03a:	bb02      	cbnz	r2, 800a07e <_dtoa_r+0xa7e>
 800a03c:	4601      	mov	r1, r0
 800a03e:	4658      	mov	r0, fp
 800a040:	f000 ff34 	bl	800aeac <__mcmp>
 800a044:	4602      	mov	r2, r0
 800a046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a048:	4639      	mov	r1, r7
 800a04a:	4628      	mov	r0, r5
 800a04c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a050:	f000 fca4 	bl	800a99c <_Bfree>
 800a054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a058:	9f08      	ldr	r7, [sp, #32]
 800a05a:	ea43 0102 	orr.w	r1, r3, r2
 800a05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a060:	430b      	orrs	r3, r1
 800a062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a064:	d10d      	bne.n	800a082 <_dtoa_r+0xa82>
 800a066:	2b39      	cmp	r3, #57	; 0x39
 800a068:	d029      	beq.n	800a0be <_dtoa_r+0xabe>
 800a06a:	f1b9 0f00 	cmp.w	r9, #0
 800a06e:	dd01      	ble.n	800a074 <_dtoa_r+0xa74>
 800a070:	9b06      	ldr	r3, [sp, #24]
 800a072:	3331      	adds	r3, #49	; 0x31
 800a074:	9a04      	ldr	r2, [sp, #16]
 800a076:	7013      	strb	r3, [r2, #0]
 800a078:	e776      	b.n	8009f68 <_dtoa_r+0x968>
 800a07a:	4630      	mov	r0, r6
 800a07c:	e7b9      	b.n	8009ff2 <_dtoa_r+0x9f2>
 800a07e:	2201      	movs	r2, #1
 800a080:	e7e2      	b.n	800a048 <_dtoa_r+0xa48>
 800a082:	f1b9 0f00 	cmp.w	r9, #0
 800a086:	db06      	blt.n	800a096 <_dtoa_r+0xa96>
 800a088:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a08a:	ea41 0909 	orr.w	r9, r1, r9
 800a08e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a090:	ea59 0101 	orrs.w	r1, r9, r1
 800a094:	d120      	bne.n	800a0d8 <_dtoa_r+0xad8>
 800a096:	2a00      	cmp	r2, #0
 800a098:	ddec      	ble.n	800a074 <_dtoa_r+0xa74>
 800a09a:	4659      	mov	r1, fp
 800a09c:	2201      	movs	r2, #1
 800a09e:	4628      	mov	r0, r5
 800a0a0:	9308      	str	r3, [sp, #32]
 800a0a2:	f000 fe93 	bl	800adcc <__lshift>
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4683      	mov	fp, r0
 800a0aa:	f000 feff 	bl	800aeac <__mcmp>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	9b08      	ldr	r3, [sp, #32]
 800a0b2:	dc02      	bgt.n	800a0ba <_dtoa_r+0xaba>
 800a0b4:	d1de      	bne.n	800a074 <_dtoa_r+0xa74>
 800a0b6:	07da      	lsls	r2, r3, #31
 800a0b8:	d5dc      	bpl.n	800a074 <_dtoa_r+0xa74>
 800a0ba:	2b39      	cmp	r3, #57	; 0x39
 800a0bc:	d1d8      	bne.n	800a070 <_dtoa_r+0xa70>
 800a0be:	2339      	movs	r3, #57	; 0x39
 800a0c0:	9a04      	ldr	r2, [sp, #16]
 800a0c2:	7013      	strb	r3, [r2, #0]
 800a0c4:	463b      	mov	r3, r7
 800a0c6:	461f      	mov	r7, r3
 800a0c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	2a39      	cmp	r2, #57	; 0x39
 800a0d0:	d050      	beq.n	800a174 <_dtoa_r+0xb74>
 800a0d2:	3201      	adds	r2, #1
 800a0d4:	701a      	strb	r2, [r3, #0]
 800a0d6:	e747      	b.n	8009f68 <_dtoa_r+0x968>
 800a0d8:	2a00      	cmp	r2, #0
 800a0da:	dd03      	ble.n	800a0e4 <_dtoa_r+0xae4>
 800a0dc:	2b39      	cmp	r3, #57	; 0x39
 800a0de:	d0ee      	beq.n	800a0be <_dtoa_r+0xabe>
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	e7c7      	b.n	800a074 <_dtoa_r+0xa74>
 800a0e4:	9a08      	ldr	r2, [sp, #32]
 800a0e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a0e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a0ec:	428a      	cmp	r2, r1
 800a0ee:	d02a      	beq.n	800a146 <_dtoa_r+0xb46>
 800a0f0:	4659      	mov	r1, fp
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f000 fc72 	bl	800a9e0 <__multadd>
 800a0fc:	45b0      	cmp	r8, r6
 800a0fe:	4683      	mov	fp, r0
 800a100:	f04f 0300 	mov.w	r3, #0
 800a104:	f04f 020a 	mov.w	r2, #10
 800a108:	4641      	mov	r1, r8
 800a10a:	4628      	mov	r0, r5
 800a10c:	d107      	bne.n	800a11e <_dtoa_r+0xb1e>
 800a10e:	f000 fc67 	bl	800a9e0 <__multadd>
 800a112:	4680      	mov	r8, r0
 800a114:	4606      	mov	r6, r0
 800a116:	9b08      	ldr	r3, [sp, #32]
 800a118:	3301      	adds	r3, #1
 800a11a:	9308      	str	r3, [sp, #32]
 800a11c:	e775      	b.n	800a00a <_dtoa_r+0xa0a>
 800a11e:	f000 fc5f 	bl	800a9e0 <__multadd>
 800a122:	4631      	mov	r1, r6
 800a124:	4680      	mov	r8, r0
 800a126:	2300      	movs	r3, #0
 800a128:	220a      	movs	r2, #10
 800a12a:	4628      	mov	r0, r5
 800a12c:	f000 fc58 	bl	800a9e0 <__multadd>
 800a130:	4606      	mov	r6, r0
 800a132:	e7f0      	b.n	800a116 <_dtoa_r+0xb16>
 800a134:	f1b9 0f00 	cmp.w	r9, #0
 800a138:	bfcc      	ite	gt
 800a13a:	464f      	movgt	r7, r9
 800a13c:	2701      	movle	r7, #1
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	9a03      	ldr	r2, [sp, #12]
 800a144:	4417      	add	r7, r2
 800a146:	4659      	mov	r1, fp
 800a148:	2201      	movs	r2, #1
 800a14a:	4628      	mov	r0, r5
 800a14c:	9308      	str	r3, [sp, #32]
 800a14e:	f000 fe3d 	bl	800adcc <__lshift>
 800a152:	4621      	mov	r1, r4
 800a154:	4683      	mov	fp, r0
 800a156:	f000 fea9 	bl	800aeac <__mcmp>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	dcb2      	bgt.n	800a0c4 <_dtoa_r+0xac4>
 800a15e:	d102      	bne.n	800a166 <_dtoa_r+0xb66>
 800a160:	9b08      	ldr	r3, [sp, #32]
 800a162:	07db      	lsls	r3, r3, #31
 800a164:	d4ae      	bmi.n	800a0c4 <_dtoa_r+0xac4>
 800a166:	463b      	mov	r3, r7
 800a168:	461f      	mov	r7, r3
 800a16a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a16e:	2a30      	cmp	r2, #48	; 0x30
 800a170:	d0fa      	beq.n	800a168 <_dtoa_r+0xb68>
 800a172:	e6f9      	b.n	8009f68 <_dtoa_r+0x968>
 800a174:	9a03      	ldr	r2, [sp, #12]
 800a176:	429a      	cmp	r2, r3
 800a178:	d1a5      	bne.n	800a0c6 <_dtoa_r+0xac6>
 800a17a:	2331      	movs	r3, #49	; 0x31
 800a17c:	f10a 0a01 	add.w	sl, sl, #1
 800a180:	e779      	b.n	800a076 <_dtoa_r+0xa76>
 800a182:	4b14      	ldr	r3, [pc, #80]	; (800a1d4 <_dtoa_r+0xbd4>)
 800a184:	f7ff baa8 	b.w	80096d8 <_dtoa_r+0xd8>
 800a188:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f47f aa81 	bne.w	8009692 <_dtoa_r+0x92>
 800a190:	4b11      	ldr	r3, [pc, #68]	; (800a1d8 <_dtoa_r+0xbd8>)
 800a192:	f7ff baa1 	b.w	80096d8 <_dtoa_r+0xd8>
 800a196:	f1b9 0f00 	cmp.w	r9, #0
 800a19a:	dc03      	bgt.n	800a1a4 <_dtoa_r+0xba4>
 800a19c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	f73f aecb 	bgt.w	8009f3a <_dtoa_r+0x93a>
 800a1a4:	9f03      	ldr	r7, [sp, #12]
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4658      	mov	r0, fp
 800a1aa:	f7ff f99d 	bl	80094e8 <quorem>
 800a1ae:	9a03      	ldr	r2, [sp, #12]
 800a1b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a1b4:	f807 3b01 	strb.w	r3, [r7], #1
 800a1b8:	1aba      	subs	r2, r7, r2
 800a1ba:	4591      	cmp	r9, r2
 800a1bc:	ddba      	ble.n	800a134 <_dtoa_r+0xb34>
 800a1be:	4659      	mov	r1, fp
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	220a      	movs	r2, #10
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f000 fc0b 	bl	800a9e0 <__multadd>
 800a1ca:	4683      	mov	fp, r0
 800a1cc:	e7eb      	b.n	800a1a6 <_dtoa_r+0xba6>
 800a1ce:	bf00      	nop
 800a1d0:	0800c4a7 	.word	0x0800c4a7
 800a1d4:	0800c3b0 	.word	0x0800c3b0
 800a1d8:	0800c428 	.word	0x0800c428

0800a1dc <rshift>:
 800a1dc:	6903      	ldr	r3, [r0, #16]
 800a1de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1e6:	f100 0414 	add.w	r4, r0, #20
 800a1ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1ee:	dd46      	ble.n	800a27e <rshift+0xa2>
 800a1f0:	f011 011f 	ands.w	r1, r1, #31
 800a1f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1fc:	d10c      	bne.n	800a218 <rshift+0x3c>
 800a1fe:	4629      	mov	r1, r5
 800a200:	f100 0710 	add.w	r7, r0, #16
 800a204:	42b1      	cmp	r1, r6
 800a206:	d335      	bcc.n	800a274 <rshift+0x98>
 800a208:	1a9b      	subs	r3, r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	1eea      	subs	r2, r5, #3
 800a20e:	4296      	cmp	r6, r2
 800a210:	bf38      	it	cc
 800a212:	2300      	movcc	r3, #0
 800a214:	4423      	add	r3, r4
 800a216:	e015      	b.n	800a244 <rshift+0x68>
 800a218:	46a1      	mov	r9, r4
 800a21a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a21e:	f1c1 0820 	rsb	r8, r1, #32
 800a222:	40cf      	lsrs	r7, r1
 800a224:	f105 0e04 	add.w	lr, r5, #4
 800a228:	4576      	cmp	r6, lr
 800a22a:	46f4      	mov	ip, lr
 800a22c:	d816      	bhi.n	800a25c <rshift+0x80>
 800a22e:	1a9a      	subs	r2, r3, r2
 800a230:	0092      	lsls	r2, r2, #2
 800a232:	3a04      	subs	r2, #4
 800a234:	3501      	adds	r5, #1
 800a236:	42ae      	cmp	r6, r5
 800a238:	bf38      	it	cc
 800a23a:	2200      	movcc	r2, #0
 800a23c:	18a3      	adds	r3, r4, r2
 800a23e:	50a7      	str	r7, [r4, r2]
 800a240:	b107      	cbz	r7, 800a244 <rshift+0x68>
 800a242:	3304      	adds	r3, #4
 800a244:	42a3      	cmp	r3, r4
 800a246:	eba3 0204 	sub.w	r2, r3, r4
 800a24a:	bf08      	it	eq
 800a24c:	2300      	moveq	r3, #0
 800a24e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a252:	6102      	str	r2, [r0, #16]
 800a254:	bf08      	it	eq
 800a256:	6143      	streq	r3, [r0, #20]
 800a258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a25c:	f8dc c000 	ldr.w	ip, [ip]
 800a260:	fa0c fc08 	lsl.w	ip, ip, r8
 800a264:	ea4c 0707 	orr.w	r7, ip, r7
 800a268:	f849 7b04 	str.w	r7, [r9], #4
 800a26c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a270:	40cf      	lsrs	r7, r1
 800a272:	e7d9      	b.n	800a228 <rshift+0x4c>
 800a274:	f851 cb04 	ldr.w	ip, [r1], #4
 800a278:	f847 cf04 	str.w	ip, [r7, #4]!
 800a27c:	e7c2      	b.n	800a204 <rshift+0x28>
 800a27e:	4623      	mov	r3, r4
 800a280:	e7e0      	b.n	800a244 <rshift+0x68>

0800a282 <__hexdig_fun>:
 800a282:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a286:	2b09      	cmp	r3, #9
 800a288:	d802      	bhi.n	800a290 <__hexdig_fun+0xe>
 800a28a:	3820      	subs	r0, #32
 800a28c:	b2c0      	uxtb	r0, r0
 800a28e:	4770      	bx	lr
 800a290:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a294:	2b05      	cmp	r3, #5
 800a296:	d801      	bhi.n	800a29c <__hexdig_fun+0x1a>
 800a298:	3847      	subs	r0, #71	; 0x47
 800a29a:	e7f7      	b.n	800a28c <__hexdig_fun+0xa>
 800a29c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a2a0:	2b05      	cmp	r3, #5
 800a2a2:	d801      	bhi.n	800a2a8 <__hexdig_fun+0x26>
 800a2a4:	3827      	subs	r0, #39	; 0x27
 800a2a6:	e7f1      	b.n	800a28c <__hexdig_fun+0xa>
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	4770      	bx	lr

0800a2ac <__gethex>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	b08b      	sub	sp, #44	; 0x2c
 800a2b2:	9305      	str	r3, [sp, #20]
 800a2b4:	4bb2      	ldr	r3, [pc, #712]	; (800a580 <__gethex+0x2d4>)
 800a2b6:	9002      	str	r0, [sp, #8]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	468b      	mov	fp, r1
 800a2bc:	4618      	mov	r0, r3
 800a2be:	4690      	mov	r8, r2
 800a2c0:	9303      	str	r3, [sp, #12]
 800a2c2:	f7f5 ff45 	bl	8000150 <strlen>
 800a2c6:	4682      	mov	sl, r0
 800a2c8:	9b03      	ldr	r3, [sp, #12]
 800a2ca:	f8db 2000 	ldr.w	r2, [fp]
 800a2ce:	4403      	add	r3, r0
 800a2d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a2d4:	9306      	str	r3, [sp, #24]
 800a2d6:	1c93      	adds	r3, r2, #2
 800a2d8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a2dc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a2e0:	32fe      	adds	r2, #254	; 0xfe
 800a2e2:	18d1      	adds	r1, r2, r3
 800a2e4:	461f      	mov	r7, r3
 800a2e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a2ea:	9101      	str	r1, [sp, #4]
 800a2ec:	2830      	cmp	r0, #48	; 0x30
 800a2ee:	d0f8      	beq.n	800a2e2 <__gethex+0x36>
 800a2f0:	f7ff ffc7 	bl	800a282 <__hexdig_fun>
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d13a      	bne.n	800a370 <__gethex+0xc4>
 800a2fa:	4652      	mov	r2, sl
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	9903      	ldr	r1, [sp, #12]
 800a300:	f001 fa26 	bl	800b750 <strncmp>
 800a304:	4605      	mov	r5, r0
 800a306:	2800      	cmp	r0, #0
 800a308:	d166      	bne.n	800a3d8 <__gethex+0x12c>
 800a30a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a30e:	eb07 060a 	add.w	r6, r7, sl
 800a312:	f7ff ffb6 	bl	800a282 <__hexdig_fun>
 800a316:	2800      	cmp	r0, #0
 800a318:	d060      	beq.n	800a3dc <__gethex+0x130>
 800a31a:	4633      	mov	r3, r6
 800a31c:	7818      	ldrb	r0, [r3, #0]
 800a31e:	461f      	mov	r7, r3
 800a320:	2830      	cmp	r0, #48	; 0x30
 800a322:	f103 0301 	add.w	r3, r3, #1
 800a326:	d0f9      	beq.n	800a31c <__gethex+0x70>
 800a328:	f7ff ffab 	bl	800a282 <__hexdig_fun>
 800a32c:	2301      	movs	r3, #1
 800a32e:	fab0 f480 	clz	r4, r0
 800a332:	4635      	mov	r5, r6
 800a334:	0964      	lsrs	r4, r4, #5
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	463a      	mov	r2, r7
 800a33a:	4616      	mov	r6, r2
 800a33c:	7830      	ldrb	r0, [r6, #0]
 800a33e:	3201      	adds	r2, #1
 800a340:	f7ff ff9f 	bl	800a282 <__hexdig_fun>
 800a344:	2800      	cmp	r0, #0
 800a346:	d1f8      	bne.n	800a33a <__gethex+0x8e>
 800a348:	4652      	mov	r2, sl
 800a34a:	4630      	mov	r0, r6
 800a34c:	9903      	ldr	r1, [sp, #12]
 800a34e:	f001 f9ff 	bl	800b750 <strncmp>
 800a352:	b980      	cbnz	r0, 800a376 <__gethex+0xca>
 800a354:	b94d      	cbnz	r5, 800a36a <__gethex+0xbe>
 800a356:	eb06 050a 	add.w	r5, r6, sl
 800a35a:	462a      	mov	r2, r5
 800a35c:	4616      	mov	r6, r2
 800a35e:	7830      	ldrb	r0, [r6, #0]
 800a360:	3201      	adds	r2, #1
 800a362:	f7ff ff8e 	bl	800a282 <__hexdig_fun>
 800a366:	2800      	cmp	r0, #0
 800a368:	d1f8      	bne.n	800a35c <__gethex+0xb0>
 800a36a:	1bad      	subs	r5, r5, r6
 800a36c:	00ad      	lsls	r5, r5, #2
 800a36e:	e004      	b.n	800a37a <__gethex+0xce>
 800a370:	2400      	movs	r4, #0
 800a372:	4625      	mov	r5, r4
 800a374:	e7e0      	b.n	800a338 <__gethex+0x8c>
 800a376:	2d00      	cmp	r5, #0
 800a378:	d1f7      	bne.n	800a36a <__gethex+0xbe>
 800a37a:	7833      	ldrb	r3, [r6, #0]
 800a37c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a380:	2b50      	cmp	r3, #80	; 0x50
 800a382:	d139      	bne.n	800a3f8 <__gethex+0x14c>
 800a384:	7873      	ldrb	r3, [r6, #1]
 800a386:	2b2b      	cmp	r3, #43	; 0x2b
 800a388:	d02a      	beq.n	800a3e0 <__gethex+0x134>
 800a38a:	2b2d      	cmp	r3, #45	; 0x2d
 800a38c:	d02c      	beq.n	800a3e8 <__gethex+0x13c>
 800a38e:	f04f 0900 	mov.w	r9, #0
 800a392:	1c71      	adds	r1, r6, #1
 800a394:	7808      	ldrb	r0, [r1, #0]
 800a396:	f7ff ff74 	bl	800a282 <__hexdig_fun>
 800a39a:	1e43      	subs	r3, r0, #1
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b18      	cmp	r3, #24
 800a3a0:	d82a      	bhi.n	800a3f8 <__gethex+0x14c>
 800a3a2:	f1a0 0210 	sub.w	r2, r0, #16
 800a3a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a3aa:	f7ff ff6a 	bl	800a282 <__hexdig_fun>
 800a3ae:	1e43      	subs	r3, r0, #1
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b18      	cmp	r3, #24
 800a3b4:	d91b      	bls.n	800a3ee <__gethex+0x142>
 800a3b6:	f1b9 0f00 	cmp.w	r9, #0
 800a3ba:	d000      	beq.n	800a3be <__gethex+0x112>
 800a3bc:	4252      	negs	r2, r2
 800a3be:	4415      	add	r5, r2
 800a3c0:	f8cb 1000 	str.w	r1, [fp]
 800a3c4:	b1d4      	cbz	r4, 800a3fc <__gethex+0x150>
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	bf14      	ite	ne
 800a3cc:	2700      	movne	r7, #0
 800a3ce:	2706      	moveq	r7, #6
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	b00b      	add	sp, #44	; 0x2c
 800a3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d8:	463e      	mov	r6, r7
 800a3da:	4625      	mov	r5, r4
 800a3dc:	2401      	movs	r4, #1
 800a3de:	e7cc      	b.n	800a37a <__gethex+0xce>
 800a3e0:	f04f 0900 	mov.w	r9, #0
 800a3e4:	1cb1      	adds	r1, r6, #2
 800a3e6:	e7d5      	b.n	800a394 <__gethex+0xe8>
 800a3e8:	f04f 0901 	mov.w	r9, #1
 800a3ec:	e7fa      	b.n	800a3e4 <__gethex+0x138>
 800a3ee:	230a      	movs	r3, #10
 800a3f0:	fb03 0202 	mla	r2, r3, r2, r0
 800a3f4:	3a10      	subs	r2, #16
 800a3f6:	e7d6      	b.n	800a3a6 <__gethex+0xfa>
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	e7e1      	b.n	800a3c0 <__gethex+0x114>
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	1bf3      	subs	r3, r6, r7
 800a400:	3b01      	subs	r3, #1
 800a402:	2b07      	cmp	r3, #7
 800a404:	dc0a      	bgt.n	800a41c <__gethex+0x170>
 800a406:	9802      	ldr	r0, [sp, #8]
 800a408:	f000 fa88 	bl	800a91c <_Balloc>
 800a40c:	4604      	mov	r4, r0
 800a40e:	b940      	cbnz	r0, 800a422 <__gethex+0x176>
 800a410:	4602      	mov	r2, r0
 800a412:	21de      	movs	r1, #222	; 0xde
 800a414:	4b5b      	ldr	r3, [pc, #364]	; (800a584 <__gethex+0x2d8>)
 800a416:	485c      	ldr	r0, [pc, #368]	; (800a588 <__gethex+0x2dc>)
 800a418:	f001 f9bc 	bl	800b794 <__assert_func>
 800a41c:	3101      	adds	r1, #1
 800a41e:	105b      	asrs	r3, r3, #1
 800a420:	e7ef      	b.n	800a402 <__gethex+0x156>
 800a422:	f04f 0b00 	mov.w	fp, #0
 800a426:	f100 0914 	add.w	r9, r0, #20
 800a42a:	f1ca 0301 	rsb	r3, sl, #1
 800a42e:	f8cd 9010 	str.w	r9, [sp, #16]
 800a432:	f8cd b004 	str.w	fp, [sp, #4]
 800a436:	9308      	str	r3, [sp, #32]
 800a438:	42b7      	cmp	r7, r6
 800a43a:	d33f      	bcc.n	800a4bc <__gethex+0x210>
 800a43c:	9f04      	ldr	r7, [sp, #16]
 800a43e:	9b01      	ldr	r3, [sp, #4]
 800a440:	f847 3b04 	str.w	r3, [r7], #4
 800a444:	eba7 0709 	sub.w	r7, r7, r9
 800a448:	10bf      	asrs	r7, r7, #2
 800a44a:	6127      	str	r7, [r4, #16]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fb57 	bl	800ab00 <__hi0bits>
 800a452:	017f      	lsls	r7, r7, #5
 800a454:	f8d8 6000 	ldr.w	r6, [r8]
 800a458:	1a3f      	subs	r7, r7, r0
 800a45a:	42b7      	cmp	r7, r6
 800a45c:	dd62      	ble.n	800a524 <__gethex+0x278>
 800a45e:	1bbf      	subs	r7, r7, r6
 800a460:	4639      	mov	r1, r7
 800a462:	4620      	mov	r0, r4
 800a464:	f000 fef1 	bl	800b24a <__any_on>
 800a468:	4682      	mov	sl, r0
 800a46a:	b1a8      	cbz	r0, 800a498 <__gethex+0x1ec>
 800a46c:	f04f 0a01 	mov.w	sl, #1
 800a470:	1e7b      	subs	r3, r7, #1
 800a472:	1159      	asrs	r1, r3, #5
 800a474:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a478:	f003 021f 	and.w	r2, r3, #31
 800a47c:	fa0a f202 	lsl.w	r2, sl, r2
 800a480:	420a      	tst	r2, r1
 800a482:	d009      	beq.n	800a498 <__gethex+0x1ec>
 800a484:	4553      	cmp	r3, sl
 800a486:	dd05      	ble.n	800a494 <__gethex+0x1e8>
 800a488:	4620      	mov	r0, r4
 800a48a:	1eb9      	subs	r1, r7, #2
 800a48c:	f000 fedd 	bl	800b24a <__any_on>
 800a490:	2800      	cmp	r0, #0
 800a492:	d144      	bne.n	800a51e <__gethex+0x272>
 800a494:	f04f 0a02 	mov.w	sl, #2
 800a498:	4639      	mov	r1, r7
 800a49a:	4620      	mov	r0, r4
 800a49c:	f7ff fe9e 	bl	800a1dc <rshift>
 800a4a0:	443d      	add	r5, r7
 800a4a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4a6:	42ab      	cmp	r3, r5
 800a4a8:	da4a      	bge.n	800a540 <__gethex+0x294>
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	9802      	ldr	r0, [sp, #8]
 800a4ae:	f000 fa75 	bl	800a99c <_Bfree>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a4b6:	27a3      	movs	r7, #163	; 0xa3
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	e789      	b.n	800a3d0 <__gethex+0x124>
 800a4bc:	1e73      	subs	r3, r6, #1
 800a4be:	9a06      	ldr	r2, [sp, #24]
 800a4c0:	9307      	str	r3, [sp, #28]
 800a4c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d019      	beq.n	800a4fe <__gethex+0x252>
 800a4ca:	f1bb 0f20 	cmp.w	fp, #32
 800a4ce:	d107      	bne.n	800a4e0 <__gethex+0x234>
 800a4d0:	9b04      	ldr	r3, [sp, #16]
 800a4d2:	9a01      	ldr	r2, [sp, #4]
 800a4d4:	f843 2b04 	str.w	r2, [r3], #4
 800a4d8:	9304      	str	r3, [sp, #16]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	469b      	mov	fp, r3
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a4e4:	f7ff fecd 	bl	800a282 <__hexdig_fun>
 800a4e8:	9b01      	ldr	r3, [sp, #4]
 800a4ea:	f000 000f 	and.w	r0, r0, #15
 800a4ee:	fa00 f00b 	lsl.w	r0, r0, fp
 800a4f2:	4303      	orrs	r3, r0
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	f10b 0b04 	add.w	fp, fp, #4
 800a4fa:	9b07      	ldr	r3, [sp, #28]
 800a4fc:	e00d      	b.n	800a51a <__gethex+0x26e>
 800a4fe:	9a08      	ldr	r2, [sp, #32]
 800a500:	1e73      	subs	r3, r6, #1
 800a502:	4413      	add	r3, r2
 800a504:	42bb      	cmp	r3, r7
 800a506:	d3e0      	bcc.n	800a4ca <__gethex+0x21e>
 800a508:	4618      	mov	r0, r3
 800a50a:	4652      	mov	r2, sl
 800a50c:	9903      	ldr	r1, [sp, #12]
 800a50e:	9309      	str	r3, [sp, #36]	; 0x24
 800a510:	f001 f91e 	bl	800b750 <strncmp>
 800a514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a516:	2800      	cmp	r0, #0
 800a518:	d1d7      	bne.n	800a4ca <__gethex+0x21e>
 800a51a:	461e      	mov	r6, r3
 800a51c:	e78c      	b.n	800a438 <__gethex+0x18c>
 800a51e:	f04f 0a03 	mov.w	sl, #3
 800a522:	e7b9      	b.n	800a498 <__gethex+0x1ec>
 800a524:	da09      	bge.n	800a53a <__gethex+0x28e>
 800a526:	1bf7      	subs	r7, r6, r7
 800a528:	4621      	mov	r1, r4
 800a52a:	463a      	mov	r2, r7
 800a52c:	9802      	ldr	r0, [sp, #8]
 800a52e:	f000 fc4d 	bl	800adcc <__lshift>
 800a532:	4604      	mov	r4, r0
 800a534:	1bed      	subs	r5, r5, r7
 800a536:	f100 0914 	add.w	r9, r0, #20
 800a53a:	f04f 0a00 	mov.w	sl, #0
 800a53e:	e7b0      	b.n	800a4a2 <__gethex+0x1f6>
 800a540:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a544:	42a8      	cmp	r0, r5
 800a546:	dd72      	ble.n	800a62e <__gethex+0x382>
 800a548:	1b45      	subs	r5, r0, r5
 800a54a:	42ae      	cmp	r6, r5
 800a54c:	dc35      	bgt.n	800a5ba <__gethex+0x30e>
 800a54e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a552:	2b02      	cmp	r3, #2
 800a554:	d029      	beq.n	800a5aa <__gethex+0x2fe>
 800a556:	2b03      	cmp	r3, #3
 800a558:	d02b      	beq.n	800a5b2 <__gethex+0x306>
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d11c      	bne.n	800a598 <__gethex+0x2ec>
 800a55e:	42ae      	cmp	r6, r5
 800a560:	d11a      	bne.n	800a598 <__gethex+0x2ec>
 800a562:	2e01      	cmp	r6, #1
 800a564:	d112      	bne.n	800a58c <__gethex+0x2e0>
 800a566:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a56a:	9a05      	ldr	r2, [sp, #20]
 800a56c:	2762      	movs	r7, #98	; 0x62
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	2301      	movs	r3, #1
 800a572:	6123      	str	r3, [r4, #16]
 800a574:	f8c9 3000 	str.w	r3, [r9]
 800a578:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a57a:	601c      	str	r4, [r3, #0]
 800a57c:	e728      	b.n	800a3d0 <__gethex+0x124>
 800a57e:	bf00      	nop
 800a580:	0800c520 	.word	0x0800c520
 800a584:	0800c4a7 	.word	0x0800c4a7
 800a588:	0800c4b8 	.word	0x0800c4b8
 800a58c:	4620      	mov	r0, r4
 800a58e:	1e71      	subs	r1, r6, #1
 800a590:	f000 fe5b 	bl	800b24a <__any_on>
 800a594:	2800      	cmp	r0, #0
 800a596:	d1e6      	bne.n	800a566 <__gethex+0x2ba>
 800a598:	4621      	mov	r1, r4
 800a59a:	9802      	ldr	r0, [sp, #8]
 800a59c:	f000 f9fe 	bl	800a99c <_Bfree>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5a4:	2750      	movs	r7, #80	; 0x50
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	e712      	b.n	800a3d0 <__gethex+0x124>
 800a5aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1f3      	bne.n	800a598 <__gethex+0x2ec>
 800a5b0:	e7d9      	b.n	800a566 <__gethex+0x2ba>
 800a5b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1d6      	bne.n	800a566 <__gethex+0x2ba>
 800a5b8:	e7ee      	b.n	800a598 <__gethex+0x2ec>
 800a5ba:	1e6f      	subs	r7, r5, #1
 800a5bc:	f1ba 0f00 	cmp.w	sl, #0
 800a5c0:	d132      	bne.n	800a628 <__gethex+0x37c>
 800a5c2:	b127      	cbz	r7, 800a5ce <__gethex+0x322>
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 fe3f 	bl	800b24a <__any_on>
 800a5cc:	4682      	mov	sl, r0
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	117b      	asrs	r3, r7, #5
 800a5d2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a5d6:	f007 071f 	and.w	r7, r7, #31
 800a5da:	fa01 f707 	lsl.w	r7, r1, r7
 800a5de:	421f      	tst	r7, r3
 800a5e0:	f04f 0702 	mov.w	r7, #2
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	bf18      	it	ne
 800a5ea:	f04a 0a02 	orrne.w	sl, sl, #2
 800a5ee:	1b76      	subs	r6, r6, r5
 800a5f0:	f7ff fdf4 	bl	800a1dc <rshift>
 800a5f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5f8:	f1ba 0f00 	cmp.w	sl, #0
 800a5fc:	d048      	beq.n	800a690 <__gethex+0x3e4>
 800a5fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a602:	2b02      	cmp	r3, #2
 800a604:	d015      	beq.n	800a632 <__gethex+0x386>
 800a606:	2b03      	cmp	r3, #3
 800a608:	d017      	beq.n	800a63a <__gethex+0x38e>
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d109      	bne.n	800a622 <__gethex+0x376>
 800a60e:	f01a 0f02 	tst.w	sl, #2
 800a612:	d006      	beq.n	800a622 <__gethex+0x376>
 800a614:	f8d9 0000 	ldr.w	r0, [r9]
 800a618:	ea4a 0a00 	orr.w	sl, sl, r0
 800a61c:	f01a 0f01 	tst.w	sl, #1
 800a620:	d10e      	bne.n	800a640 <__gethex+0x394>
 800a622:	f047 0710 	orr.w	r7, r7, #16
 800a626:	e033      	b.n	800a690 <__gethex+0x3e4>
 800a628:	f04f 0a01 	mov.w	sl, #1
 800a62c:	e7cf      	b.n	800a5ce <__gethex+0x322>
 800a62e:	2701      	movs	r7, #1
 800a630:	e7e2      	b.n	800a5f8 <__gethex+0x34c>
 800a632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a634:	f1c3 0301 	rsb	r3, r3, #1
 800a638:	9315      	str	r3, [sp, #84]	; 0x54
 800a63a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d0f0      	beq.n	800a622 <__gethex+0x376>
 800a640:	f04f 0c00 	mov.w	ip, #0
 800a644:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a648:	f104 0314 	add.w	r3, r4, #20
 800a64c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a650:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a654:	4618      	mov	r0, r3
 800a656:	f853 2b04 	ldr.w	r2, [r3], #4
 800a65a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a65e:	d01c      	beq.n	800a69a <__gethex+0x3ee>
 800a660:	3201      	adds	r2, #1
 800a662:	6002      	str	r2, [r0, #0]
 800a664:	2f02      	cmp	r7, #2
 800a666:	f104 0314 	add.w	r3, r4, #20
 800a66a:	d13d      	bne.n	800a6e8 <__gethex+0x43c>
 800a66c:	f8d8 2000 	ldr.w	r2, [r8]
 800a670:	3a01      	subs	r2, #1
 800a672:	42b2      	cmp	r2, r6
 800a674:	d10a      	bne.n	800a68c <__gethex+0x3e0>
 800a676:	2201      	movs	r2, #1
 800a678:	1171      	asrs	r1, r6, #5
 800a67a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a67e:	f006 061f 	and.w	r6, r6, #31
 800a682:	fa02 f606 	lsl.w	r6, r2, r6
 800a686:	421e      	tst	r6, r3
 800a688:	bf18      	it	ne
 800a68a:	4617      	movne	r7, r2
 800a68c:	f047 0720 	orr.w	r7, r7, #32
 800a690:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a692:	601c      	str	r4, [r3, #0]
 800a694:	9b05      	ldr	r3, [sp, #20]
 800a696:	601d      	str	r5, [r3, #0]
 800a698:	e69a      	b.n	800a3d0 <__gethex+0x124>
 800a69a:	4299      	cmp	r1, r3
 800a69c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a6a0:	d8d8      	bhi.n	800a654 <__gethex+0x3a8>
 800a6a2:	68a3      	ldr	r3, [r4, #8]
 800a6a4:	459b      	cmp	fp, r3
 800a6a6:	db17      	blt.n	800a6d8 <__gethex+0x42c>
 800a6a8:	6861      	ldr	r1, [r4, #4]
 800a6aa:	9802      	ldr	r0, [sp, #8]
 800a6ac:	3101      	adds	r1, #1
 800a6ae:	f000 f935 	bl	800a91c <_Balloc>
 800a6b2:	4681      	mov	r9, r0
 800a6b4:	b918      	cbnz	r0, 800a6be <__gethex+0x412>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	2184      	movs	r1, #132	; 0x84
 800a6ba:	4b19      	ldr	r3, [pc, #100]	; (800a720 <__gethex+0x474>)
 800a6bc:	e6ab      	b.n	800a416 <__gethex+0x16a>
 800a6be:	6922      	ldr	r2, [r4, #16]
 800a6c0:	f104 010c 	add.w	r1, r4, #12
 800a6c4:	3202      	adds	r2, #2
 800a6c6:	0092      	lsls	r2, r2, #2
 800a6c8:	300c      	adds	r0, #12
 800a6ca:	f000 f919 	bl	800a900 <memcpy>
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	9802      	ldr	r0, [sp, #8]
 800a6d2:	f000 f963 	bl	800a99c <_Bfree>
 800a6d6:	464c      	mov	r4, r9
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	1c5a      	adds	r2, r3, #1
 800a6dc:	6122      	str	r2, [r4, #16]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6e4:	615a      	str	r2, [r3, #20]
 800a6e6:	e7bd      	b.n	800a664 <__gethex+0x3b8>
 800a6e8:	6922      	ldr	r2, [r4, #16]
 800a6ea:	455a      	cmp	r2, fp
 800a6ec:	dd0b      	ble.n	800a706 <__gethex+0x45a>
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f7ff fd73 	bl	800a1dc <rshift>
 800a6f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6fa:	3501      	adds	r5, #1
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	f6ff aed4 	blt.w	800a4aa <__gethex+0x1fe>
 800a702:	2701      	movs	r7, #1
 800a704:	e7c2      	b.n	800a68c <__gethex+0x3e0>
 800a706:	f016 061f 	ands.w	r6, r6, #31
 800a70a:	d0fa      	beq.n	800a702 <__gethex+0x456>
 800a70c:	4453      	add	r3, sl
 800a70e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a712:	f000 f9f5 	bl	800ab00 <__hi0bits>
 800a716:	f1c6 0620 	rsb	r6, r6, #32
 800a71a:	42b0      	cmp	r0, r6
 800a71c:	dbe7      	blt.n	800a6ee <__gethex+0x442>
 800a71e:	e7f0      	b.n	800a702 <__gethex+0x456>
 800a720:	0800c4a7 	.word	0x0800c4a7

0800a724 <L_shift>:
 800a724:	f1c2 0208 	rsb	r2, r2, #8
 800a728:	0092      	lsls	r2, r2, #2
 800a72a:	b570      	push	{r4, r5, r6, lr}
 800a72c:	f1c2 0620 	rsb	r6, r2, #32
 800a730:	6843      	ldr	r3, [r0, #4]
 800a732:	6804      	ldr	r4, [r0, #0]
 800a734:	fa03 f506 	lsl.w	r5, r3, r6
 800a738:	432c      	orrs	r4, r5
 800a73a:	40d3      	lsrs	r3, r2
 800a73c:	6004      	str	r4, [r0, #0]
 800a73e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a742:	4288      	cmp	r0, r1
 800a744:	d3f4      	bcc.n	800a730 <L_shift+0xc>
 800a746:	bd70      	pop	{r4, r5, r6, pc}

0800a748 <__match>:
 800a748:	b530      	push	{r4, r5, lr}
 800a74a:	6803      	ldr	r3, [r0, #0]
 800a74c:	3301      	adds	r3, #1
 800a74e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a752:	b914      	cbnz	r4, 800a75a <__match+0x12>
 800a754:	6003      	str	r3, [r0, #0]
 800a756:	2001      	movs	r0, #1
 800a758:	bd30      	pop	{r4, r5, pc}
 800a75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a762:	2d19      	cmp	r5, #25
 800a764:	bf98      	it	ls
 800a766:	3220      	addls	r2, #32
 800a768:	42a2      	cmp	r2, r4
 800a76a:	d0f0      	beq.n	800a74e <__match+0x6>
 800a76c:	2000      	movs	r0, #0
 800a76e:	e7f3      	b.n	800a758 <__match+0x10>

0800a770 <__hexnan>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	2500      	movs	r5, #0
 800a776:	680b      	ldr	r3, [r1, #0]
 800a778:	4682      	mov	sl, r0
 800a77a:	115e      	asrs	r6, r3, #5
 800a77c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a780:	f013 031f 	ands.w	r3, r3, #31
 800a784:	bf18      	it	ne
 800a786:	3604      	addne	r6, #4
 800a788:	1f37      	subs	r7, r6, #4
 800a78a:	46b9      	mov	r9, r7
 800a78c:	463c      	mov	r4, r7
 800a78e:	46ab      	mov	fp, r5
 800a790:	b087      	sub	sp, #28
 800a792:	4690      	mov	r8, r2
 800a794:	6802      	ldr	r2, [r0, #0]
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	f846 5c04 	str.w	r5, [r6, #-4]
 800a79c:	9502      	str	r5, [sp, #8]
 800a79e:	7851      	ldrb	r1, [r2, #1]
 800a7a0:	1c53      	adds	r3, r2, #1
 800a7a2:	9303      	str	r3, [sp, #12]
 800a7a4:	b341      	cbz	r1, 800a7f8 <__hexnan+0x88>
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	9205      	str	r2, [sp, #20]
 800a7aa:	9104      	str	r1, [sp, #16]
 800a7ac:	f7ff fd69 	bl	800a282 <__hexdig_fun>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d14f      	bne.n	800a854 <__hexnan+0xe4>
 800a7b4:	9904      	ldr	r1, [sp, #16]
 800a7b6:	9a05      	ldr	r2, [sp, #20]
 800a7b8:	2920      	cmp	r1, #32
 800a7ba:	d818      	bhi.n	800a7ee <__hexnan+0x7e>
 800a7bc:	9b02      	ldr	r3, [sp, #8]
 800a7be:	459b      	cmp	fp, r3
 800a7c0:	dd13      	ble.n	800a7ea <__hexnan+0x7a>
 800a7c2:	454c      	cmp	r4, r9
 800a7c4:	d206      	bcs.n	800a7d4 <__hexnan+0x64>
 800a7c6:	2d07      	cmp	r5, #7
 800a7c8:	dc04      	bgt.n	800a7d4 <__hexnan+0x64>
 800a7ca:	462a      	mov	r2, r5
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f7ff ffa8 	bl	800a724 <L_shift>
 800a7d4:	4544      	cmp	r4, r8
 800a7d6:	d950      	bls.n	800a87a <__hexnan+0x10a>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f1a4 0904 	sub.w	r9, r4, #4
 800a7de:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7e2:	461d      	mov	r5, r3
 800a7e4:	464c      	mov	r4, r9
 800a7e6:	f8cd b008 	str.w	fp, [sp, #8]
 800a7ea:	9a03      	ldr	r2, [sp, #12]
 800a7ec:	e7d7      	b.n	800a79e <__hexnan+0x2e>
 800a7ee:	2929      	cmp	r1, #41	; 0x29
 800a7f0:	d156      	bne.n	800a8a0 <__hexnan+0x130>
 800a7f2:	3202      	adds	r2, #2
 800a7f4:	f8ca 2000 	str.w	r2, [sl]
 800a7f8:	f1bb 0f00 	cmp.w	fp, #0
 800a7fc:	d050      	beq.n	800a8a0 <__hexnan+0x130>
 800a7fe:	454c      	cmp	r4, r9
 800a800:	d206      	bcs.n	800a810 <__hexnan+0xa0>
 800a802:	2d07      	cmp	r5, #7
 800a804:	dc04      	bgt.n	800a810 <__hexnan+0xa0>
 800a806:	462a      	mov	r2, r5
 800a808:	4649      	mov	r1, r9
 800a80a:	4620      	mov	r0, r4
 800a80c:	f7ff ff8a 	bl	800a724 <L_shift>
 800a810:	4544      	cmp	r4, r8
 800a812:	d934      	bls.n	800a87e <__hexnan+0x10e>
 800a814:	4623      	mov	r3, r4
 800a816:	f1a8 0204 	sub.w	r2, r8, #4
 800a81a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a81e:	429f      	cmp	r7, r3
 800a820:	f842 1f04 	str.w	r1, [r2, #4]!
 800a824:	d2f9      	bcs.n	800a81a <__hexnan+0xaa>
 800a826:	1b3b      	subs	r3, r7, r4
 800a828:	f023 0303 	bic.w	r3, r3, #3
 800a82c:	3304      	adds	r3, #4
 800a82e:	3401      	adds	r4, #1
 800a830:	3e03      	subs	r6, #3
 800a832:	42b4      	cmp	r4, r6
 800a834:	bf88      	it	hi
 800a836:	2304      	movhi	r3, #4
 800a838:	2200      	movs	r2, #0
 800a83a:	4443      	add	r3, r8
 800a83c:	f843 2b04 	str.w	r2, [r3], #4
 800a840:	429f      	cmp	r7, r3
 800a842:	d2fb      	bcs.n	800a83c <__hexnan+0xcc>
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	b91b      	cbnz	r3, 800a850 <__hexnan+0xe0>
 800a848:	4547      	cmp	r7, r8
 800a84a:	d127      	bne.n	800a89c <__hexnan+0x12c>
 800a84c:	2301      	movs	r3, #1
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	2005      	movs	r0, #5
 800a852:	e026      	b.n	800a8a2 <__hexnan+0x132>
 800a854:	3501      	adds	r5, #1
 800a856:	2d08      	cmp	r5, #8
 800a858:	f10b 0b01 	add.w	fp, fp, #1
 800a85c:	dd06      	ble.n	800a86c <__hexnan+0xfc>
 800a85e:	4544      	cmp	r4, r8
 800a860:	d9c3      	bls.n	800a7ea <__hexnan+0x7a>
 800a862:	2300      	movs	r3, #0
 800a864:	2501      	movs	r5, #1
 800a866:	f844 3c04 	str.w	r3, [r4, #-4]
 800a86a:	3c04      	subs	r4, #4
 800a86c:	6822      	ldr	r2, [r4, #0]
 800a86e:	f000 000f 	and.w	r0, r0, #15
 800a872:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a876:	6022      	str	r2, [r4, #0]
 800a878:	e7b7      	b.n	800a7ea <__hexnan+0x7a>
 800a87a:	2508      	movs	r5, #8
 800a87c:	e7b5      	b.n	800a7ea <__hexnan+0x7a>
 800a87e:	9b01      	ldr	r3, [sp, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d0df      	beq.n	800a844 <__hexnan+0xd4>
 800a884:	f04f 32ff 	mov.w	r2, #4294967295
 800a888:	f1c3 0320 	rsb	r3, r3, #32
 800a88c:	fa22 f303 	lsr.w	r3, r2, r3
 800a890:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a894:	401a      	ands	r2, r3
 800a896:	f846 2c04 	str.w	r2, [r6, #-4]
 800a89a:	e7d3      	b.n	800a844 <__hexnan+0xd4>
 800a89c:	3f04      	subs	r7, #4
 800a89e:	e7d1      	b.n	800a844 <__hexnan+0xd4>
 800a8a0:	2004      	movs	r0, #4
 800a8a2:	b007      	add	sp, #28
 800a8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8a8 <_localeconv_r>:
 800a8a8:	4800      	ldr	r0, [pc, #0]	; (800a8ac <_localeconv_r+0x4>)
 800a8aa:	4770      	bx	lr
 800a8ac:	2000017c 	.word	0x2000017c

0800a8b0 <malloc>:
 800a8b0:	4b02      	ldr	r3, [pc, #8]	; (800a8bc <malloc+0xc>)
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	6818      	ldr	r0, [r3, #0]
 800a8b6:	f000 bd65 	b.w	800b384 <_malloc_r>
 800a8ba:	bf00      	nop
 800a8bc:	20000024 	.word	0x20000024

0800a8c0 <__ascii_mbtowc>:
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	b901      	cbnz	r1, 800a8c6 <__ascii_mbtowc+0x6>
 800a8c4:	a901      	add	r1, sp, #4
 800a8c6:	b142      	cbz	r2, 800a8da <__ascii_mbtowc+0x1a>
 800a8c8:	b14b      	cbz	r3, 800a8de <__ascii_mbtowc+0x1e>
 800a8ca:	7813      	ldrb	r3, [r2, #0]
 800a8cc:	600b      	str	r3, [r1, #0]
 800a8ce:	7812      	ldrb	r2, [r2, #0]
 800a8d0:	1e10      	subs	r0, r2, #0
 800a8d2:	bf18      	it	ne
 800a8d4:	2001      	movne	r0, #1
 800a8d6:	b002      	add	sp, #8
 800a8d8:	4770      	bx	lr
 800a8da:	4610      	mov	r0, r2
 800a8dc:	e7fb      	b.n	800a8d6 <__ascii_mbtowc+0x16>
 800a8de:	f06f 0001 	mvn.w	r0, #1
 800a8e2:	e7f8      	b.n	800a8d6 <__ascii_mbtowc+0x16>

0800a8e4 <memchr>:
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	b510      	push	{r4, lr}
 800a8e8:	b2c9      	uxtb	r1, r1
 800a8ea:	4402      	add	r2, r0
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	d101      	bne.n	800a8f6 <memchr+0x12>
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	e003      	b.n	800a8fe <memchr+0x1a>
 800a8f6:	7804      	ldrb	r4, [r0, #0]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	428c      	cmp	r4, r1
 800a8fc:	d1f6      	bne.n	800a8ec <memchr+0x8>
 800a8fe:	bd10      	pop	{r4, pc}

0800a900 <memcpy>:
 800a900:	440a      	add	r2, r1
 800a902:	4291      	cmp	r1, r2
 800a904:	f100 33ff 	add.w	r3, r0, #4294967295
 800a908:	d100      	bne.n	800a90c <memcpy+0xc>
 800a90a:	4770      	bx	lr
 800a90c:	b510      	push	{r4, lr}
 800a90e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a912:	4291      	cmp	r1, r2
 800a914:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a918:	d1f9      	bne.n	800a90e <memcpy+0xe>
 800a91a:	bd10      	pop	{r4, pc}

0800a91c <_Balloc>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	b976      	cbnz	r6, 800a944 <_Balloc+0x28>
 800a926:	2010      	movs	r0, #16
 800a928:	f7ff ffc2 	bl	800a8b0 <malloc>
 800a92c:	4602      	mov	r2, r0
 800a92e:	6260      	str	r0, [r4, #36]	; 0x24
 800a930:	b920      	cbnz	r0, 800a93c <_Balloc+0x20>
 800a932:	2166      	movs	r1, #102	; 0x66
 800a934:	4b17      	ldr	r3, [pc, #92]	; (800a994 <_Balloc+0x78>)
 800a936:	4818      	ldr	r0, [pc, #96]	; (800a998 <_Balloc+0x7c>)
 800a938:	f000 ff2c 	bl	800b794 <__assert_func>
 800a93c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a940:	6006      	str	r6, [r0, #0]
 800a942:	60c6      	str	r6, [r0, #12]
 800a944:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a946:	68f3      	ldr	r3, [r6, #12]
 800a948:	b183      	cbz	r3, 800a96c <_Balloc+0x50>
 800a94a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a952:	b9b8      	cbnz	r0, 800a984 <_Balloc+0x68>
 800a954:	2101      	movs	r1, #1
 800a956:	fa01 f605 	lsl.w	r6, r1, r5
 800a95a:	1d72      	adds	r2, r6, #5
 800a95c:	4620      	mov	r0, r4
 800a95e:	0092      	lsls	r2, r2, #2
 800a960:	f000 fc94 	bl	800b28c <_calloc_r>
 800a964:	b160      	cbz	r0, 800a980 <_Balloc+0x64>
 800a966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a96a:	e00e      	b.n	800a98a <_Balloc+0x6e>
 800a96c:	2221      	movs	r2, #33	; 0x21
 800a96e:	2104      	movs	r1, #4
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fc8b 	bl	800b28c <_calloc_r>
 800a976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a978:	60f0      	str	r0, [r6, #12]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e4      	bne.n	800a94a <_Balloc+0x2e>
 800a980:	2000      	movs	r0, #0
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	6802      	ldr	r2, [r0, #0]
 800a986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a98a:	2300      	movs	r3, #0
 800a98c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a990:	e7f7      	b.n	800a982 <_Balloc+0x66>
 800a992:	bf00      	nop
 800a994:	0800c435 	.word	0x0800c435
 800a998:	0800c534 	.word	0x0800c534

0800a99c <_Bfree>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	b976      	cbnz	r6, 800a9c4 <_Bfree+0x28>
 800a9a6:	2010      	movs	r0, #16
 800a9a8:	f7ff ff82 	bl	800a8b0 <malloc>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	6268      	str	r0, [r5, #36]	; 0x24
 800a9b0:	b920      	cbnz	r0, 800a9bc <_Bfree+0x20>
 800a9b2:	218a      	movs	r1, #138	; 0x8a
 800a9b4:	4b08      	ldr	r3, [pc, #32]	; (800a9d8 <_Bfree+0x3c>)
 800a9b6:	4809      	ldr	r0, [pc, #36]	; (800a9dc <_Bfree+0x40>)
 800a9b8:	f000 feec 	bl	800b794 <__assert_func>
 800a9bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9c0:	6006      	str	r6, [r0, #0]
 800a9c2:	60c6      	str	r6, [r0, #12]
 800a9c4:	b13c      	cbz	r4, 800a9d6 <_Bfree+0x3a>
 800a9c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9c8:	6862      	ldr	r2, [r4, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9d0:	6021      	str	r1, [r4, #0]
 800a9d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	0800c435 	.word	0x0800c435
 800a9dc:	0800c534 	.word	0x0800c534

0800a9e0 <__multadd>:
 800a9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	461e      	mov	r6, r3
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	690d      	ldr	r5, [r1, #16]
 800a9ee:	f101 0c14 	add.w	ip, r1, #20
 800a9f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	b299      	uxth	r1, r3
 800a9fa:	fb02 6101 	mla	r1, r2, r1, r6
 800a9fe:	0c1e      	lsrs	r6, r3, #16
 800aa00:	0c0b      	lsrs	r3, r1, #16
 800aa02:	fb02 3306 	mla	r3, r2, r6, r3
 800aa06:	b289      	uxth	r1, r1
 800aa08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa0c:	4285      	cmp	r5, r0
 800aa0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa12:	f84c 1b04 	str.w	r1, [ip], #4
 800aa16:	dcec      	bgt.n	800a9f2 <__multadd+0x12>
 800aa18:	b30e      	cbz	r6, 800aa5e <__multadd+0x7e>
 800aa1a:	68a3      	ldr	r3, [r4, #8]
 800aa1c:	42ab      	cmp	r3, r5
 800aa1e:	dc19      	bgt.n	800aa54 <__multadd+0x74>
 800aa20:	6861      	ldr	r1, [r4, #4]
 800aa22:	4638      	mov	r0, r7
 800aa24:	3101      	adds	r1, #1
 800aa26:	f7ff ff79 	bl	800a91c <_Balloc>
 800aa2a:	4680      	mov	r8, r0
 800aa2c:	b928      	cbnz	r0, 800aa3a <__multadd+0x5a>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	21b5      	movs	r1, #181	; 0xb5
 800aa32:	4b0c      	ldr	r3, [pc, #48]	; (800aa64 <__multadd+0x84>)
 800aa34:	480c      	ldr	r0, [pc, #48]	; (800aa68 <__multadd+0x88>)
 800aa36:	f000 fead 	bl	800b794 <__assert_func>
 800aa3a:	6922      	ldr	r2, [r4, #16]
 800aa3c:	f104 010c 	add.w	r1, r4, #12
 800aa40:	3202      	adds	r2, #2
 800aa42:	0092      	lsls	r2, r2, #2
 800aa44:	300c      	adds	r0, #12
 800aa46:	f7ff ff5b 	bl	800a900 <memcpy>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f7ff ffa5 	bl	800a99c <_Bfree>
 800aa52:	4644      	mov	r4, r8
 800aa54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa58:	3501      	adds	r5, #1
 800aa5a:	615e      	str	r6, [r3, #20]
 800aa5c:	6125      	str	r5, [r4, #16]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa64:	0800c4a7 	.word	0x0800c4a7
 800aa68:	0800c534 	.word	0x0800c534

0800aa6c <__s2b>:
 800aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	4615      	mov	r5, r2
 800aa72:	2209      	movs	r2, #9
 800aa74:	461f      	mov	r7, r3
 800aa76:	3308      	adds	r3, #8
 800aa78:	460c      	mov	r4, r1
 800aa7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa7e:	4606      	mov	r6, r0
 800aa80:	2201      	movs	r2, #1
 800aa82:	2100      	movs	r1, #0
 800aa84:	429a      	cmp	r2, r3
 800aa86:	db09      	blt.n	800aa9c <__s2b+0x30>
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7ff ff47 	bl	800a91c <_Balloc>
 800aa8e:	b940      	cbnz	r0, 800aaa2 <__s2b+0x36>
 800aa90:	4602      	mov	r2, r0
 800aa92:	21ce      	movs	r1, #206	; 0xce
 800aa94:	4b18      	ldr	r3, [pc, #96]	; (800aaf8 <__s2b+0x8c>)
 800aa96:	4819      	ldr	r0, [pc, #100]	; (800aafc <__s2b+0x90>)
 800aa98:	f000 fe7c 	bl	800b794 <__assert_func>
 800aa9c:	0052      	lsls	r2, r2, #1
 800aa9e:	3101      	adds	r1, #1
 800aaa0:	e7f0      	b.n	800aa84 <__s2b+0x18>
 800aaa2:	9b08      	ldr	r3, [sp, #32]
 800aaa4:	2d09      	cmp	r5, #9
 800aaa6:	6143      	str	r3, [r0, #20]
 800aaa8:	f04f 0301 	mov.w	r3, #1
 800aaac:	6103      	str	r3, [r0, #16]
 800aaae:	dd16      	ble.n	800aade <__s2b+0x72>
 800aab0:	f104 0909 	add.w	r9, r4, #9
 800aab4:	46c8      	mov	r8, r9
 800aab6:	442c      	add	r4, r5
 800aab8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aabc:	4601      	mov	r1, r0
 800aabe:	220a      	movs	r2, #10
 800aac0:	4630      	mov	r0, r6
 800aac2:	3b30      	subs	r3, #48	; 0x30
 800aac4:	f7ff ff8c 	bl	800a9e0 <__multadd>
 800aac8:	45a0      	cmp	r8, r4
 800aaca:	d1f5      	bne.n	800aab8 <__s2b+0x4c>
 800aacc:	f1a5 0408 	sub.w	r4, r5, #8
 800aad0:	444c      	add	r4, r9
 800aad2:	1b2d      	subs	r5, r5, r4
 800aad4:	1963      	adds	r3, r4, r5
 800aad6:	42bb      	cmp	r3, r7
 800aad8:	db04      	blt.n	800aae4 <__s2b+0x78>
 800aada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aade:	2509      	movs	r5, #9
 800aae0:	340a      	adds	r4, #10
 800aae2:	e7f6      	b.n	800aad2 <__s2b+0x66>
 800aae4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aae8:	4601      	mov	r1, r0
 800aaea:	220a      	movs	r2, #10
 800aaec:	4630      	mov	r0, r6
 800aaee:	3b30      	subs	r3, #48	; 0x30
 800aaf0:	f7ff ff76 	bl	800a9e0 <__multadd>
 800aaf4:	e7ee      	b.n	800aad4 <__s2b+0x68>
 800aaf6:	bf00      	nop
 800aaf8:	0800c4a7 	.word	0x0800c4a7
 800aafc:	0800c534 	.word	0x0800c534

0800ab00 <__hi0bits>:
 800ab00:	0c02      	lsrs	r2, r0, #16
 800ab02:	0412      	lsls	r2, r2, #16
 800ab04:	4603      	mov	r3, r0
 800ab06:	b9ca      	cbnz	r2, 800ab3c <__hi0bits+0x3c>
 800ab08:	0403      	lsls	r3, r0, #16
 800ab0a:	2010      	movs	r0, #16
 800ab0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ab10:	bf04      	itt	eq
 800ab12:	021b      	lsleq	r3, r3, #8
 800ab14:	3008      	addeq	r0, #8
 800ab16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ab1a:	bf04      	itt	eq
 800ab1c:	011b      	lsleq	r3, r3, #4
 800ab1e:	3004      	addeq	r0, #4
 800ab20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ab24:	bf04      	itt	eq
 800ab26:	009b      	lsleq	r3, r3, #2
 800ab28:	3002      	addeq	r0, #2
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	db05      	blt.n	800ab3a <__hi0bits+0x3a>
 800ab2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ab32:	f100 0001 	add.w	r0, r0, #1
 800ab36:	bf08      	it	eq
 800ab38:	2020      	moveq	r0, #32
 800ab3a:	4770      	bx	lr
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	e7e5      	b.n	800ab0c <__hi0bits+0xc>

0800ab40 <__lo0bits>:
 800ab40:	6803      	ldr	r3, [r0, #0]
 800ab42:	4602      	mov	r2, r0
 800ab44:	f013 0007 	ands.w	r0, r3, #7
 800ab48:	d00b      	beq.n	800ab62 <__lo0bits+0x22>
 800ab4a:	07d9      	lsls	r1, r3, #31
 800ab4c:	d421      	bmi.n	800ab92 <__lo0bits+0x52>
 800ab4e:	0798      	lsls	r0, r3, #30
 800ab50:	bf49      	itett	mi
 800ab52:	085b      	lsrmi	r3, r3, #1
 800ab54:	089b      	lsrpl	r3, r3, #2
 800ab56:	2001      	movmi	r0, #1
 800ab58:	6013      	strmi	r3, [r2, #0]
 800ab5a:	bf5c      	itt	pl
 800ab5c:	2002      	movpl	r0, #2
 800ab5e:	6013      	strpl	r3, [r2, #0]
 800ab60:	4770      	bx	lr
 800ab62:	b299      	uxth	r1, r3
 800ab64:	b909      	cbnz	r1, 800ab6a <__lo0bits+0x2a>
 800ab66:	2010      	movs	r0, #16
 800ab68:	0c1b      	lsrs	r3, r3, #16
 800ab6a:	b2d9      	uxtb	r1, r3
 800ab6c:	b909      	cbnz	r1, 800ab72 <__lo0bits+0x32>
 800ab6e:	3008      	adds	r0, #8
 800ab70:	0a1b      	lsrs	r3, r3, #8
 800ab72:	0719      	lsls	r1, r3, #28
 800ab74:	bf04      	itt	eq
 800ab76:	091b      	lsreq	r3, r3, #4
 800ab78:	3004      	addeq	r0, #4
 800ab7a:	0799      	lsls	r1, r3, #30
 800ab7c:	bf04      	itt	eq
 800ab7e:	089b      	lsreq	r3, r3, #2
 800ab80:	3002      	addeq	r0, #2
 800ab82:	07d9      	lsls	r1, r3, #31
 800ab84:	d403      	bmi.n	800ab8e <__lo0bits+0x4e>
 800ab86:	085b      	lsrs	r3, r3, #1
 800ab88:	f100 0001 	add.w	r0, r0, #1
 800ab8c:	d003      	beq.n	800ab96 <__lo0bits+0x56>
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	4770      	bx	lr
 800ab92:	2000      	movs	r0, #0
 800ab94:	4770      	bx	lr
 800ab96:	2020      	movs	r0, #32
 800ab98:	4770      	bx	lr
	...

0800ab9c <__i2b>:
 800ab9c:	b510      	push	{r4, lr}
 800ab9e:	460c      	mov	r4, r1
 800aba0:	2101      	movs	r1, #1
 800aba2:	f7ff febb 	bl	800a91c <_Balloc>
 800aba6:	4602      	mov	r2, r0
 800aba8:	b928      	cbnz	r0, 800abb6 <__i2b+0x1a>
 800abaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800abae:	4b04      	ldr	r3, [pc, #16]	; (800abc0 <__i2b+0x24>)
 800abb0:	4804      	ldr	r0, [pc, #16]	; (800abc4 <__i2b+0x28>)
 800abb2:	f000 fdef 	bl	800b794 <__assert_func>
 800abb6:	2301      	movs	r3, #1
 800abb8:	6144      	str	r4, [r0, #20]
 800abba:	6103      	str	r3, [r0, #16]
 800abbc:	bd10      	pop	{r4, pc}
 800abbe:	bf00      	nop
 800abc0:	0800c4a7 	.word	0x0800c4a7
 800abc4:	0800c534 	.word	0x0800c534

0800abc8 <__multiply>:
 800abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abcc:	4691      	mov	r9, r2
 800abce:	690a      	ldr	r2, [r1, #16]
 800abd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abd4:	460c      	mov	r4, r1
 800abd6:	429a      	cmp	r2, r3
 800abd8:	bfbe      	ittt	lt
 800abda:	460b      	movlt	r3, r1
 800abdc:	464c      	movlt	r4, r9
 800abde:	4699      	movlt	r9, r3
 800abe0:	6927      	ldr	r7, [r4, #16]
 800abe2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	6861      	ldr	r1, [r4, #4]
 800abea:	eb07 060a 	add.w	r6, r7, sl
 800abee:	42b3      	cmp	r3, r6
 800abf0:	b085      	sub	sp, #20
 800abf2:	bfb8      	it	lt
 800abf4:	3101      	addlt	r1, #1
 800abf6:	f7ff fe91 	bl	800a91c <_Balloc>
 800abfa:	b930      	cbnz	r0, 800ac0a <__multiply+0x42>
 800abfc:	4602      	mov	r2, r0
 800abfe:	f240 115d 	movw	r1, #349	; 0x15d
 800ac02:	4b43      	ldr	r3, [pc, #268]	; (800ad10 <__multiply+0x148>)
 800ac04:	4843      	ldr	r0, [pc, #268]	; (800ad14 <__multiply+0x14c>)
 800ac06:	f000 fdc5 	bl	800b794 <__assert_func>
 800ac0a:	f100 0514 	add.w	r5, r0, #20
 800ac0e:	462b      	mov	r3, r5
 800ac10:	2200      	movs	r2, #0
 800ac12:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac16:	4543      	cmp	r3, r8
 800ac18:	d321      	bcc.n	800ac5e <__multiply+0x96>
 800ac1a:	f104 0314 	add.w	r3, r4, #20
 800ac1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac22:	f109 0314 	add.w	r3, r9, #20
 800ac26:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac2a:	9202      	str	r2, [sp, #8]
 800ac2c:	1b3a      	subs	r2, r7, r4
 800ac2e:	3a15      	subs	r2, #21
 800ac30:	f022 0203 	bic.w	r2, r2, #3
 800ac34:	3204      	adds	r2, #4
 800ac36:	f104 0115 	add.w	r1, r4, #21
 800ac3a:	428f      	cmp	r7, r1
 800ac3c:	bf38      	it	cc
 800ac3e:	2204      	movcc	r2, #4
 800ac40:	9201      	str	r2, [sp, #4]
 800ac42:	9a02      	ldr	r2, [sp, #8]
 800ac44:	9303      	str	r3, [sp, #12]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d80c      	bhi.n	800ac64 <__multiply+0x9c>
 800ac4a:	2e00      	cmp	r6, #0
 800ac4c:	dd03      	ble.n	800ac56 <__multiply+0x8e>
 800ac4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d059      	beq.n	800ad0a <__multiply+0x142>
 800ac56:	6106      	str	r6, [r0, #16]
 800ac58:	b005      	add	sp, #20
 800ac5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5e:	f843 2b04 	str.w	r2, [r3], #4
 800ac62:	e7d8      	b.n	800ac16 <__multiply+0x4e>
 800ac64:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac68:	f1ba 0f00 	cmp.w	sl, #0
 800ac6c:	d023      	beq.n	800acb6 <__multiply+0xee>
 800ac6e:	46a9      	mov	r9, r5
 800ac70:	f04f 0c00 	mov.w	ip, #0
 800ac74:	f104 0e14 	add.w	lr, r4, #20
 800ac78:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac7c:	f8d9 1000 	ldr.w	r1, [r9]
 800ac80:	fa1f fb82 	uxth.w	fp, r2
 800ac84:	b289      	uxth	r1, r1
 800ac86:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac8a:	4461      	add	r1, ip
 800ac8c:	f8d9 c000 	ldr.w	ip, [r9]
 800ac90:	0c12      	lsrs	r2, r2, #16
 800ac92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ac96:	fb0a c202 	mla	r2, sl, r2, ip
 800ac9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac9e:	b289      	uxth	r1, r1
 800aca0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aca4:	4577      	cmp	r7, lr
 800aca6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acaa:	f849 1b04 	str.w	r1, [r9], #4
 800acae:	d8e3      	bhi.n	800ac78 <__multiply+0xb0>
 800acb0:	9a01      	ldr	r2, [sp, #4]
 800acb2:	f845 c002 	str.w	ip, [r5, r2]
 800acb6:	9a03      	ldr	r2, [sp, #12]
 800acb8:	3304      	adds	r3, #4
 800acba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800acbe:	f1b9 0f00 	cmp.w	r9, #0
 800acc2:	d020      	beq.n	800ad06 <__multiply+0x13e>
 800acc4:	46ae      	mov	lr, r5
 800acc6:	f04f 0a00 	mov.w	sl, #0
 800acca:	6829      	ldr	r1, [r5, #0]
 800accc:	f104 0c14 	add.w	ip, r4, #20
 800acd0:	f8bc b000 	ldrh.w	fp, [ip]
 800acd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800acd8:	b289      	uxth	r1, r1
 800acda:	fb09 220b 	mla	r2, r9, fp, r2
 800acde:	4492      	add	sl, r2
 800ace0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ace4:	f84e 1b04 	str.w	r1, [lr], #4
 800ace8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800acec:	f8be 1000 	ldrh.w	r1, [lr]
 800acf0:	0c12      	lsrs	r2, r2, #16
 800acf2:	fb09 1102 	mla	r1, r9, r2, r1
 800acf6:	4567      	cmp	r7, ip
 800acf8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800acfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad00:	d8e6      	bhi.n	800acd0 <__multiply+0x108>
 800ad02:	9a01      	ldr	r2, [sp, #4]
 800ad04:	50a9      	str	r1, [r5, r2]
 800ad06:	3504      	adds	r5, #4
 800ad08:	e79b      	b.n	800ac42 <__multiply+0x7a>
 800ad0a:	3e01      	subs	r6, #1
 800ad0c:	e79d      	b.n	800ac4a <__multiply+0x82>
 800ad0e:	bf00      	nop
 800ad10:	0800c4a7 	.word	0x0800c4a7
 800ad14:	0800c534 	.word	0x0800c534

0800ad18 <__pow5mult>:
 800ad18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad1c:	4615      	mov	r5, r2
 800ad1e:	f012 0203 	ands.w	r2, r2, #3
 800ad22:	4606      	mov	r6, r0
 800ad24:	460f      	mov	r7, r1
 800ad26:	d007      	beq.n	800ad38 <__pow5mult+0x20>
 800ad28:	4c25      	ldr	r4, [pc, #148]	; (800adc0 <__pow5mult+0xa8>)
 800ad2a:	3a01      	subs	r2, #1
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad32:	f7ff fe55 	bl	800a9e0 <__multadd>
 800ad36:	4607      	mov	r7, r0
 800ad38:	10ad      	asrs	r5, r5, #2
 800ad3a:	d03d      	beq.n	800adb8 <__pow5mult+0xa0>
 800ad3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad3e:	b97c      	cbnz	r4, 800ad60 <__pow5mult+0x48>
 800ad40:	2010      	movs	r0, #16
 800ad42:	f7ff fdb5 	bl	800a8b0 <malloc>
 800ad46:	4602      	mov	r2, r0
 800ad48:	6270      	str	r0, [r6, #36]	; 0x24
 800ad4a:	b928      	cbnz	r0, 800ad58 <__pow5mult+0x40>
 800ad4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad50:	4b1c      	ldr	r3, [pc, #112]	; (800adc4 <__pow5mult+0xac>)
 800ad52:	481d      	ldr	r0, [pc, #116]	; (800adc8 <__pow5mult+0xb0>)
 800ad54:	f000 fd1e 	bl	800b794 <__assert_func>
 800ad58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad5c:	6004      	str	r4, [r0, #0]
 800ad5e:	60c4      	str	r4, [r0, #12]
 800ad60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad68:	b94c      	cbnz	r4, 800ad7e <__pow5mult+0x66>
 800ad6a:	f240 2171 	movw	r1, #625	; 0x271
 800ad6e:	4630      	mov	r0, r6
 800ad70:	f7ff ff14 	bl	800ab9c <__i2b>
 800ad74:	2300      	movs	r3, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad7c:	6003      	str	r3, [r0, #0]
 800ad7e:	f04f 0900 	mov.w	r9, #0
 800ad82:	07eb      	lsls	r3, r5, #31
 800ad84:	d50a      	bpl.n	800ad9c <__pow5mult+0x84>
 800ad86:	4639      	mov	r1, r7
 800ad88:	4622      	mov	r2, r4
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f7ff ff1c 	bl	800abc8 <__multiply>
 800ad90:	4680      	mov	r8, r0
 800ad92:	4639      	mov	r1, r7
 800ad94:	4630      	mov	r0, r6
 800ad96:	f7ff fe01 	bl	800a99c <_Bfree>
 800ad9a:	4647      	mov	r7, r8
 800ad9c:	106d      	asrs	r5, r5, #1
 800ad9e:	d00b      	beq.n	800adb8 <__pow5mult+0xa0>
 800ada0:	6820      	ldr	r0, [r4, #0]
 800ada2:	b938      	cbnz	r0, 800adb4 <__pow5mult+0x9c>
 800ada4:	4622      	mov	r2, r4
 800ada6:	4621      	mov	r1, r4
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff ff0d 	bl	800abc8 <__multiply>
 800adae:	6020      	str	r0, [r4, #0]
 800adb0:	f8c0 9000 	str.w	r9, [r0]
 800adb4:	4604      	mov	r4, r0
 800adb6:	e7e4      	b.n	800ad82 <__pow5mult+0x6a>
 800adb8:	4638      	mov	r0, r7
 800adba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adbe:	bf00      	nop
 800adc0:	0800c680 	.word	0x0800c680
 800adc4:	0800c435 	.word	0x0800c435
 800adc8:	0800c534 	.word	0x0800c534

0800adcc <__lshift>:
 800adcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add0:	460c      	mov	r4, r1
 800add2:	4607      	mov	r7, r0
 800add4:	4691      	mov	r9, r2
 800add6:	6923      	ldr	r3, [r4, #16]
 800add8:	6849      	ldr	r1, [r1, #4]
 800adda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adde:	68a3      	ldr	r3, [r4, #8]
 800ade0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ade4:	f108 0601 	add.w	r6, r8, #1
 800ade8:	42b3      	cmp	r3, r6
 800adea:	db0b      	blt.n	800ae04 <__lshift+0x38>
 800adec:	4638      	mov	r0, r7
 800adee:	f7ff fd95 	bl	800a91c <_Balloc>
 800adf2:	4605      	mov	r5, r0
 800adf4:	b948      	cbnz	r0, 800ae0a <__lshift+0x3e>
 800adf6:	4602      	mov	r2, r0
 800adf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800adfc:	4b29      	ldr	r3, [pc, #164]	; (800aea4 <__lshift+0xd8>)
 800adfe:	482a      	ldr	r0, [pc, #168]	; (800aea8 <__lshift+0xdc>)
 800ae00:	f000 fcc8 	bl	800b794 <__assert_func>
 800ae04:	3101      	adds	r1, #1
 800ae06:	005b      	lsls	r3, r3, #1
 800ae08:	e7ee      	b.n	800ade8 <__lshift+0x1c>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f100 0114 	add.w	r1, r0, #20
 800ae10:	f100 0210 	add.w	r2, r0, #16
 800ae14:	4618      	mov	r0, r3
 800ae16:	4553      	cmp	r3, sl
 800ae18:	db37      	blt.n	800ae8a <__lshift+0xbe>
 800ae1a:	6920      	ldr	r0, [r4, #16]
 800ae1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae20:	f104 0314 	add.w	r3, r4, #20
 800ae24:	f019 091f 	ands.w	r9, r9, #31
 800ae28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae30:	d02f      	beq.n	800ae92 <__lshift+0xc6>
 800ae32:	468a      	mov	sl, r1
 800ae34:	f04f 0c00 	mov.w	ip, #0
 800ae38:	f1c9 0e20 	rsb	lr, r9, #32
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	fa02 f209 	lsl.w	r2, r2, r9
 800ae42:	ea42 020c 	orr.w	r2, r2, ip
 800ae46:	f84a 2b04 	str.w	r2, [sl], #4
 800ae4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae4e:	4298      	cmp	r0, r3
 800ae50:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ae54:	d8f2      	bhi.n	800ae3c <__lshift+0x70>
 800ae56:	1b03      	subs	r3, r0, r4
 800ae58:	3b15      	subs	r3, #21
 800ae5a:	f023 0303 	bic.w	r3, r3, #3
 800ae5e:	3304      	adds	r3, #4
 800ae60:	f104 0215 	add.w	r2, r4, #21
 800ae64:	4290      	cmp	r0, r2
 800ae66:	bf38      	it	cc
 800ae68:	2304      	movcc	r3, #4
 800ae6a:	f841 c003 	str.w	ip, [r1, r3]
 800ae6e:	f1bc 0f00 	cmp.w	ip, #0
 800ae72:	d001      	beq.n	800ae78 <__lshift+0xac>
 800ae74:	f108 0602 	add.w	r6, r8, #2
 800ae78:	3e01      	subs	r6, #1
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	612e      	str	r6, [r5, #16]
 800ae80:	f7ff fd8c 	bl	800a99c <_Bfree>
 800ae84:	4628      	mov	r0, r5
 800ae86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae8e:	3301      	adds	r3, #1
 800ae90:	e7c1      	b.n	800ae16 <__lshift+0x4a>
 800ae92:	3904      	subs	r1, #4
 800ae94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae98:	4298      	cmp	r0, r3
 800ae9a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae9e:	d8f9      	bhi.n	800ae94 <__lshift+0xc8>
 800aea0:	e7ea      	b.n	800ae78 <__lshift+0xac>
 800aea2:	bf00      	nop
 800aea4:	0800c4a7 	.word	0x0800c4a7
 800aea8:	0800c534 	.word	0x0800c534

0800aeac <__mcmp>:
 800aeac:	4603      	mov	r3, r0
 800aeae:	690a      	ldr	r2, [r1, #16]
 800aeb0:	6900      	ldr	r0, [r0, #16]
 800aeb2:	b530      	push	{r4, r5, lr}
 800aeb4:	1a80      	subs	r0, r0, r2
 800aeb6:	d10d      	bne.n	800aed4 <__mcmp+0x28>
 800aeb8:	3314      	adds	r3, #20
 800aeba:	3114      	adds	r1, #20
 800aebc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aec0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aec4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aecc:	4295      	cmp	r5, r2
 800aece:	d002      	beq.n	800aed6 <__mcmp+0x2a>
 800aed0:	d304      	bcc.n	800aedc <__mcmp+0x30>
 800aed2:	2001      	movs	r0, #1
 800aed4:	bd30      	pop	{r4, r5, pc}
 800aed6:	42a3      	cmp	r3, r4
 800aed8:	d3f4      	bcc.n	800aec4 <__mcmp+0x18>
 800aeda:	e7fb      	b.n	800aed4 <__mcmp+0x28>
 800aedc:	f04f 30ff 	mov.w	r0, #4294967295
 800aee0:	e7f8      	b.n	800aed4 <__mcmp+0x28>
	...

0800aee4 <__mdiff>:
 800aee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	460d      	mov	r5, r1
 800aeea:	4607      	mov	r7, r0
 800aeec:	4611      	mov	r1, r2
 800aeee:	4628      	mov	r0, r5
 800aef0:	4614      	mov	r4, r2
 800aef2:	f7ff ffdb 	bl	800aeac <__mcmp>
 800aef6:	1e06      	subs	r6, r0, #0
 800aef8:	d111      	bne.n	800af1e <__mdiff+0x3a>
 800aefa:	4631      	mov	r1, r6
 800aefc:	4638      	mov	r0, r7
 800aefe:	f7ff fd0d 	bl	800a91c <_Balloc>
 800af02:	4602      	mov	r2, r0
 800af04:	b928      	cbnz	r0, 800af12 <__mdiff+0x2e>
 800af06:	f240 2132 	movw	r1, #562	; 0x232
 800af0a:	4b3a      	ldr	r3, [pc, #232]	; (800aff4 <__mdiff+0x110>)
 800af0c:	483a      	ldr	r0, [pc, #232]	; (800aff8 <__mdiff+0x114>)
 800af0e:	f000 fc41 	bl	800b794 <__assert_func>
 800af12:	2301      	movs	r3, #1
 800af14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800af18:	4610      	mov	r0, r2
 800af1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1e:	bfa4      	itt	ge
 800af20:	4623      	movge	r3, r4
 800af22:	462c      	movge	r4, r5
 800af24:	4638      	mov	r0, r7
 800af26:	6861      	ldr	r1, [r4, #4]
 800af28:	bfa6      	itte	ge
 800af2a:	461d      	movge	r5, r3
 800af2c:	2600      	movge	r6, #0
 800af2e:	2601      	movlt	r6, #1
 800af30:	f7ff fcf4 	bl	800a91c <_Balloc>
 800af34:	4602      	mov	r2, r0
 800af36:	b918      	cbnz	r0, 800af40 <__mdiff+0x5c>
 800af38:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af3c:	4b2d      	ldr	r3, [pc, #180]	; (800aff4 <__mdiff+0x110>)
 800af3e:	e7e5      	b.n	800af0c <__mdiff+0x28>
 800af40:	f102 0814 	add.w	r8, r2, #20
 800af44:	46c2      	mov	sl, r8
 800af46:	f04f 0c00 	mov.w	ip, #0
 800af4a:	6927      	ldr	r7, [r4, #16]
 800af4c:	60c6      	str	r6, [r0, #12]
 800af4e:	692e      	ldr	r6, [r5, #16]
 800af50:	f104 0014 	add.w	r0, r4, #20
 800af54:	f105 0914 	add.w	r9, r5, #20
 800af58:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800af5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af60:	3410      	adds	r4, #16
 800af62:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800af66:	f859 3b04 	ldr.w	r3, [r9], #4
 800af6a:	fa1f f18b 	uxth.w	r1, fp
 800af6e:	448c      	add	ip, r1
 800af70:	b299      	uxth	r1, r3
 800af72:	0c1b      	lsrs	r3, r3, #16
 800af74:	ebac 0101 	sub.w	r1, ip, r1
 800af78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af7c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800af80:	b289      	uxth	r1, r1
 800af82:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800af86:	454e      	cmp	r6, r9
 800af88:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800af8c:	f84a 3b04 	str.w	r3, [sl], #4
 800af90:	d8e7      	bhi.n	800af62 <__mdiff+0x7e>
 800af92:	1b73      	subs	r3, r6, r5
 800af94:	3b15      	subs	r3, #21
 800af96:	f023 0303 	bic.w	r3, r3, #3
 800af9a:	3515      	adds	r5, #21
 800af9c:	3304      	adds	r3, #4
 800af9e:	42ae      	cmp	r6, r5
 800afa0:	bf38      	it	cc
 800afa2:	2304      	movcc	r3, #4
 800afa4:	4418      	add	r0, r3
 800afa6:	4443      	add	r3, r8
 800afa8:	461e      	mov	r6, r3
 800afaa:	4605      	mov	r5, r0
 800afac:	4575      	cmp	r5, lr
 800afae:	d30e      	bcc.n	800afce <__mdiff+0xea>
 800afb0:	f10e 0103 	add.w	r1, lr, #3
 800afb4:	1a09      	subs	r1, r1, r0
 800afb6:	f021 0103 	bic.w	r1, r1, #3
 800afba:	3803      	subs	r0, #3
 800afbc:	4586      	cmp	lr, r0
 800afbe:	bf38      	it	cc
 800afc0:	2100      	movcc	r1, #0
 800afc2:	4419      	add	r1, r3
 800afc4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800afc8:	b18b      	cbz	r3, 800afee <__mdiff+0x10a>
 800afca:	6117      	str	r7, [r2, #16]
 800afcc:	e7a4      	b.n	800af18 <__mdiff+0x34>
 800afce:	f855 8b04 	ldr.w	r8, [r5], #4
 800afd2:	fa1f f188 	uxth.w	r1, r8
 800afd6:	4461      	add	r1, ip
 800afd8:	140c      	asrs	r4, r1, #16
 800afda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800afde:	b289      	uxth	r1, r1
 800afe0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800afe4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800afe8:	f846 1b04 	str.w	r1, [r6], #4
 800afec:	e7de      	b.n	800afac <__mdiff+0xc8>
 800afee:	3f01      	subs	r7, #1
 800aff0:	e7e8      	b.n	800afc4 <__mdiff+0xe0>
 800aff2:	bf00      	nop
 800aff4:	0800c4a7 	.word	0x0800c4a7
 800aff8:	0800c534 	.word	0x0800c534

0800affc <__ulp>:
 800affc:	4b11      	ldr	r3, [pc, #68]	; (800b044 <__ulp+0x48>)
 800affe:	400b      	ands	r3, r1
 800b000:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b004:	2b00      	cmp	r3, #0
 800b006:	dd02      	ble.n	800b00e <__ulp+0x12>
 800b008:	2000      	movs	r0, #0
 800b00a:	4619      	mov	r1, r3
 800b00c:	4770      	bx	lr
 800b00e:	425b      	negs	r3, r3
 800b010:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b014:	f04f 0000 	mov.w	r0, #0
 800b018:	f04f 0100 	mov.w	r1, #0
 800b01c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b020:	da04      	bge.n	800b02c <__ulp+0x30>
 800b022:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b026:	fa43 f102 	asr.w	r1, r3, r2
 800b02a:	4770      	bx	lr
 800b02c:	f1a2 0314 	sub.w	r3, r2, #20
 800b030:	2b1e      	cmp	r3, #30
 800b032:	bfd6      	itet	le
 800b034:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b038:	2301      	movgt	r3, #1
 800b03a:	fa22 f303 	lsrle.w	r3, r2, r3
 800b03e:	4618      	mov	r0, r3
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	7ff00000 	.word	0x7ff00000

0800b048 <__b2d>:
 800b048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b04c:	6907      	ldr	r7, [r0, #16]
 800b04e:	f100 0914 	add.w	r9, r0, #20
 800b052:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b056:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b05a:	f1a7 0804 	sub.w	r8, r7, #4
 800b05e:	4630      	mov	r0, r6
 800b060:	f7ff fd4e 	bl	800ab00 <__hi0bits>
 800b064:	f1c0 0320 	rsb	r3, r0, #32
 800b068:	280a      	cmp	r0, #10
 800b06a:	600b      	str	r3, [r1, #0]
 800b06c:	491f      	ldr	r1, [pc, #124]	; (800b0ec <__b2d+0xa4>)
 800b06e:	dc17      	bgt.n	800b0a0 <__b2d+0x58>
 800b070:	45c1      	cmp	r9, r8
 800b072:	bf28      	it	cs
 800b074:	2200      	movcs	r2, #0
 800b076:	f1c0 0c0b 	rsb	ip, r0, #11
 800b07a:	fa26 f30c 	lsr.w	r3, r6, ip
 800b07e:	bf38      	it	cc
 800b080:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b084:	ea43 0501 	orr.w	r5, r3, r1
 800b088:	f100 0315 	add.w	r3, r0, #21
 800b08c:	fa06 f303 	lsl.w	r3, r6, r3
 800b090:	fa22 f20c 	lsr.w	r2, r2, ip
 800b094:	ea43 0402 	orr.w	r4, r3, r2
 800b098:	4620      	mov	r0, r4
 800b09a:	4629      	mov	r1, r5
 800b09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a0:	45c1      	cmp	r9, r8
 800b0a2:	bf2e      	itee	cs
 800b0a4:	2200      	movcs	r2, #0
 800b0a6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b0aa:	f1a7 0808 	subcc.w	r8, r7, #8
 800b0ae:	f1b0 030b 	subs.w	r3, r0, #11
 800b0b2:	d016      	beq.n	800b0e2 <__b2d+0x9a>
 800b0b4:	f1c3 0720 	rsb	r7, r3, #32
 800b0b8:	fa22 f107 	lsr.w	r1, r2, r7
 800b0bc:	45c8      	cmp	r8, r9
 800b0be:	fa06 f603 	lsl.w	r6, r6, r3
 800b0c2:	ea46 0601 	orr.w	r6, r6, r1
 800b0c6:	bf94      	ite	ls
 800b0c8:	2100      	movls	r1, #0
 800b0ca:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b0ce:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b0d2:	fa02 f003 	lsl.w	r0, r2, r3
 800b0d6:	40f9      	lsrs	r1, r7
 800b0d8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b0dc:	ea40 0401 	orr.w	r4, r0, r1
 800b0e0:	e7da      	b.n	800b098 <__b2d+0x50>
 800b0e2:	4614      	mov	r4, r2
 800b0e4:	ea46 0501 	orr.w	r5, r6, r1
 800b0e8:	e7d6      	b.n	800b098 <__b2d+0x50>
 800b0ea:	bf00      	nop
 800b0ec:	3ff00000 	.word	0x3ff00000

0800b0f0 <__d2b>:
 800b0f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b0fa:	4690      	mov	r8, r2
 800b0fc:	461d      	mov	r5, r3
 800b0fe:	f7ff fc0d 	bl	800a91c <_Balloc>
 800b102:	4604      	mov	r4, r0
 800b104:	b930      	cbnz	r0, 800b114 <__d2b+0x24>
 800b106:	4602      	mov	r2, r0
 800b108:	f240 310a 	movw	r1, #778	; 0x30a
 800b10c:	4b24      	ldr	r3, [pc, #144]	; (800b1a0 <__d2b+0xb0>)
 800b10e:	4825      	ldr	r0, [pc, #148]	; (800b1a4 <__d2b+0xb4>)
 800b110:	f000 fb40 	bl	800b794 <__assert_func>
 800b114:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b118:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b11c:	bb2d      	cbnz	r5, 800b16a <__d2b+0x7a>
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	f1b8 0300 	subs.w	r3, r8, #0
 800b124:	d026      	beq.n	800b174 <__d2b+0x84>
 800b126:	4668      	mov	r0, sp
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	f7ff fd09 	bl	800ab40 <__lo0bits>
 800b12e:	9900      	ldr	r1, [sp, #0]
 800b130:	b1f0      	cbz	r0, 800b170 <__d2b+0x80>
 800b132:	9a01      	ldr	r2, [sp, #4]
 800b134:	f1c0 0320 	rsb	r3, r0, #32
 800b138:	fa02 f303 	lsl.w	r3, r2, r3
 800b13c:	430b      	orrs	r3, r1
 800b13e:	40c2      	lsrs	r2, r0
 800b140:	6163      	str	r3, [r4, #20]
 800b142:	9201      	str	r2, [sp, #4]
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	bf14      	ite	ne
 800b14a:	2102      	movne	r1, #2
 800b14c:	2101      	moveq	r1, #1
 800b14e:	61a3      	str	r3, [r4, #24]
 800b150:	6121      	str	r1, [r4, #16]
 800b152:	b1c5      	cbz	r5, 800b186 <__d2b+0x96>
 800b154:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b158:	4405      	add	r5, r0
 800b15a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b15e:	603d      	str	r5, [r7, #0]
 800b160:	6030      	str	r0, [r6, #0]
 800b162:	4620      	mov	r0, r4
 800b164:	b002      	add	sp, #8
 800b166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b16a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b16e:	e7d6      	b.n	800b11e <__d2b+0x2e>
 800b170:	6161      	str	r1, [r4, #20]
 800b172:	e7e7      	b.n	800b144 <__d2b+0x54>
 800b174:	a801      	add	r0, sp, #4
 800b176:	f7ff fce3 	bl	800ab40 <__lo0bits>
 800b17a:	2101      	movs	r1, #1
 800b17c:	9b01      	ldr	r3, [sp, #4]
 800b17e:	6121      	str	r1, [r4, #16]
 800b180:	6163      	str	r3, [r4, #20]
 800b182:	3020      	adds	r0, #32
 800b184:	e7e5      	b.n	800b152 <__d2b+0x62>
 800b186:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b18a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b18e:	6038      	str	r0, [r7, #0]
 800b190:	6918      	ldr	r0, [r3, #16]
 800b192:	f7ff fcb5 	bl	800ab00 <__hi0bits>
 800b196:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b19a:	6031      	str	r1, [r6, #0]
 800b19c:	e7e1      	b.n	800b162 <__d2b+0x72>
 800b19e:	bf00      	nop
 800b1a0:	0800c4a7 	.word	0x0800c4a7
 800b1a4:	0800c534 	.word	0x0800c534

0800b1a8 <__ratio>:
 800b1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	4688      	mov	r8, r1
 800b1ae:	4669      	mov	r1, sp
 800b1b0:	4681      	mov	r9, r0
 800b1b2:	f7ff ff49 	bl	800b048 <__b2d>
 800b1b6:	460f      	mov	r7, r1
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	460d      	mov	r5, r1
 800b1bc:	4640      	mov	r0, r8
 800b1be:	a901      	add	r1, sp, #4
 800b1c0:	f7ff ff42 	bl	800b048 <__b2d>
 800b1c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b1cc:	468b      	mov	fp, r1
 800b1ce:	eba3 0c02 	sub.w	ip, r3, r2
 800b1d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b1d6:	1a9b      	subs	r3, r3, r2
 800b1d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	bfd5      	itete	le
 800b1e0:	460a      	movle	r2, r1
 800b1e2:	462a      	movgt	r2, r5
 800b1e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1e8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b1ec:	bfd8      	it	le
 800b1ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b1f2:	465b      	mov	r3, fp
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f7f5 fb4b 	bl	8000894 <__aeabi_ddiv>
 800b1fe:	b003      	add	sp, #12
 800b200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b204 <__copybits>:
 800b204:	3901      	subs	r1, #1
 800b206:	b570      	push	{r4, r5, r6, lr}
 800b208:	1149      	asrs	r1, r1, #5
 800b20a:	6914      	ldr	r4, [r2, #16]
 800b20c:	3101      	adds	r1, #1
 800b20e:	f102 0314 	add.w	r3, r2, #20
 800b212:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b216:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b21a:	1f05      	subs	r5, r0, #4
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	d30c      	bcc.n	800b23a <__copybits+0x36>
 800b220:	1aa3      	subs	r3, r4, r2
 800b222:	3b11      	subs	r3, #17
 800b224:	f023 0303 	bic.w	r3, r3, #3
 800b228:	3211      	adds	r2, #17
 800b22a:	42a2      	cmp	r2, r4
 800b22c:	bf88      	it	hi
 800b22e:	2300      	movhi	r3, #0
 800b230:	4418      	add	r0, r3
 800b232:	2300      	movs	r3, #0
 800b234:	4288      	cmp	r0, r1
 800b236:	d305      	bcc.n	800b244 <__copybits+0x40>
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b23e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b242:	e7eb      	b.n	800b21c <__copybits+0x18>
 800b244:	f840 3b04 	str.w	r3, [r0], #4
 800b248:	e7f4      	b.n	800b234 <__copybits+0x30>

0800b24a <__any_on>:
 800b24a:	f100 0214 	add.w	r2, r0, #20
 800b24e:	6900      	ldr	r0, [r0, #16]
 800b250:	114b      	asrs	r3, r1, #5
 800b252:	4298      	cmp	r0, r3
 800b254:	b510      	push	{r4, lr}
 800b256:	db11      	blt.n	800b27c <__any_on+0x32>
 800b258:	dd0a      	ble.n	800b270 <__any_on+0x26>
 800b25a:	f011 011f 	ands.w	r1, r1, #31
 800b25e:	d007      	beq.n	800b270 <__any_on+0x26>
 800b260:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b264:	fa24 f001 	lsr.w	r0, r4, r1
 800b268:	fa00 f101 	lsl.w	r1, r0, r1
 800b26c:	428c      	cmp	r4, r1
 800b26e:	d10b      	bne.n	800b288 <__any_on+0x3e>
 800b270:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b274:	4293      	cmp	r3, r2
 800b276:	d803      	bhi.n	800b280 <__any_on+0x36>
 800b278:	2000      	movs	r0, #0
 800b27a:	bd10      	pop	{r4, pc}
 800b27c:	4603      	mov	r3, r0
 800b27e:	e7f7      	b.n	800b270 <__any_on+0x26>
 800b280:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b284:	2900      	cmp	r1, #0
 800b286:	d0f5      	beq.n	800b274 <__any_on+0x2a>
 800b288:	2001      	movs	r0, #1
 800b28a:	e7f6      	b.n	800b27a <__any_on+0x30>

0800b28c <_calloc_r>:
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	fba1 5402 	umull	r5, r4, r1, r2
 800b292:	b934      	cbnz	r4, 800b2a2 <_calloc_r+0x16>
 800b294:	4629      	mov	r1, r5
 800b296:	f000 f875 	bl	800b384 <_malloc_r>
 800b29a:	4606      	mov	r6, r0
 800b29c:	b928      	cbnz	r0, 800b2aa <_calloc_r+0x1e>
 800b29e:	4630      	mov	r0, r6
 800b2a0:	bd70      	pop	{r4, r5, r6, pc}
 800b2a2:	220c      	movs	r2, #12
 800b2a4:	2600      	movs	r6, #0
 800b2a6:	6002      	str	r2, [r0, #0]
 800b2a8:	e7f9      	b.n	800b29e <_calloc_r+0x12>
 800b2aa:	462a      	mov	r2, r5
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f7fc fe7b 	bl	8007fa8 <memset>
 800b2b2:	e7f4      	b.n	800b29e <_calloc_r+0x12>

0800b2b4 <_free_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	2900      	cmp	r1, #0
 800b2ba:	d040      	beq.n	800b33e <_free_r+0x8a>
 800b2bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c0:	1f0c      	subs	r4, r1, #4
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bfb8      	it	lt
 800b2c6:	18e4      	addlt	r4, r4, r3
 800b2c8:	f000 faae 	bl	800b828 <__malloc_lock>
 800b2cc:	4a1c      	ldr	r2, [pc, #112]	; (800b340 <_free_r+0x8c>)
 800b2ce:	6813      	ldr	r3, [r2, #0]
 800b2d0:	b933      	cbnz	r3, 800b2e0 <_free_r+0x2c>
 800b2d2:	6063      	str	r3, [r4, #4]
 800b2d4:	6014      	str	r4, [r2, #0]
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2dc:	f000 baaa 	b.w	800b834 <__malloc_unlock>
 800b2e0:	42a3      	cmp	r3, r4
 800b2e2:	d908      	bls.n	800b2f6 <_free_r+0x42>
 800b2e4:	6820      	ldr	r0, [r4, #0]
 800b2e6:	1821      	adds	r1, r4, r0
 800b2e8:	428b      	cmp	r3, r1
 800b2ea:	bf01      	itttt	eq
 800b2ec:	6819      	ldreq	r1, [r3, #0]
 800b2ee:	685b      	ldreq	r3, [r3, #4]
 800b2f0:	1809      	addeq	r1, r1, r0
 800b2f2:	6021      	streq	r1, [r4, #0]
 800b2f4:	e7ed      	b.n	800b2d2 <_free_r+0x1e>
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	b10b      	cbz	r3, 800b300 <_free_r+0x4c>
 800b2fc:	42a3      	cmp	r3, r4
 800b2fe:	d9fa      	bls.n	800b2f6 <_free_r+0x42>
 800b300:	6811      	ldr	r1, [r2, #0]
 800b302:	1850      	adds	r0, r2, r1
 800b304:	42a0      	cmp	r0, r4
 800b306:	d10b      	bne.n	800b320 <_free_r+0x6c>
 800b308:	6820      	ldr	r0, [r4, #0]
 800b30a:	4401      	add	r1, r0
 800b30c:	1850      	adds	r0, r2, r1
 800b30e:	4283      	cmp	r3, r0
 800b310:	6011      	str	r1, [r2, #0]
 800b312:	d1e0      	bne.n	800b2d6 <_free_r+0x22>
 800b314:	6818      	ldr	r0, [r3, #0]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	4401      	add	r1, r0
 800b31a:	6011      	str	r1, [r2, #0]
 800b31c:	6053      	str	r3, [r2, #4]
 800b31e:	e7da      	b.n	800b2d6 <_free_r+0x22>
 800b320:	d902      	bls.n	800b328 <_free_r+0x74>
 800b322:	230c      	movs	r3, #12
 800b324:	602b      	str	r3, [r5, #0]
 800b326:	e7d6      	b.n	800b2d6 <_free_r+0x22>
 800b328:	6820      	ldr	r0, [r4, #0]
 800b32a:	1821      	adds	r1, r4, r0
 800b32c:	428b      	cmp	r3, r1
 800b32e:	bf01      	itttt	eq
 800b330:	6819      	ldreq	r1, [r3, #0]
 800b332:	685b      	ldreq	r3, [r3, #4]
 800b334:	1809      	addeq	r1, r1, r0
 800b336:	6021      	streq	r1, [r4, #0]
 800b338:	6063      	str	r3, [r4, #4]
 800b33a:	6054      	str	r4, [r2, #4]
 800b33c:	e7cb      	b.n	800b2d6 <_free_r+0x22>
 800b33e:	bd38      	pop	{r3, r4, r5, pc}
 800b340:	200007dc 	.word	0x200007dc

0800b344 <sbrk_aligned>:
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	4e0e      	ldr	r6, [pc, #56]	; (800b380 <sbrk_aligned+0x3c>)
 800b348:	460c      	mov	r4, r1
 800b34a:	6831      	ldr	r1, [r6, #0]
 800b34c:	4605      	mov	r5, r0
 800b34e:	b911      	cbnz	r1, 800b356 <sbrk_aligned+0x12>
 800b350:	f000 f9ee 	bl	800b730 <_sbrk_r>
 800b354:	6030      	str	r0, [r6, #0]
 800b356:	4621      	mov	r1, r4
 800b358:	4628      	mov	r0, r5
 800b35a:	f000 f9e9 	bl	800b730 <_sbrk_r>
 800b35e:	1c43      	adds	r3, r0, #1
 800b360:	d00a      	beq.n	800b378 <sbrk_aligned+0x34>
 800b362:	1cc4      	adds	r4, r0, #3
 800b364:	f024 0403 	bic.w	r4, r4, #3
 800b368:	42a0      	cmp	r0, r4
 800b36a:	d007      	beq.n	800b37c <sbrk_aligned+0x38>
 800b36c:	1a21      	subs	r1, r4, r0
 800b36e:	4628      	mov	r0, r5
 800b370:	f000 f9de 	bl	800b730 <_sbrk_r>
 800b374:	3001      	adds	r0, #1
 800b376:	d101      	bne.n	800b37c <sbrk_aligned+0x38>
 800b378:	f04f 34ff 	mov.w	r4, #4294967295
 800b37c:	4620      	mov	r0, r4
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	200007e0 	.word	0x200007e0

0800b384 <_malloc_r>:
 800b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b388:	1ccd      	adds	r5, r1, #3
 800b38a:	f025 0503 	bic.w	r5, r5, #3
 800b38e:	3508      	adds	r5, #8
 800b390:	2d0c      	cmp	r5, #12
 800b392:	bf38      	it	cc
 800b394:	250c      	movcc	r5, #12
 800b396:	2d00      	cmp	r5, #0
 800b398:	4607      	mov	r7, r0
 800b39a:	db01      	blt.n	800b3a0 <_malloc_r+0x1c>
 800b39c:	42a9      	cmp	r1, r5
 800b39e:	d905      	bls.n	800b3ac <_malloc_r+0x28>
 800b3a0:	230c      	movs	r3, #12
 800b3a2:	2600      	movs	r6, #0
 800b3a4:	603b      	str	r3, [r7, #0]
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ac:	4e2e      	ldr	r6, [pc, #184]	; (800b468 <_malloc_r+0xe4>)
 800b3ae:	f000 fa3b 	bl	800b828 <__malloc_lock>
 800b3b2:	6833      	ldr	r3, [r6, #0]
 800b3b4:	461c      	mov	r4, r3
 800b3b6:	bb34      	cbnz	r4, 800b406 <_malloc_r+0x82>
 800b3b8:	4629      	mov	r1, r5
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	f7ff ffc2 	bl	800b344 <sbrk_aligned>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	d14d      	bne.n	800b462 <_malloc_r+0xde>
 800b3c6:	6834      	ldr	r4, [r6, #0]
 800b3c8:	4626      	mov	r6, r4
 800b3ca:	2e00      	cmp	r6, #0
 800b3cc:	d140      	bne.n	800b450 <_malloc_r+0xcc>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	eb04 0803 	add.w	r8, r4, r3
 800b3d8:	f000 f9aa 	bl	800b730 <_sbrk_r>
 800b3dc:	4580      	cmp	r8, r0
 800b3de:	d13a      	bne.n	800b456 <_malloc_r+0xd2>
 800b3e0:	6821      	ldr	r1, [r4, #0]
 800b3e2:	3503      	adds	r5, #3
 800b3e4:	1a6d      	subs	r5, r5, r1
 800b3e6:	f025 0503 	bic.w	r5, r5, #3
 800b3ea:	3508      	adds	r5, #8
 800b3ec:	2d0c      	cmp	r5, #12
 800b3ee:	bf38      	it	cc
 800b3f0:	250c      	movcc	r5, #12
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	f7ff ffa5 	bl	800b344 <sbrk_aligned>
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d02b      	beq.n	800b456 <_malloc_r+0xd2>
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	442b      	add	r3, r5
 800b402:	6023      	str	r3, [r4, #0]
 800b404:	e00e      	b.n	800b424 <_malloc_r+0xa0>
 800b406:	6822      	ldr	r2, [r4, #0]
 800b408:	1b52      	subs	r2, r2, r5
 800b40a:	d41e      	bmi.n	800b44a <_malloc_r+0xc6>
 800b40c:	2a0b      	cmp	r2, #11
 800b40e:	d916      	bls.n	800b43e <_malloc_r+0xba>
 800b410:	1961      	adds	r1, r4, r5
 800b412:	42a3      	cmp	r3, r4
 800b414:	6025      	str	r5, [r4, #0]
 800b416:	bf18      	it	ne
 800b418:	6059      	strne	r1, [r3, #4]
 800b41a:	6863      	ldr	r3, [r4, #4]
 800b41c:	bf08      	it	eq
 800b41e:	6031      	streq	r1, [r6, #0]
 800b420:	5162      	str	r2, [r4, r5]
 800b422:	604b      	str	r3, [r1, #4]
 800b424:	4638      	mov	r0, r7
 800b426:	f104 060b 	add.w	r6, r4, #11
 800b42a:	f000 fa03 	bl	800b834 <__malloc_unlock>
 800b42e:	f026 0607 	bic.w	r6, r6, #7
 800b432:	1d23      	adds	r3, r4, #4
 800b434:	1af2      	subs	r2, r6, r3
 800b436:	d0b6      	beq.n	800b3a6 <_malloc_r+0x22>
 800b438:	1b9b      	subs	r3, r3, r6
 800b43a:	50a3      	str	r3, [r4, r2]
 800b43c:	e7b3      	b.n	800b3a6 <_malloc_r+0x22>
 800b43e:	6862      	ldr	r2, [r4, #4]
 800b440:	42a3      	cmp	r3, r4
 800b442:	bf0c      	ite	eq
 800b444:	6032      	streq	r2, [r6, #0]
 800b446:	605a      	strne	r2, [r3, #4]
 800b448:	e7ec      	b.n	800b424 <_malloc_r+0xa0>
 800b44a:	4623      	mov	r3, r4
 800b44c:	6864      	ldr	r4, [r4, #4]
 800b44e:	e7b2      	b.n	800b3b6 <_malloc_r+0x32>
 800b450:	4634      	mov	r4, r6
 800b452:	6876      	ldr	r6, [r6, #4]
 800b454:	e7b9      	b.n	800b3ca <_malloc_r+0x46>
 800b456:	230c      	movs	r3, #12
 800b458:	4638      	mov	r0, r7
 800b45a:	603b      	str	r3, [r7, #0]
 800b45c:	f000 f9ea 	bl	800b834 <__malloc_unlock>
 800b460:	e7a1      	b.n	800b3a6 <_malloc_r+0x22>
 800b462:	6025      	str	r5, [r4, #0]
 800b464:	e7de      	b.n	800b424 <_malloc_r+0xa0>
 800b466:	bf00      	nop
 800b468:	200007dc 	.word	0x200007dc

0800b46c <__ssputs_r>:
 800b46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	688e      	ldr	r6, [r1, #8]
 800b472:	4682      	mov	sl, r0
 800b474:	429e      	cmp	r6, r3
 800b476:	460c      	mov	r4, r1
 800b478:	4690      	mov	r8, r2
 800b47a:	461f      	mov	r7, r3
 800b47c:	d838      	bhi.n	800b4f0 <__ssputs_r+0x84>
 800b47e:	898a      	ldrh	r2, [r1, #12]
 800b480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b484:	d032      	beq.n	800b4ec <__ssputs_r+0x80>
 800b486:	6825      	ldr	r5, [r4, #0]
 800b488:	6909      	ldr	r1, [r1, #16]
 800b48a:	3301      	adds	r3, #1
 800b48c:	eba5 0901 	sub.w	r9, r5, r1
 800b490:	6965      	ldr	r5, [r4, #20]
 800b492:	444b      	add	r3, r9
 800b494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b498:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b49c:	106d      	asrs	r5, r5, #1
 800b49e:	429d      	cmp	r5, r3
 800b4a0:	bf38      	it	cc
 800b4a2:	461d      	movcc	r5, r3
 800b4a4:	0553      	lsls	r3, r2, #21
 800b4a6:	d531      	bpl.n	800b50c <__ssputs_r+0xa0>
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f7ff ff6b 	bl	800b384 <_malloc_r>
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	b950      	cbnz	r0, 800b4c8 <__ssputs_r+0x5c>
 800b4b2:	230c      	movs	r3, #12
 800b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b8:	f8ca 3000 	str.w	r3, [sl]
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4c2:	81a3      	strh	r3, [r4, #12]
 800b4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c8:	464a      	mov	r2, r9
 800b4ca:	6921      	ldr	r1, [r4, #16]
 800b4cc:	f7ff fa18 	bl	800a900 <memcpy>
 800b4d0:	89a3      	ldrh	r3, [r4, #12]
 800b4d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4da:	81a3      	strh	r3, [r4, #12]
 800b4dc:	6126      	str	r6, [r4, #16]
 800b4de:	444e      	add	r6, r9
 800b4e0:	6026      	str	r6, [r4, #0]
 800b4e2:	463e      	mov	r6, r7
 800b4e4:	6165      	str	r5, [r4, #20]
 800b4e6:	eba5 0509 	sub.w	r5, r5, r9
 800b4ea:	60a5      	str	r5, [r4, #8]
 800b4ec:	42be      	cmp	r6, r7
 800b4ee:	d900      	bls.n	800b4f2 <__ssputs_r+0x86>
 800b4f0:	463e      	mov	r6, r7
 800b4f2:	4632      	mov	r2, r6
 800b4f4:	4641      	mov	r1, r8
 800b4f6:	6820      	ldr	r0, [r4, #0]
 800b4f8:	f000 f97c 	bl	800b7f4 <memmove>
 800b4fc:	68a3      	ldr	r3, [r4, #8]
 800b4fe:	2000      	movs	r0, #0
 800b500:	1b9b      	subs	r3, r3, r6
 800b502:	60a3      	str	r3, [r4, #8]
 800b504:	6823      	ldr	r3, [r4, #0]
 800b506:	4433      	add	r3, r6
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	e7db      	b.n	800b4c4 <__ssputs_r+0x58>
 800b50c:	462a      	mov	r2, r5
 800b50e:	f000 f997 	bl	800b840 <_realloc_r>
 800b512:	4606      	mov	r6, r0
 800b514:	2800      	cmp	r0, #0
 800b516:	d1e1      	bne.n	800b4dc <__ssputs_r+0x70>
 800b518:	4650      	mov	r0, sl
 800b51a:	6921      	ldr	r1, [r4, #16]
 800b51c:	f7ff feca 	bl	800b2b4 <_free_r>
 800b520:	e7c7      	b.n	800b4b2 <__ssputs_r+0x46>
	...

0800b524 <_svfiprintf_r>:
 800b524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b528:	4698      	mov	r8, r3
 800b52a:	898b      	ldrh	r3, [r1, #12]
 800b52c:	4607      	mov	r7, r0
 800b52e:	061b      	lsls	r3, r3, #24
 800b530:	460d      	mov	r5, r1
 800b532:	4614      	mov	r4, r2
 800b534:	b09d      	sub	sp, #116	; 0x74
 800b536:	d50e      	bpl.n	800b556 <_svfiprintf_r+0x32>
 800b538:	690b      	ldr	r3, [r1, #16]
 800b53a:	b963      	cbnz	r3, 800b556 <_svfiprintf_r+0x32>
 800b53c:	2140      	movs	r1, #64	; 0x40
 800b53e:	f7ff ff21 	bl	800b384 <_malloc_r>
 800b542:	6028      	str	r0, [r5, #0]
 800b544:	6128      	str	r0, [r5, #16]
 800b546:	b920      	cbnz	r0, 800b552 <_svfiprintf_r+0x2e>
 800b548:	230c      	movs	r3, #12
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	f04f 30ff 	mov.w	r0, #4294967295
 800b550:	e0d1      	b.n	800b6f6 <_svfiprintf_r+0x1d2>
 800b552:	2340      	movs	r3, #64	; 0x40
 800b554:	616b      	str	r3, [r5, #20]
 800b556:	2300      	movs	r3, #0
 800b558:	9309      	str	r3, [sp, #36]	; 0x24
 800b55a:	2320      	movs	r3, #32
 800b55c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b560:	2330      	movs	r3, #48	; 0x30
 800b562:	f04f 0901 	mov.w	r9, #1
 800b566:	f8cd 800c 	str.w	r8, [sp, #12]
 800b56a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b710 <_svfiprintf_r+0x1ec>
 800b56e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b572:	4623      	mov	r3, r4
 800b574:	469a      	mov	sl, r3
 800b576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b57a:	b10a      	cbz	r2, 800b580 <_svfiprintf_r+0x5c>
 800b57c:	2a25      	cmp	r2, #37	; 0x25
 800b57e:	d1f9      	bne.n	800b574 <_svfiprintf_r+0x50>
 800b580:	ebba 0b04 	subs.w	fp, sl, r4
 800b584:	d00b      	beq.n	800b59e <_svfiprintf_r+0x7a>
 800b586:	465b      	mov	r3, fp
 800b588:	4622      	mov	r2, r4
 800b58a:	4629      	mov	r1, r5
 800b58c:	4638      	mov	r0, r7
 800b58e:	f7ff ff6d 	bl	800b46c <__ssputs_r>
 800b592:	3001      	adds	r0, #1
 800b594:	f000 80aa 	beq.w	800b6ec <_svfiprintf_r+0x1c8>
 800b598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b59a:	445a      	add	r2, fp
 800b59c:	9209      	str	r2, [sp, #36]	; 0x24
 800b59e:	f89a 3000 	ldrb.w	r3, [sl]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 80a2 	beq.w	800b6ec <_svfiprintf_r+0x1c8>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5b2:	f10a 0a01 	add.w	sl, sl, #1
 800b5b6:	9304      	str	r3, [sp, #16]
 800b5b8:	9307      	str	r3, [sp, #28]
 800b5ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5be:	931a      	str	r3, [sp, #104]	; 0x68
 800b5c0:	4654      	mov	r4, sl
 800b5c2:	2205      	movs	r2, #5
 800b5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5c8:	4851      	ldr	r0, [pc, #324]	; (800b710 <_svfiprintf_r+0x1ec>)
 800b5ca:	f7ff f98b 	bl	800a8e4 <memchr>
 800b5ce:	9a04      	ldr	r2, [sp, #16]
 800b5d0:	b9d8      	cbnz	r0, 800b60a <_svfiprintf_r+0xe6>
 800b5d2:	06d0      	lsls	r0, r2, #27
 800b5d4:	bf44      	itt	mi
 800b5d6:	2320      	movmi	r3, #32
 800b5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5dc:	0711      	lsls	r1, r2, #28
 800b5de:	bf44      	itt	mi
 800b5e0:	232b      	movmi	r3, #43	; 0x2b
 800b5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b5ec:	d015      	beq.n	800b61a <_svfiprintf_r+0xf6>
 800b5ee:	4654      	mov	r4, sl
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	f04f 0c0a 	mov.w	ip, #10
 800b5f6:	9a07      	ldr	r2, [sp, #28]
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5fe:	3b30      	subs	r3, #48	; 0x30
 800b600:	2b09      	cmp	r3, #9
 800b602:	d94e      	bls.n	800b6a2 <_svfiprintf_r+0x17e>
 800b604:	b1b0      	cbz	r0, 800b634 <_svfiprintf_r+0x110>
 800b606:	9207      	str	r2, [sp, #28]
 800b608:	e014      	b.n	800b634 <_svfiprintf_r+0x110>
 800b60a:	eba0 0308 	sub.w	r3, r0, r8
 800b60e:	fa09 f303 	lsl.w	r3, r9, r3
 800b612:	4313      	orrs	r3, r2
 800b614:	46a2      	mov	sl, r4
 800b616:	9304      	str	r3, [sp, #16]
 800b618:	e7d2      	b.n	800b5c0 <_svfiprintf_r+0x9c>
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	1d19      	adds	r1, r3, #4
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	9103      	str	r1, [sp, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	bfbb      	ittet	lt
 800b626:	425b      	neglt	r3, r3
 800b628:	f042 0202 	orrlt.w	r2, r2, #2
 800b62c:	9307      	strge	r3, [sp, #28]
 800b62e:	9307      	strlt	r3, [sp, #28]
 800b630:	bfb8      	it	lt
 800b632:	9204      	strlt	r2, [sp, #16]
 800b634:	7823      	ldrb	r3, [r4, #0]
 800b636:	2b2e      	cmp	r3, #46	; 0x2e
 800b638:	d10c      	bne.n	800b654 <_svfiprintf_r+0x130>
 800b63a:	7863      	ldrb	r3, [r4, #1]
 800b63c:	2b2a      	cmp	r3, #42	; 0x2a
 800b63e:	d135      	bne.n	800b6ac <_svfiprintf_r+0x188>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	3402      	adds	r4, #2
 800b644:	1d1a      	adds	r2, r3, #4
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	9203      	str	r2, [sp, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	bfb8      	it	lt
 800b64e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b652:	9305      	str	r3, [sp, #20]
 800b654:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b714 <_svfiprintf_r+0x1f0>
 800b658:	2203      	movs	r2, #3
 800b65a:	4650      	mov	r0, sl
 800b65c:	7821      	ldrb	r1, [r4, #0]
 800b65e:	f7ff f941 	bl	800a8e4 <memchr>
 800b662:	b140      	cbz	r0, 800b676 <_svfiprintf_r+0x152>
 800b664:	2340      	movs	r3, #64	; 0x40
 800b666:	eba0 000a 	sub.w	r0, r0, sl
 800b66a:	fa03 f000 	lsl.w	r0, r3, r0
 800b66e:	9b04      	ldr	r3, [sp, #16]
 800b670:	3401      	adds	r4, #1
 800b672:	4303      	orrs	r3, r0
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b67a:	2206      	movs	r2, #6
 800b67c:	4826      	ldr	r0, [pc, #152]	; (800b718 <_svfiprintf_r+0x1f4>)
 800b67e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b682:	f7ff f92f 	bl	800a8e4 <memchr>
 800b686:	2800      	cmp	r0, #0
 800b688:	d038      	beq.n	800b6fc <_svfiprintf_r+0x1d8>
 800b68a:	4b24      	ldr	r3, [pc, #144]	; (800b71c <_svfiprintf_r+0x1f8>)
 800b68c:	bb1b      	cbnz	r3, 800b6d6 <_svfiprintf_r+0x1b2>
 800b68e:	9b03      	ldr	r3, [sp, #12]
 800b690:	3307      	adds	r3, #7
 800b692:	f023 0307 	bic.w	r3, r3, #7
 800b696:	3308      	adds	r3, #8
 800b698:	9303      	str	r3, [sp, #12]
 800b69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b69c:	4433      	add	r3, r6
 800b69e:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a0:	e767      	b.n	800b572 <_svfiprintf_r+0x4e>
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	2001      	movs	r0, #1
 800b6a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6aa:	e7a5      	b.n	800b5f8 <_svfiprintf_r+0xd4>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f04f 0c0a 	mov.w	ip, #10
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	3401      	adds	r4, #1
 800b6b6:	9305      	str	r3, [sp, #20]
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6be:	3a30      	subs	r2, #48	; 0x30
 800b6c0:	2a09      	cmp	r2, #9
 800b6c2:	d903      	bls.n	800b6cc <_svfiprintf_r+0x1a8>
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d0c5      	beq.n	800b654 <_svfiprintf_r+0x130>
 800b6c8:	9105      	str	r1, [sp, #20]
 800b6ca:	e7c3      	b.n	800b654 <_svfiprintf_r+0x130>
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6d4:	e7f0      	b.n	800b6b8 <_svfiprintf_r+0x194>
 800b6d6:	ab03      	add	r3, sp, #12
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	462a      	mov	r2, r5
 800b6dc:	4638      	mov	r0, r7
 800b6de:	4b10      	ldr	r3, [pc, #64]	; (800b720 <_svfiprintf_r+0x1fc>)
 800b6e0:	a904      	add	r1, sp, #16
 800b6e2:	f7fc fd07 	bl	80080f4 <_printf_float>
 800b6e6:	1c42      	adds	r2, r0, #1
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	d1d6      	bne.n	800b69a <_svfiprintf_r+0x176>
 800b6ec:	89ab      	ldrh	r3, [r5, #12]
 800b6ee:	065b      	lsls	r3, r3, #25
 800b6f0:	f53f af2c 	bmi.w	800b54c <_svfiprintf_r+0x28>
 800b6f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6f6:	b01d      	add	sp, #116	; 0x74
 800b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	ab03      	add	r3, sp, #12
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	462a      	mov	r2, r5
 800b702:	4638      	mov	r0, r7
 800b704:	4b06      	ldr	r3, [pc, #24]	; (800b720 <_svfiprintf_r+0x1fc>)
 800b706:	a904      	add	r1, sp, #16
 800b708:	f7fc ff90 	bl	800862c <_printf_i>
 800b70c:	e7eb      	b.n	800b6e6 <_svfiprintf_r+0x1c2>
 800b70e:	bf00      	nop
 800b710:	0800c68c 	.word	0x0800c68c
 800b714:	0800c692 	.word	0x0800c692
 800b718:	0800c696 	.word	0x0800c696
 800b71c:	080080f5 	.word	0x080080f5
 800b720:	0800b46d 	.word	0x0800b46d

0800b724 <nan>:
 800b724:	2000      	movs	r0, #0
 800b726:	4901      	ldr	r1, [pc, #4]	; (800b72c <nan+0x8>)
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	7ff80000 	.word	0x7ff80000

0800b730 <_sbrk_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	2300      	movs	r3, #0
 800b734:	4d05      	ldr	r5, [pc, #20]	; (800b74c <_sbrk_r+0x1c>)
 800b736:	4604      	mov	r4, r0
 800b738:	4608      	mov	r0, r1
 800b73a:	602b      	str	r3, [r5, #0]
 800b73c:	f7f7 f864 	bl	8002808 <_sbrk>
 800b740:	1c43      	adds	r3, r0, #1
 800b742:	d102      	bne.n	800b74a <_sbrk_r+0x1a>
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	b103      	cbz	r3, 800b74a <_sbrk_r+0x1a>
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	bd38      	pop	{r3, r4, r5, pc}
 800b74c:	200007e4 	.word	0x200007e4

0800b750 <strncmp>:
 800b750:	4603      	mov	r3, r0
 800b752:	b510      	push	{r4, lr}
 800b754:	b172      	cbz	r2, 800b774 <strncmp+0x24>
 800b756:	3901      	subs	r1, #1
 800b758:	1884      	adds	r4, r0, r2
 800b75a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b75e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b762:	4290      	cmp	r0, r2
 800b764:	d101      	bne.n	800b76a <strncmp+0x1a>
 800b766:	42a3      	cmp	r3, r4
 800b768:	d101      	bne.n	800b76e <strncmp+0x1e>
 800b76a:	1a80      	subs	r0, r0, r2
 800b76c:	bd10      	pop	{r4, pc}
 800b76e:	2800      	cmp	r0, #0
 800b770:	d1f3      	bne.n	800b75a <strncmp+0xa>
 800b772:	e7fa      	b.n	800b76a <strncmp+0x1a>
 800b774:	4610      	mov	r0, r2
 800b776:	e7f9      	b.n	800b76c <strncmp+0x1c>

0800b778 <__ascii_wctomb>:
 800b778:	4603      	mov	r3, r0
 800b77a:	4608      	mov	r0, r1
 800b77c:	b141      	cbz	r1, 800b790 <__ascii_wctomb+0x18>
 800b77e:	2aff      	cmp	r2, #255	; 0xff
 800b780:	d904      	bls.n	800b78c <__ascii_wctomb+0x14>
 800b782:	228a      	movs	r2, #138	; 0x8a
 800b784:	f04f 30ff 	mov.w	r0, #4294967295
 800b788:	601a      	str	r2, [r3, #0]
 800b78a:	4770      	bx	lr
 800b78c:	2001      	movs	r0, #1
 800b78e:	700a      	strb	r2, [r1, #0]
 800b790:	4770      	bx	lr
	...

0800b794 <__assert_func>:
 800b794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b796:	4614      	mov	r4, r2
 800b798:	461a      	mov	r2, r3
 800b79a:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <__assert_func+0x2c>)
 800b79c:	4605      	mov	r5, r0
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68d8      	ldr	r0, [r3, #12]
 800b7a2:	b14c      	cbz	r4, 800b7b8 <__assert_func+0x24>
 800b7a4:	4b07      	ldr	r3, [pc, #28]	; (800b7c4 <__assert_func+0x30>)
 800b7a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7aa:	9100      	str	r1, [sp, #0]
 800b7ac:	462b      	mov	r3, r5
 800b7ae:	4906      	ldr	r1, [pc, #24]	; (800b7c8 <__assert_func+0x34>)
 800b7b0:	f000 f80e 	bl	800b7d0 <fiprintf>
 800b7b4:	f000 fa8a 	bl	800bccc <abort>
 800b7b8:	4b04      	ldr	r3, [pc, #16]	; (800b7cc <__assert_func+0x38>)
 800b7ba:	461c      	mov	r4, r3
 800b7bc:	e7f3      	b.n	800b7a6 <__assert_func+0x12>
 800b7be:	bf00      	nop
 800b7c0:	20000024 	.word	0x20000024
 800b7c4:	0800c69d 	.word	0x0800c69d
 800b7c8:	0800c6aa 	.word	0x0800c6aa
 800b7cc:	0800c6d8 	.word	0x0800c6d8

0800b7d0 <fiprintf>:
 800b7d0:	b40e      	push	{r1, r2, r3}
 800b7d2:	b503      	push	{r0, r1, lr}
 800b7d4:	4601      	mov	r1, r0
 800b7d6:	ab03      	add	r3, sp, #12
 800b7d8:	4805      	ldr	r0, [pc, #20]	; (800b7f0 <fiprintf+0x20>)
 800b7da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7de:	6800      	ldr	r0, [r0, #0]
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	f000 f883 	bl	800b8ec <_vfiprintf_r>
 800b7e6:	b002      	add	sp, #8
 800b7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7ec:	b003      	add	sp, #12
 800b7ee:	4770      	bx	lr
 800b7f0:	20000024 	.word	0x20000024

0800b7f4 <memmove>:
 800b7f4:	4288      	cmp	r0, r1
 800b7f6:	b510      	push	{r4, lr}
 800b7f8:	eb01 0402 	add.w	r4, r1, r2
 800b7fc:	d902      	bls.n	800b804 <memmove+0x10>
 800b7fe:	4284      	cmp	r4, r0
 800b800:	4623      	mov	r3, r4
 800b802:	d807      	bhi.n	800b814 <memmove+0x20>
 800b804:	1e43      	subs	r3, r0, #1
 800b806:	42a1      	cmp	r1, r4
 800b808:	d008      	beq.n	800b81c <memmove+0x28>
 800b80a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b80e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b812:	e7f8      	b.n	800b806 <memmove+0x12>
 800b814:	4601      	mov	r1, r0
 800b816:	4402      	add	r2, r0
 800b818:	428a      	cmp	r2, r1
 800b81a:	d100      	bne.n	800b81e <memmove+0x2a>
 800b81c:	bd10      	pop	{r4, pc}
 800b81e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b826:	e7f7      	b.n	800b818 <memmove+0x24>

0800b828 <__malloc_lock>:
 800b828:	4801      	ldr	r0, [pc, #4]	; (800b830 <__malloc_lock+0x8>)
 800b82a:	f000 bc0b 	b.w	800c044 <__retarget_lock_acquire_recursive>
 800b82e:	bf00      	nop
 800b830:	200007e8 	.word	0x200007e8

0800b834 <__malloc_unlock>:
 800b834:	4801      	ldr	r0, [pc, #4]	; (800b83c <__malloc_unlock+0x8>)
 800b836:	f000 bc06 	b.w	800c046 <__retarget_lock_release_recursive>
 800b83a:	bf00      	nop
 800b83c:	200007e8 	.word	0x200007e8

0800b840 <_realloc_r>:
 800b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b844:	4680      	mov	r8, r0
 800b846:	4614      	mov	r4, r2
 800b848:	460e      	mov	r6, r1
 800b84a:	b921      	cbnz	r1, 800b856 <_realloc_r+0x16>
 800b84c:	4611      	mov	r1, r2
 800b84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b852:	f7ff bd97 	b.w	800b384 <_malloc_r>
 800b856:	b92a      	cbnz	r2, 800b864 <_realloc_r+0x24>
 800b858:	f7ff fd2c 	bl	800b2b4 <_free_r>
 800b85c:	4625      	mov	r5, r4
 800b85e:	4628      	mov	r0, r5
 800b860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b864:	f000 fc56 	bl	800c114 <_malloc_usable_size_r>
 800b868:	4284      	cmp	r4, r0
 800b86a:	4607      	mov	r7, r0
 800b86c:	d802      	bhi.n	800b874 <_realloc_r+0x34>
 800b86e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b872:	d812      	bhi.n	800b89a <_realloc_r+0x5a>
 800b874:	4621      	mov	r1, r4
 800b876:	4640      	mov	r0, r8
 800b878:	f7ff fd84 	bl	800b384 <_malloc_r>
 800b87c:	4605      	mov	r5, r0
 800b87e:	2800      	cmp	r0, #0
 800b880:	d0ed      	beq.n	800b85e <_realloc_r+0x1e>
 800b882:	42bc      	cmp	r4, r7
 800b884:	4622      	mov	r2, r4
 800b886:	4631      	mov	r1, r6
 800b888:	bf28      	it	cs
 800b88a:	463a      	movcs	r2, r7
 800b88c:	f7ff f838 	bl	800a900 <memcpy>
 800b890:	4631      	mov	r1, r6
 800b892:	4640      	mov	r0, r8
 800b894:	f7ff fd0e 	bl	800b2b4 <_free_r>
 800b898:	e7e1      	b.n	800b85e <_realloc_r+0x1e>
 800b89a:	4635      	mov	r5, r6
 800b89c:	e7df      	b.n	800b85e <_realloc_r+0x1e>

0800b89e <__sfputc_r>:
 800b89e:	6893      	ldr	r3, [r2, #8]
 800b8a0:	b410      	push	{r4}
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	6093      	str	r3, [r2, #8]
 800b8a8:	da07      	bge.n	800b8ba <__sfputc_r+0x1c>
 800b8aa:	6994      	ldr	r4, [r2, #24]
 800b8ac:	42a3      	cmp	r3, r4
 800b8ae:	db01      	blt.n	800b8b4 <__sfputc_r+0x16>
 800b8b0:	290a      	cmp	r1, #10
 800b8b2:	d102      	bne.n	800b8ba <__sfputc_r+0x1c>
 800b8b4:	bc10      	pop	{r4}
 800b8b6:	f000 b949 	b.w	800bb4c <__swbuf_r>
 800b8ba:	6813      	ldr	r3, [r2, #0]
 800b8bc:	1c58      	adds	r0, r3, #1
 800b8be:	6010      	str	r0, [r2, #0]
 800b8c0:	7019      	strb	r1, [r3, #0]
 800b8c2:	4608      	mov	r0, r1
 800b8c4:	bc10      	pop	{r4}
 800b8c6:	4770      	bx	lr

0800b8c8 <__sfputs_r>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	460f      	mov	r7, r1
 800b8ce:	4614      	mov	r4, r2
 800b8d0:	18d5      	adds	r5, r2, r3
 800b8d2:	42ac      	cmp	r4, r5
 800b8d4:	d101      	bne.n	800b8da <__sfputs_r+0x12>
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e007      	b.n	800b8ea <__sfputs_r+0x22>
 800b8da:	463a      	mov	r2, r7
 800b8dc:	4630      	mov	r0, r6
 800b8de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e2:	f7ff ffdc 	bl	800b89e <__sfputc_r>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	d1f3      	bne.n	800b8d2 <__sfputs_r+0xa>
 800b8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8ec <_vfiprintf_r>:
 800b8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f0:	460d      	mov	r5, r1
 800b8f2:	4614      	mov	r4, r2
 800b8f4:	4698      	mov	r8, r3
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	b09d      	sub	sp, #116	; 0x74
 800b8fa:	b118      	cbz	r0, 800b904 <_vfiprintf_r+0x18>
 800b8fc:	6983      	ldr	r3, [r0, #24]
 800b8fe:	b90b      	cbnz	r3, 800b904 <_vfiprintf_r+0x18>
 800b900:	f000 fb02 	bl	800bf08 <__sinit>
 800b904:	4b89      	ldr	r3, [pc, #548]	; (800bb2c <_vfiprintf_r+0x240>)
 800b906:	429d      	cmp	r5, r3
 800b908:	d11b      	bne.n	800b942 <_vfiprintf_r+0x56>
 800b90a:	6875      	ldr	r5, [r6, #4]
 800b90c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b90e:	07d9      	lsls	r1, r3, #31
 800b910:	d405      	bmi.n	800b91e <_vfiprintf_r+0x32>
 800b912:	89ab      	ldrh	r3, [r5, #12]
 800b914:	059a      	lsls	r2, r3, #22
 800b916:	d402      	bmi.n	800b91e <_vfiprintf_r+0x32>
 800b918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b91a:	f000 fb93 	bl	800c044 <__retarget_lock_acquire_recursive>
 800b91e:	89ab      	ldrh	r3, [r5, #12]
 800b920:	071b      	lsls	r3, r3, #28
 800b922:	d501      	bpl.n	800b928 <_vfiprintf_r+0x3c>
 800b924:	692b      	ldr	r3, [r5, #16]
 800b926:	b9eb      	cbnz	r3, 800b964 <_vfiprintf_r+0x78>
 800b928:	4629      	mov	r1, r5
 800b92a:	4630      	mov	r0, r6
 800b92c:	f000 f960 	bl	800bbf0 <__swsetup_r>
 800b930:	b1c0      	cbz	r0, 800b964 <_vfiprintf_r+0x78>
 800b932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b934:	07dc      	lsls	r4, r3, #31
 800b936:	d50e      	bpl.n	800b956 <_vfiprintf_r+0x6a>
 800b938:	f04f 30ff 	mov.w	r0, #4294967295
 800b93c:	b01d      	add	sp, #116	; 0x74
 800b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b942:	4b7b      	ldr	r3, [pc, #492]	; (800bb30 <_vfiprintf_r+0x244>)
 800b944:	429d      	cmp	r5, r3
 800b946:	d101      	bne.n	800b94c <_vfiprintf_r+0x60>
 800b948:	68b5      	ldr	r5, [r6, #8]
 800b94a:	e7df      	b.n	800b90c <_vfiprintf_r+0x20>
 800b94c:	4b79      	ldr	r3, [pc, #484]	; (800bb34 <_vfiprintf_r+0x248>)
 800b94e:	429d      	cmp	r5, r3
 800b950:	bf08      	it	eq
 800b952:	68f5      	ldreq	r5, [r6, #12]
 800b954:	e7da      	b.n	800b90c <_vfiprintf_r+0x20>
 800b956:	89ab      	ldrh	r3, [r5, #12]
 800b958:	0598      	lsls	r0, r3, #22
 800b95a:	d4ed      	bmi.n	800b938 <_vfiprintf_r+0x4c>
 800b95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b95e:	f000 fb72 	bl	800c046 <__retarget_lock_release_recursive>
 800b962:	e7e9      	b.n	800b938 <_vfiprintf_r+0x4c>
 800b964:	2300      	movs	r3, #0
 800b966:	9309      	str	r3, [sp, #36]	; 0x24
 800b968:	2320      	movs	r3, #32
 800b96a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b96e:	2330      	movs	r3, #48	; 0x30
 800b970:	f04f 0901 	mov.w	r9, #1
 800b974:	f8cd 800c 	str.w	r8, [sp, #12]
 800b978:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bb38 <_vfiprintf_r+0x24c>
 800b97c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b980:	4623      	mov	r3, r4
 800b982:	469a      	mov	sl, r3
 800b984:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b988:	b10a      	cbz	r2, 800b98e <_vfiprintf_r+0xa2>
 800b98a:	2a25      	cmp	r2, #37	; 0x25
 800b98c:	d1f9      	bne.n	800b982 <_vfiprintf_r+0x96>
 800b98e:	ebba 0b04 	subs.w	fp, sl, r4
 800b992:	d00b      	beq.n	800b9ac <_vfiprintf_r+0xc0>
 800b994:	465b      	mov	r3, fp
 800b996:	4622      	mov	r2, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7ff ff94 	bl	800b8c8 <__sfputs_r>
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	f000 80aa 	beq.w	800bafa <_vfiprintf_r+0x20e>
 800b9a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9a8:	445a      	add	r2, fp
 800b9aa:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f000 80a2 	beq.w	800bafa <_vfiprintf_r+0x20e>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c0:	f10a 0a01 	add.w	sl, sl, #1
 800b9c4:	9304      	str	r3, [sp, #16]
 800b9c6:	9307      	str	r3, [sp, #28]
 800b9c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ce:	4654      	mov	r4, sl
 800b9d0:	2205      	movs	r2, #5
 800b9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d6:	4858      	ldr	r0, [pc, #352]	; (800bb38 <_vfiprintf_r+0x24c>)
 800b9d8:	f7fe ff84 	bl	800a8e4 <memchr>
 800b9dc:	9a04      	ldr	r2, [sp, #16]
 800b9de:	b9d8      	cbnz	r0, 800ba18 <_vfiprintf_r+0x12c>
 800b9e0:	06d1      	lsls	r1, r2, #27
 800b9e2:	bf44      	itt	mi
 800b9e4:	2320      	movmi	r3, #32
 800b9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ea:	0713      	lsls	r3, r2, #28
 800b9ec:	bf44      	itt	mi
 800b9ee:	232b      	movmi	r3, #43	; 0x2b
 800b9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9fa:	d015      	beq.n	800ba28 <_vfiprintf_r+0x13c>
 800b9fc:	4654      	mov	r4, sl
 800b9fe:	2000      	movs	r0, #0
 800ba00:	f04f 0c0a 	mov.w	ip, #10
 800ba04:	9a07      	ldr	r2, [sp, #28]
 800ba06:	4621      	mov	r1, r4
 800ba08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba0c:	3b30      	subs	r3, #48	; 0x30
 800ba0e:	2b09      	cmp	r3, #9
 800ba10:	d94e      	bls.n	800bab0 <_vfiprintf_r+0x1c4>
 800ba12:	b1b0      	cbz	r0, 800ba42 <_vfiprintf_r+0x156>
 800ba14:	9207      	str	r2, [sp, #28]
 800ba16:	e014      	b.n	800ba42 <_vfiprintf_r+0x156>
 800ba18:	eba0 0308 	sub.w	r3, r0, r8
 800ba1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba20:	4313      	orrs	r3, r2
 800ba22:	46a2      	mov	sl, r4
 800ba24:	9304      	str	r3, [sp, #16]
 800ba26:	e7d2      	b.n	800b9ce <_vfiprintf_r+0xe2>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	1d19      	adds	r1, r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	9103      	str	r1, [sp, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bfbb      	ittet	lt
 800ba34:	425b      	neglt	r3, r3
 800ba36:	f042 0202 	orrlt.w	r2, r2, #2
 800ba3a:	9307      	strge	r3, [sp, #28]
 800ba3c:	9307      	strlt	r3, [sp, #28]
 800ba3e:	bfb8      	it	lt
 800ba40:	9204      	strlt	r2, [sp, #16]
 800ba42:	7823      	ldrb	r3, [r4, #0]
 800ba44:	2b2e      	cmp	r3, #46	; 0x2e
 800ba46:	d10c      	bne.n	800ba62 <_vfiprintf_r+0x176>
 800ba48:	7863      	ldrb	r3, [r4, #1]
 800ba4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba4c:	d135      	bne.n	800baba <_vfiprintf_r+0x1ce>
 800ba4e:	9b03      	ldr	r3, [sp, #12]
 800ba50:	3402      	adds	r4, #2
 800ba52:	1d1a      	adds	r2, r3, #4
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	9203      	str	r2, [sp, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bfb8      	it	lt
 800ba5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba60:	9305      	str	r3, [sp, #20]
 800ba62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bb3c <_vfiprintf_r+0x250>
 800ba66:	2203      	movs	r2, #3
 800ba68:	4650      	mov	r0, sl
 800ba6a:	7821      	ldrb	r1, [r4, #0]
 800ba6c:	f7fe ff3a 	bl	800a8e4 <memchr>
 800ba70:	b140      	cbz	r0, 800ba84 <_vfiprintf_r+0x198>
 800ba72:	2340      	movs	r3, #64	; 0x40
 800ba74:	eba0 000a 	sub.w	r0, r0, sl
 800ba78:	fa03 f000 	lsl.w	r0, r3, r0
 800ba7c:	9b04      	ldr	r3, [sp, #16]
 800ba7e:	3401      	adds	r4, #1
 800ba80:	4303      	orrs	r3, r0
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba88:	2206      	movs	r2, #6
 800ba8a:	482d      	ldr	r0, [pc, #180]	; (800bb40 <_vfiprintf_r+0x254>)
 800ba8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba90:	f7fe ff28 	bl	800a8e4 <memchr>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d03f      	beq.n	800bb18 <_vfiprintf_r+0x22c>
 800ba98:	4b2a      	ldr	r3, [pc, #168]	; (800bb44 <_vfiprintf_r+0x258>)
 800ba9a:	bb1b      	cbnz	r3, 800bae4 <_vfiprintf_r+0x1f8>
 800ba9c:	9b03      	ldr	r3, [sp, #12]
 800ba9e:	3307      	adds	r3, #7
 800baa0:	f023 0307 	bic.w	r3, r3, #7
 800baa4:	3308      	adds	r3, #8
 800baa6:	9303      	str	r3, [sp, #12]
 800baa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baaa:	443b      	add	r3, r7
 800baac:	9309      	str	r3, [sp, #36]	; 0x24
 800baae:	e767      	b.n	800b980 <_vfiprintf_r+0x94>
 800bab0:	460c      	mov	r4, r1
 800bab2:	2001      	movs	r0, #1
 800bab4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab8:	e7a5      	b.n	800ba06 <_vfiprintf_r+0x11a>
 800baba:	2300      	movs	r3, #0
 800babc:	f04f 0c0a 	mov.w	ip, #10
 800bac0:	4619      	mov	r1, r3
 800bac2:	3401      	adds	r4, #1
 800bac4:	9305      	str	r3, [sp, #20]
 800bac6:	4620      	mov	r0, r4
 800bac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bacc:	3a30      	subs	r2, #48	; 0x30
 800bace:	2a09      	cmp	r2, #9
 800bad0:	d903      	bls.n	800bada <_vfiprintf_r+0x1ee>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d0c5      	beq.n	800ba62 <_vfiprintf_r+0x176>
 800bad6:	9105      	str	r1, [sp, #20]
 800bad8:	e7c3      	b.n	800ba62 <_vfiprintf_r+0x176>
 800bada:	4604      	mov	r4, r0
 800badc:	2301      	movs	r3, #1
 800bade:	fb0c 2101 	mla	r1, ip, r1, r2
 800bae2:	e7f0      	b.n	800bac6 <_vfiprintf_r+0x1da>
 800bae4:	ab03      	add	r3, sp, #12
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	462a      	mov	r2, r5
 800baea:	4630      	mov	r0, r6
 800baec:	4b16      	ldr	r3, [pc, #88]	; (800bb48 <_vfiprintf_r+0x25c>)
 800baee:	a904      	add	r1, sp, #16
 800baf0:	f7fc fb00 	bl	80080f4 <_printf_float>
 800baf4:	4607      	mov	r7, r0
 800baf6:	1c78      	adds	r0, r7, #1
 800baf8:	d1d6      	bne.n	800baa8 <_vfiprintf_r+0x1bc>
 800bafa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bafc:	07d9      	lsls	r1, r3, #31
 800bafe:	d405      	bmi.n	800bb0c <_vfiprintf_r+0x220>
 800bb00:	89ab      	ldrh	r3, [r5, #12]
 800bb02:	059a      	lsls	r2, r3, #22
 800bb04:	d402      	bmi.n	800bb0c <_vfiprintf_r+0x220>
 800bb06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb08:	f000 fa9d 	bl	800c046 <__retarget_lock_release_recursive>
 800bb0c:	89ab      	ldrh	r3, [r5, #12]
 800bb0e:	065b      	lsls	r3, r3, #25
 800bb10:	f53f af12 	bmi.w	800b938 <_vfiprintf_r+0x4c>
 800bb14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb16:	e711      	b.n	800b93c <_vfiprintf_r+0x50>
 800bb18:	ab03      	add	r3, sp, #12
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4b09      	ldr	r3, [pc, #36]	; (800bb48 <_vfiprintf_r+0x25c>)
 800bb22:	a904      	add	r1, sp, #16
 800bb24:	f7fc fd82 	bl	800862c <_printf_i>
 800bb28:	e7e4      	b.n	800baf4 <_vfiprintf_r+0x208>
 800bb2a:	bf00      	nop
 800bb2c:	0800c7fc 	.word	0x0800c7fc
 800bb30:	0800c81c 	.word	0x0800c81c
 800bb34:	0800c7dc 	.word	0x0800c7dc
 800bb38:	0800c68c 	.word	0x0800c68c
 800bb3c:	0800c692 	.word	0x0800c692
 800bb40:	0800c696 	.word	0x0800c696
 800bb44:	080080f5 	.word	0x080080f5
 800bb48:	0800b8c9 	.word	0x0800b8c9

0800bb4c <__swbuf_r>:
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	460e      	mov	r6, r1
 800bb50:	4614      	mov	r4, r2
 800bb52:	4605      	mov	r5, r0
 800bb54:	b118      	cbz	r0, 800bb5e <__swbuf_r+0x12>
 800bb56:	6983      	ldr	r3, [r0, #24]
 800bb58:	b90b      	cbnz	r3, 800bb5e <__swbuf_r+0x12>
 800bb5a:	f000 f9d5 	bl	800bf08 <__sinit>
 800bb5e:	4b21      	ldr	r3, [pc, #132]	; (800bbe4 <__swbuf_r+0x98>)
 800bb60:	429c      	cmp	r4, r3
 800bb62:	d12b      	bne.n	800bbbc <__swbuf_r+0x70>
 800bb64:	686c      	ldr	r4, [r5, #4]
 800bb66:	69a3      	ldr	r3, [r4, #24]
 800bb68:	60a3      	str	r3, [r4, #8]
 800bb6a:	89a3      	ldrh	r3, [r4, #12]
 800bb6c:	071a      	lsls	r2, r3, #28
 800bb6e:	d52f      	bpl.n	800bbd0 <__swbuf_r+0x84>
 800bb70:	6923      	ldr	r3, [r4, #16]
 800bb72:	b36b      	cbz	r3, 800bbd0 <__swbuf_r+0x84>
 800bb74:	6923      	ldr	r3, [r4, #16]
 800bb76:	6820      	ldr	r0, [r4, #0]
 800bb78:	b2f6      	uxtb	r6, r6
 800bb7a:	1ac0      	subs	r0, r0, r3
 800bb7c:	6963      	ldr	r3, [r4, #20]
 800bb7e:	4637      	mov	r7, r6
 800bb80:	4283      	cmp	r3, r0
 800bb82:	dc04      	bgt.n	800bb8e <__swbuf_r+0x42>
 800bb84:	4621      	mov	r1, r4
 800bb86:	4628      	mov	r0, r5
 800bb88:	f000 f92a 	bl	800bde0 <_fflush_r>
 800bb8c:	bb30      	cbnz	r0, 800bbdc <__swbuf_r+0x90>
 800bb8e:	68a3      	ldr	r3, [r4, #8]
 800bb90:	3001      	adds	r0, #1
 800bb92:	3b01      	subs	r3, #1
 800bb94:	60a3      	str	r3, [r4, #8]
 800bb96:	6823      	ldr	r3, [r4, #0]
 800bb98:	1c5a      	adds	r2, r3, #1
 800bb9a:	6022      	str	r2, [r4, #0]
 800bb9c:	701e      	strb	r6, [r3, #0]
 800bb9e:	6963      	ldr	r3, [r4, #20]
 800bba0:	4283      	cmp	r3, r0
 800bba2:	d004      	beq.n	800bbae <__swbuf_r+0x62>
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	07db      	lsls	r3, r3, #31
 800bba8:	d506      	bpl.n	800bbb8 <__swbuf_r+0x6c>
 800bbaa:	2e0a      	cmp	r6, #10
 800bbac:	d104      	bne.n	800bbb8 <__swbuf_r+0x6c>
 800bbae:	4621      	mov	r1, r4
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	f000 f915 	bl	800bde0 <_fflush_r>
 800bbb6:	b988      	cbnz	r0, 800bbdc <__swbuf_r+0x90>
 800bbb8:	4638      	mov	r0, r7
 800bbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	; (800bbe8 <__swbuf_r+0x9c>)
 800bbbe:	429c      	cmp	r4, r3
 800bbc0:	d101      	bne.n	800bbc6 <__swbuf_r+0x7a>
 800bbc2:	68ac      	ldr	r4, [r5, #8]
 800bbc4:	e7cf      	b.n	800bb66 <__swbuf_r+0x1a>
 800bbc6:	4b09      	ldr	r3, [pc, #36]	; (800bbec <__swbuf_r+0xa0>)
 800bbc8:	429c      	cmp	r4, r3
 800bbca:	bf08      	it	eq
 800bbcc:	68ec      	ldreq	r4, [r5, #12]
 800bbce:	e7ca      	b.n	800bb66 <__swbuf_r+0x1a>
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f000 f80c 	bl	800bbf0 <__swsetup_r>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d0cb      	beq.n	800bb74 <__swbuf_r+0x28>
 800bbdc:	f04f 37ff 	mov.w	r7, #4294967295
 800bbe0:	e7ea      	b.n	800bbb8 <__swbuf_r+0x6c>
 800bbe2:	bf00      	nop
 800bbe4:	0800c7fc 	.word	0x0800c7fc
 800bbe8:	0800c81c 	.word	0x0800c81c
 800bbec:	0800c7dc 	.word	0x0800c7dc

0800bbf0 <__swsetup_r>:
 800bbf0:	4b32      	ldr	r3, [pc, #200]	; (800bcbc <__swsetup_r+0xcc>)
 800bbf2:	b570      	push	{r4, r5, r6, lr}
 800bbf4:	681d      	ldr	r5, [r3, #0]
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	b125      	cbz	r5, 800bc06 <__swsetup_r+0x16>
 800bbfc:	69ab      	ldr	r3, [r5, #24]
 800bbfe:	b913      	cbnz	r3, 800bc06 <__swsetup_r+0x16>
 800bc00:	4628      	mov	r0, r5
 800bc02:	f000 f981 	bl	800bf08 <__sinit>
 800bc06:	4b2e      	ldr	r3, [pc, #184]	; (800bcc0 <__swsetup_r+0xd0>)
 800bc08:	429c      	cmp	r4, r3
 800bc0a:	d10f      	bne.n	800bc2c <__swsetup_r+0x3c>
 800bc0c:	686c      	ldr	r4, [r5, #4]
 800bc0e:	89a3      	ldrh	r3, [r4, #12]
 800bc10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc14:	0719      	lsls	r1, r3, #28
 800bc16:	d42c      	bmi.n	800bc72 <__swsetup_r+0x82>
 800bc18:	06dd      	lsls	r5, r3, #27
 800bc1a:	d411      	bmi.n	800bc40 <__swsetup_r+0x50>
 800bc1c:	2309      	movs	r3, #9
 800bc1e:	6033      	str	r3, [r6, #0]
 800bc20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc24:	f04f 30ff 	mov.w	r0, #4294967295
 800bc28:	81a3      	strh	r3, [r4, #12]
 800bc2a:	e03e      	b.n	800bcaa <__swsetup_r+0xba>
 800bc2c:	4b25      	ldr	r3, [pc, #148]	; (800bcc4 <__swsetup_r+0xd4>)
 800bc2e:	429c      	cmp	r4, r3
 800bc30:	d101      	bne.n	800bc36 <__swsetup_r+0x46>
 800bc32:	68ac      	ldr	r4, [r5, #8]
 800bc34:	e7eb      	b.n	800bc0e <__swsetup_r+0x1e>
 800bc36:	4b24      	ldr	r3, [pc, #144]	; (800bcc8 <__swsetup_r+0xd8>)
 800bc38:	429c      	cmp	r4, r3
 800bc3a:	bf08      	it	eq
 800bc3c:	68ec      	ldreq	r4, [r5, #12]
 800bc3e:	e7e6      	b.n	800bc0e <__swsetup_r+0x1e>
 800bc40:	0758      	lsls	r0, r3, #29
 800bc42:	d512      	bpl.n	800bc6a <__swsetup_r+0x7a>
 800bc44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc46:	b141      	cbz	r1, 800bc5a <__swsetup_r+0x6a>
 800bc48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc4c:	4299      	cmp	r1, r3
 800bc4e:	d002      	beq.n	800bc56 <__swsetup_r+0x66>
 800bc50:	4630      	mov	r0, r6
 800bc52:	f7ff fb2f 	bl	800b2b4 <_free_r>
 800bc56:	2300      	movs	r3, #0
 800bc58:	6363      	str	r3, [r4, #52]	; 0x34
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc60:	81a3      	strh	r3, [r4, #12]
 800bc62:	2300      	movs	r3, #0
 800bc64:	6063      	str	r3, [r4, #4]
 800bc66:	6923      	ldr	r3, [r4, #16]
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	89a3      	ldrh	r3, [r4, #12]
 800bc6c:	f043 0308 	orr.w	r3, r3, #8
 800bc70:	81a3      	strh	r3, [r4, #12]
 800bc72:	6923      	ldr	r3, [r4, #16]
 800bc74:	b94b      	cbnz	r3, 800bc8a <__swsetup_r+0x9a>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc80:	d003      	beq.n	800bc8a <__swsetup_r+0x9a>
 800bc82:	4621      	mov	r1, r4
 800bc84:	4630      	mov	r0, r6
 800bc86:	f000 fa05 	bl	800c094 <__smakebuf_r>
 800bc8a:	89a0      	ldrh	r0, [r4, #12]
 800bc8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc90:	f010 0301 	ands.w	r3, r0, #1
 800bc94:	d00a      	beq.n	800bcac <__swsetup_r+0xbc>
 800bc96:	2300      	movs	r3, #0
 800bc98:	60a3      	str	r3, [r4, #8]
 800bc9a:	6963      	ldr	r3, [r4, #20]
 800bc9c:	425b      	negs	r3, r3
 800bc9e:	61a3      	str	r3, [r4, #24]
 800bca0:	6923      	ldr	r3, [r4, #16]
 800bca2:	b943      	cbnz	r3, 800bcb6 <__swsetup_r+0xc6>
 800bca4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bca8:	d1ba      	bne.n	800bc20 <__swsetup_r+0x30>
 800bcaa:	bd70      	pop	{r4, r5, r6, pc}
 800bcac:	0781      	lsls	r1, r0, #30
 800bcae:	bf58      	it	pl
 800bcb0:	6963      	ldrpl	r3, [r4, #20]
 800bcb2:	60a3      	str	r3, [r4, #8]
 800bcb4:	e7f4      	b.n	800bca0 <__swsetup_r+0xb0>
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	e7f7      	b.n	800bcaa <__swsetup_r+0xba>
 800bcba:	bf00      	nop
 800bcbc:	20000024 	.word	0x20000024
 800bcc0:	0800c7fc 	.word	0x0800c7fc
 800bcc4:	0800c81c 	.word	0x0800c81c
 800bcc8:	0800c7dc 	.word	0x0800c7dc

0800bccc <abort>:
 800bccc:	2006      	movs	r0, #6
 800bcce:	b508      	push	{r3, lr}
 800bcd0:	f000 fa50 	bl	800c174 <raise>
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	f7f6 fd24 	bl	8002722 <_exit>
	...

0800bcdc <__sflush_r>:
 800bcdc:	898a      	ldrh	r2, [r1, #12]
 800bcde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce0:	4605      	mov	r5, r0
 800bce2:	0710      	lsls	r0, r2, #28
 800bce4:	460c      	mov	r4, r1
 800bce6:	d457      	bmi.n	800bd98 <__sflush_r+0xbc>
 800bce8:	684b      	ldr	r3, [r1, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	dc04      	bgt.n	800bcf8 <__sflush_r+0x1c>
 800bcee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	dc01      	bgt.n	800bcf8 <__sflush_r+0x1c>
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcfa:	2e00      	cmp	r6, #0
 800bcfc:	d0fa      	beq.n	800bcf4 <__sflush_r+0x18>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd04:	682f      	ldr	r7, [r5, #0]
 800bd06:	602b      	str	r3, [r5, #0]
 800bd08:	d032      	beq.n	800bd70 <__sflush_r+0x94>
 800bd0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	075a      	lsls	r2, r3, #29
 800bd10:	d505      	bpl.n	800bd1e <__sflush_r+0x42>
 800bd12:	6863      	ldr	r3, [r4, #4]
 800bd14:	1ac0      	subs	r0, r0, r3
 800bd16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd18:	b10b      	cbz	r3, 800bd1e <__sflush_r+0x42>
 800bd1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd1c:	1ac0      	subs	r0, r0, r3
 800bd1e:	2300      	movs	r3, #0
 800bd20:	4602      	mov	r2, r0
 800bd22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd24:	4628      	mov	r0, r5
 800bd26:	6a21      	ldr	r1, [r4, #32]
 800bd28:	47b0      	blx	r6
 800bd2a:	1c43      	adds	r3, r0, #1
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	d106      	bne.n	800bd3e <__sflush_r+0x62>
 800bd30:	6829      	ldr	r1, [r5, #0]
 800bd32:	291d      	cmp	r1, #29
 800bd34:	d82c      	bhi.n	800bd90 <__sflush_r+0xb4>
 800bd36:	4a29      	ldr	r2, [pc, #164]	; (800bddc <__sflush_r+0x100>)
 800bd38:	40ca      	lsrs	r2, r1
 800bd3a:	07d6      	lsls	r6, r2, #31
 800bd3c:	d528      	bpl.n	800bd90 <__sflush_r+0xb4>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	6062      	str	r2, [r4, #4]
 800bd42:	6922      	ldr	r2, [r4, #16]
 800bd44:	04d9      	lsls	r1, r3, #19
 800bd46:	6022      	str	r2, [r4, #0]
 800bd48:	d504      	bpl.n	800bd54 <__sflush_r+0x78>
 800bd4a:	1c42      	adds	r2, r0, #1
 800bd4c:	d101      	bne.n	800bd52 <__sflush_r+0x76>
 800bd4e:	682b      	ldr	r3, [r5, #0]
 800bd50:	b903      	cbnz	r3, 800bd54 <__sflush_r+0x78>
 800bd52:	6560      	str	r0, [r4, #84]	; 0x54
 800bd54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd56:	602f      	str	r7, [r5, #0]
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	d0cb      	beq.n	800bcf4 <__sflush_r+0x18>
 800bd5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd60:	4299      	cmp	r1, r3
 800bd62:	d002      	beq.n	800bd6a <__sflush_r+0x8e>
 800bd64:	4628      	mov	r0, r5
 800bd66:	f7ff faa5 	bl	800b2b4 <_free_r>
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd6e:	e7c2      	b.n	800bcf6 <__sflush_r+0x1a>
 800bd70:	6a21      	ldr	r1, [r4, #32]
 800bd72:	2301      	movs	r3, #1
 800bd74:	4628      	mov	r0, r5
 800bd76:	47b0      	blx	r6
 800bd78:	1c41      	adds	r1, r0, #1
 800bd7a:	d1c7      	bne.n	800bd0c <__sflush_r+0x30>
 800bd7c:	682b      	ldr	r3, [r5, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d0c4      	beq.n	800bd0c <__sflush_r+0x30>
 800bd82:	2b1d      	cmp	r3, #29
 800bd84:	d001      	beq.n	800bd8a <__sflush_r+0xae>
 800bd86:	2b16      	cmp	r3, #22
 800bd88:	d101      	bne.n	800bd8e <__sflush_r+0xb2>
 800bd8a:	602f      	str	r7, [r5, #0]
 800bd8c:	e7b2      	b.n	800bcf4 <__sflush_r+0x18>
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd94:	81a3      	strh	r3, [r4, #12]
 800bd96:	e7ae      	b.n	800bcf6 <__sflush_r+0x1a>
 800bd98:	690f      	ldr	r7, [r1, #16]
 800bd9a:	2f00      	cmp	r7, #0
 800bd9c:	d0aa      	beq.n	800bcf4 <__sflush_r+0x18>
 800bd9e:	0793      	lsls	r3, r2, #30
 800bda0:	bf18      	it	ne
 800bda2:	2300      	movne	r3, #0
 800bda4:	680e      	ldr	r6, [r1, #0]
 800bda6:	bf08      	it	eq
 800bda8:	694b      	ldreq	r3, [r1, #20]
 800bdaa:	1bf6      	subs	r6, r6, r7
 800bdac:	600f      	str	r7, [r1, #0]
 800bdae:	608b      	str	r3, [r1, #8]
 800bdb0:	2e00      	cmp	r6, #0
 800bdb2:	dd9f      	ble.n	800bcf4 <__sflush_r+0x18>
 800bdb4:	4633      	mov	r3, r6
 800bdb6:	463a      	mov	r2, r7
 800bdb8:	4628      	mov	r0, r5
 800bdba:	6a21      	ldr	r1, [r4, #32]
 800bdbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bdc0:	47e0      	blx	ip
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	dc06      	bgt.n	800bdd4 <__sflush_r+0xf8>
 800bdc6:	89a3      	ldrh	r3, [r4, #12]
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdd0:	81a3      	strh	r3, [r4, #12]
 800bdd2:	e790      	b.n	800bcf6 <__sflush_r+0x1a>
 800bdd4:	4407      	add	r7, r0
 800bdd6:	1a36      	subs	r6, r6, r0
 800bdd8:	e7ea      	b.n	800bdb0 <__sflush_r+0xd4>
 800bdda:	bf00      	nop
 800bddc:	20400001 	.word	0x20400001

0800bde0 <_fflush_r>:
 800bde0:	b538      	push	{r3, r4, r5, lr}
 800bde2:	690b      	ldr	r3, [r1, #16]
 800bde4:	4605      	mov	r5, r0
 800bde6:	460c      	mov	r4, r1
 800bde8:	b913      	cbnz	r3, 800bdf0 <_fflush_r+0x10>
 800bdea:	2500      	movs	r5, #0
 800bdec:	4628      	mov	r0, r5
 800bdee:	bd38      	pop	{r3, r4, r5, pc}
 800bdf0:	b118      	cbz	r0, 800bdfa <_fflush_r+0x1a>
 800bdf2:	6983      	ldr	r3, [r0, #24]
 800bdf4:	b90b      	cbnz	r3, 800bdfa <_fflush_r+0x1a>
 800bdf6:	f000 f887 	bl	800bf08 <__sinit>
 800bdfa:	4b14      	ldr	r3, [pc, #80]	; (800be4c <_fflush_r+0x6c>)
 800bdfc:	429c      	cmp	r4, r3
 800bdfe:	d11b      	bne.n	800be38 <_fflush_r+0x58>
 800be00:	686c      	ldr	r4, [r5, #4]
 800be02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d0ef      	beq.n	800bdea <_fflush_r+0xa>
 800be0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be0c:	07d0      	lsls	r0, r2, #31
 800be0e:	d404      	bmi.n	800be1a <_fflush_r+0x3a>
 800be10:	0599      	lsls	r1, r3, #22
 800be12:	d402      	bmi.n	800be1a <_fflush_r+0x3a>
 800be14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be16:	f000 f915 	bl	800c044 <__retarget_lock_acquire_recursive>
 800be1a:	4628      	mov	r0, r5
 800be1c:	4621      	mov	r1, r4
 800be1e:	f7ff ff5d 	bl	800bcdc <__sflush_r>
 800be22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be24:	4605      	mov	r5, r0
 800be26:	07da      	lsls	r2, r3, #31
 800be28:	d4e0      	bmi.n	800bdec <_fflush_r+0xc>
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	059b      	lsls	r3, r3, #22
 800be2e:	d4dd      	bmi.n	800bdec <_fflush_r+0xc>
 800be30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be32:	f000 f908 	bl	800c046 <__retarget_lock_release_recursive>
 800be36:	e7d9      	b.n	800bdec <_fflush_r+0xc>
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <_fflush_r+0x70>)
 800be3a:	429c      	cmp	r4, r3
 800be3c:	d101      	bne.n	800be42 <_fflush_r+0x62>
 800be3e:	68ac      	ldr	r4, [r5, #8]
 800be40:	e7df      	b.n	800be02 <_fflush_r+0x22>
 800be42:	4b04      	ldr	r3, [pc, #16]	; (800be54 <_fflush_r+0x74>)
 800be44:	429c      	cmp	r4, r3
 800be46:	bf08      	it	eq
 800be48:	68ec      	ldreq	r4, [r5, #12]
 800be4a:	e7da      	b.n	800be02 <_fflush_r+0x22>
 800be4c:	0800c7fc 	.word	0x0800c7fc
 800be50:	0800c81c 	.word	0x0800c81c
 800be54:	0800c7dc 	.word	0x0800c7dc

0800be58 <std>:
 800be58:	2300      	movs	r3, #0
 800be5a:	b510      	push	{r4, lr}
 800be5c:	4604      	mov	r4, r0
 800be5e:	e9c0 3300 	strd	r3, r3, [r0]
 800be62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be66:	6083      	str	r3, [r0, #8]
 800be68:	8181      	strh	r1, [r0, #12]
 800be6a:	6643      	str	r3, [r0, #100]	; 0x64
 800be6c:	81c2      	strh	r2, [r0, #14]
 800be6e:	6183      	str	r3, [r0, #24]
 800be70:	4619      	mov	r1, r3
 800be72:	2208      	movs	r2, #8
 800be74:	305c      	adds	r0, #92	; 0x5c
 800be76:	f7fc f897 	bl	8007fa8 <memset>
 800be7a:	4b05      	ldr	r3, [pc, #20]	; (800be90 <std+0x38>)
 800be7c:	6224      	str	r4, [r4, #32]
 800be7e:	6263      	str	r3, [r4, #36]	; 0x24
 800be80:	4b04      	ldr	r3, [pc, #16]	; (800be94 <std+0x3c>)
 800be82:	62a3      	str	r3, [r4, #40]	; 0x28
 800be84:	4b04      	ldr	r3, [pc, #16]	; (800be98 <std+0x40>)
 800be86:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be88:	4b04      	ldr	r3, [pc, #16]	; (800be9c <std+0x44>)
 800be8a:	6323      	str	r3, [r4, #48]	; 0x30
 800be8c:	bd10      	pop	{r4, pc}
 800be8e:	bf00      	nop
 800be90:	0800c1ad 	.word	0x0800c1ad
 800be94:	0800c1cf 	.word	0x0800c1cf
 800be98:	0800c207 	.word	0x0800c207
 800be9c:	0800c22b 	.word	0x0800c22b

0800bea0 <_cleanup_r>:
 800bea0:	4901      	ldr	r1, [pc, #4]	; (800bea8 <_cleanup_r+0x8>)
 800bea2:	f000 b8af 	b.w	800c004 <_fwalk_reent>
 800bea6:	bf00      	nop
 800bea8:	0800bde1 	.word	0x0800bde1

0800beac <__sfmoreglue>:
 800beac:	2268      	movs	r2, #104	; 0x68
 800beae:	b570      	push	{r4, r5, r6, lr}
 800beb0:	1e4d      	subs	r5, r1, #1
 800beb2:	4355      	muls	r5, r2
 800beb4:	460e      	mov	r6, r1
 800beb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800beba:	f7ff fa63 	bl	800b384 <_malloc_r>
 800bebe:	4604      	mov	r4, r0
 800bec0:	b140      	cbz	r0, 800bed4 <__sfmoreglue+0x28>
 800bec2:	2100      	movs	r1, #0
 800bec4:	e9c0 1600 	strd	r1, r6, [r0]
 800bec8:	300c      	adds	r0, #12
 800beca:	60a0      	str	r0, [r4, #8]
 800becc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bed0:	f7fc f86a 	bl	8007fa8 <memset>
 800bed4:	4620      	mov	r0, r4
 800bed6:	bd70      	pop	{r4, r5, r6, pc}

0800bed8 <__sfp_lock_acquire>:
 800bed8:	4801      	ldr	r0, [pc, #4]	; (800bee0 <__sfp_lock_acquire+0x8>)
 800beda:	f000 b8b3 	b.w	800c044 <__retarget_lock_acquire_recursive>
 800bede:	bf00      	nop
 800bee0:	200007e9 	.word	0x200007e9

0800bee4 <__sfp_lock_release>:
 800bee4:	4801      	ldr	r0, [pc, #4]	; (800beec <__sfp_lock_release+0x8>)
 800bee6:	f000 b8ae 	b.w	800c046 <__retarget_lock_release_recursive>
 800beea:	bf00      	nop
 800beec:	200007e9 	.word	0x200007e9

0800bef0 <__sinit_lock_acquire>:
 800bef0:	4801      	ldr	r0, [pc, #4]	; (800bef8 <__sinit_lock_acquire+0x8>)
 800bef2:	f000 b8a7 	b.w	800c044 <__retarget_lock_acquire_recursive>
 800bef6:	bf00      	nop
 800bef8:	200007ea 	.word	0x200007ea

0800befc <__sinit_lock_release>:
 800befc:	4801      	ldr	r0, [pc, #4]	; (800bf04 <__sinit_lock_release+0x8>)
 800befe:	f000 b8a2 	b.w	800c046 <__retarget_lock_release_recursive>
 800bf02:	bf00      	nop
 800bf04:	200007ea 	.word	0x200007ea

0800bf08 <__sinit>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	f7ff fff0 	bl	800bef0 <__sinit_lock_acquire>
 800bf10:	69a3      	ldr	r3, [r4, #24]
 800bf12:	b11b      	cbz	r3, 800bf1c <__sinit+0x14>
 800bf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf18:	f7ff bff0 	b.w	800befc <__sinit_lock_release>
 800bf1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf20:	6523      	str	r3, [r4, #80]	; 0x50
 800bf22:	4b13      	ldr	r3, [pc, #76]	; (800bf70 <__sinit+0x68>)
 800bf24:	4a13      	ldr	r2, [pc, #76]	; (800bf74 <__sinit+0x6c>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf2a:	42a3      	cmp	r3, r4
 800bf2c:	bf08      	it	eq
 800bf2e:	2301      	moveq	r3, #1
 800bf30:	4620      	mov	r0, r4
 800bf32:	bf08      	it	eq
 800bf34:	61a3      	streq	r3, [r4, #24]
 800bf36:	f000 f81f 	bl	800bf78 <__sfp>
 800bf3a:	6060      	str	r0, [r4, #4]
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f000 f81b 	bl	800bf78 <__sfp>
 800bf42:	60a0      	str	r0, [r4, #8]
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 f817 	bl	800bf78 <__sfp>
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	2104      	movs	r1, #4
 800bf4e:	60e0      	str	r0, [r4, #12]
 800bf50:	6860      	ldr	r0, [r4, #4]
 800bf52:	f7ff ff81 	bl	800be58 <std>
 800bf56:	2201      	movs	r2, #1
 800bf58:	2109      	movs	r1, #9
 800bf5a:	68a0      	ldr	r0, [r4, #8]
 800bf5c:	f7ff ff7c 	bl	800be58 <std>
 800bf60:	2202      	movs	r2, #2
 800bf62:	2112      	movs	r1, #18
 800bf64:	68e0      	ldr	r0, [r4, #12]
 800bf66:	f7ff ff77 	bl	800be58 <std>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	61a3      	str	r3, [r4, #24]
 800bf6e:	e7d1      	b.n	800bf14 <__sinit+0xc>
 800bf70:	0800c39c 	.word	0x0800c39c
 800bf74:	0800bea1 	.word	0x0800bea1

0800bf78 <__sfp>:
 800bf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7a:	4607      	mov	r7, r0
 800bf7c:	f7ff ffac 	bl	800bed8 <__sfp_lock_acquire>
 800bf80:	4b1e      	ldr	r3, [pc, #120]	; (800bffc <__sfp+0x84>)
 800bf82:	681e      	ldr	r6, [r3, #0]
 800bf84:	69b3      	ldr	r3, [r6, #24]
 800bf86:	b913      	cbnz	r3, 800bf8e <__sfp+0x16>
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f7ff ffbd 	bl	800bf08 <__sinit>
 800bf8e:	3648      	adds	r6, #72	; 0x48
 800bf90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	d503      	bpl.n	800bfa0 <__sfp+0x28>
 800bf98:	6833      	ldr	r3, [r6, #0]
 800bf9a:	b30b      	cbz	r3, 800bfe0 <__sfp+0x68>
 800bf9c:	6836      	ldr	r6, [r6, #0]
 800bf9e:	e7f7      	b.n	800bf90 <__sfp+0x18>
 800bfa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfa4:	b9d5      	cbnz	r5, 800bfdc <__sfp+0x64>
 800bfa6:	4b16      	ldr	r3, [pc, #88]	; (800c000 <__sfp+0x88>)
 800bfa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfac:	60e3      	str	r3, [r4, #12]
 800bfae:	6665      	str	r5, [r4, #100]	; 0x64
 800bfb0:	f000 f847 	bl	800c042 <__retarget_lock_init_recursive>
 800bfb4:	f7ff ff96 	bl	800bee4 <__sfp_lock_release>
 800bfb8:	2208      	movs	r2, #8
 800bfba:	4629      	mov	r1, r5
 800bfbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfc4:	6025      	str	r5, [r4, #0]
 800bfc6:	61a5      	str	r5, [r4, #24]
 800bfc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfcc:	f7fb ffec 	bl	8007fa8 <memset>
 800bfd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfd8:	4620      	mov	r0, r4
 800bfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfdc:	3468      	adds	r4, #104	; 0x68
 800bfde:	e7d9      	b.n	800bf94 <__sfp+0x1c>
 800bfe0:	2104      	movs	r1, #4
 800bfe2:	4638      	mov	r0, r7
 800bfe4:	f7ff ff62 	bl	800beac <__sfmoreglue>
 800bfe8:	4604      	mov	r4, r0
 800bfea:	6030      	str	r0, [r6, #0]
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d1d5      	bne.n	800bf9c <__sfp+0x24>
 800bff0:	f7ff ff78 	bl	800bee4 <__sfp_lock_release>
 800bff4:	230c      	movs	r3, #12
 800bff6:	603b      	str	r3, [r7, #0]
 800bff8:	e7ee      	b.n	800bfd8 <__sfp+0x60>
 800bffa:	bf00      	nop
 800bffc:	0800c39c 	.word	0x0800c39c
 800c000:	ffff0001 	.word	0xffff0001

0800c004 <_fwalk_reent>:
 800c004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c008:	4606      	mov	r6, r0
 800c00a:	4688      	mov	r8, r1
 800c00c:	2700      	movs	r7, #0
 800c00e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c016:	f1b9 0901 	subs.w	r9, r9, #1
 800c01a:	d505      	bpl.n	800c028 <_fwalk_reent+0x24>
 800c01c:	6824      	ldr	r4, [r4, #0]
 800c01e:	2c00      	cmp	r4, #0
 800c020:	d1f7      	bne.n	800c012 <_fwalk_reent+0xe>
 800c022:	4638      	mov	r0, r7
 800c024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c028:	89ab      	ldrh	r3, [r5, #12]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d907      	bls.n	800c03e <_fwalk_reent+0x3a>
 800c02e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c032:	3301      	adds	r3, #1
 800c034:	d003      	beq.n	800c03e <_fwalk_reent+0x3a>
 800c036:	4629      	mov	r1, r5
 800c038:	4630      	mov	r0, r6
 800c03a:	47c0      	blx	r8
 800c03c:	4307      	orrs	r7, r0
 800c03e:	3568      	adds	r5, #104	; 0x68
 800c040:	e7e9      	b.n	800c016 <_fwalk_reent+0x12>

0800c042 <__retarget_lock_init_recursive>:
 800c042:	4770      	bx	lr

0800c044 <__retarget_lock_acquire_recursive>:
 800c044:	4770      	bx	lr

0800c046 <__retarget_lock_release_recursive>:
 800c046:	4770      	bx	lr

0800c048 <__swhatbuf_r>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	460e      	mov	r6, r1
 800c04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c050:	4614      	mov	r4, r2
 800c052:	2900      	cmp	r1, #0
 800c054:	461d      	mov	r5, r3
 800c056:	b096      	sub	sp, #88	; 0x58
 800c058:	da08      	bge.n	800c06c <__swhatbuf_r+0x24>
 800c05a:	2200      	movs	r2, #0
 800c05c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c060:	602a      	str	r2, [r5, #0]
 800c062:	061a      	lsls	r2, r3, #24
 800c064:	d410      	bmi.n	800c088 <__swhatbuf_r+0x40>
 800c066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c06a:	e00e      	b.n	800c08a <__swhatbuf_r+0x42>
 800c06c:	466a      	mov	r2, sp
 800c06e:	f000 f903 	bl	800c278 <_fstat_r>
 800c072:	2800      	cmp	r0, #0
 800c074:	dbf1      	blt.n	800c05a <__swhatbuf_r+0x12>
 800c076:	9a01      	ldr	r2, [sp, #4]
 800c078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c07c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c080:	425a      	negs	r2, r3
 800c082:	415a      	adcs	r2, r3
 800c084:	602a      	str	r2, [r5, #0]
 800c086:	e7ee      	b.n	800c066 <__swhatbuf_r+0x1e>
 800c088:	2340      	movs	r3, #64	; 0x40
 800c08a:	2000      	movs	r0, #0
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	b016      	add	sp, #88	; 0x58
 800c090:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c094 <__smakebuf_r>:
 800c094:	898b      	ldrh	r3, [r1, #12]
 800c096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c098:	079d      	lsls	r5, r3, #30
 800c09a:	4606      	mov	r6, r0
 800c09c:	460c      	mov	r4, r1
 800c09e:	d507      	bpl.n	800c0b0 <__smakebuf_r+0x1c>
 800c0a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	6123      	str	r3, [r4, #16]
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	6163      	str	r3, [r4, #20]
 800c0ac:	b002      	add	sp, #8
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}
 800c0b0:	466a      	mov	r2, sp
 800c0b2:	ab01      	add	r3, sp, #4
 800c0b4:	f7ff ffc8 	bl	800c048 <__swhatbuf_r>
 800c0b8:	9900      	ldr	r1, [sp, #0]
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f7ff f961 	bl	800b384 <_malloc_r>
 800c0c2:	b948      	cbnz	r0, 800c0d8 <__smakebuf_r+0x44>
 800c0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0c8:	059a      	lsls	r2, r3, #22
 800c0ca:	d4ef      	bmi.n	800c0ac <__smakebuf_r+0x18>
 800c0cc:	f023 0303 	bic.w	r3, r3, #3
 800c0d0:	f043 0302 	orr.w	r3, r3, #2
 800c0d4:	81a3      	strh	r3, [r4, #12]
 800c0d6:	e7e3      	b.n	800c0a0 <__smakebuf_r+0xc>
 800c0d8:	4b0d      	ldr	r3, [pc, #52]	; (800c110 <__smakebuf_r+0x7c>)
 800c0da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	6020      	str	r0, [r4, #0]
 800c0e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e4:	81a3      	strh	r3, [r4, #12]
 800c0e6:	9b00      	ldr	r3, [sp, #0]
 800c0e8:	6120      	str	r0, [r4, #16]
 800c0ea:	6163      	str	r3, [r4, #20]
 800c0ec:	9b01      	ldr	r3, [sp, #4]
 800c0ee:	b15b      	cbz	r3, 800c108 <__smakebuf_r+0x74>
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0f6:	f000 f8d1 	bl	800c29c <_isatty_r>
 800c0fa:	b128      	cbz	r0, 800c108 <__smakebuf_r+0x74>
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	f023 0303 	bic.w	r3, r3, #3
 800c102:	f043 0301 	orr.w	r3, r3, #1
 800c106:	81a3      	strh	r3, [r4, #12]
 800c108:	89a0      	ldrh	r0, [r4, #12]
 800c10a:	4305      	orrs	r5, r0
 800c10c:	81a5      	strh	r5, [r4, #12]
 800c10e:	e7cd      	b.n	800c0ac <__smakebuf_r+0x18>
 800c110:	0800bea1 	.word	0x0800bea1

0800c114 <_malloc_usable_size_r>:
 800c114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c118:	1f18      	subs	r0, r3, #4
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	bfbc      	itt	lt
 800c11e:	580b      	ldrlt	r3, [r1, r0]
 800c120:	18c0      	addlt	r0, r0, r3
 800c122:	4770      	bx	lr

0800c124 <_raise_r>:
 800c124:	291f      	cmp	r1, #31
 800c126:	b538      	push	{r3, r4, r5, lr}
 800c128:	4604      	mov	r4, r0
 800c12a:	460d      	mov	r5, r1
 800c12c:	d904      	bls.n	800c138 <_raise_r+0x14>
 800c12e:	2316      	movs	r3, #22
 800c130:	6003      	str	r3, [r0, #0]
 800c132:	f04f 30ff 	mov.w	r0, #4294967295
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c13a:	b112      	cbz	r2, 800c142 <_raise_r+0x1e>
 800c13c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c140:	b94b      	cbnz	r3, 800c156 <_raise_r+0x32>
 800c142:	4620      	mov	r0, r4
 800c144:	f000 f830 	bl	800c1a8 <_getpid_r>
 800c148:	462a      	mov	r2, r5
 800c14a:	4601      	mov	r1, r0
 800c14c:	4620      	mov	r0, r4
 800c14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c152:	f000 b817 	b.w	800c184 <_kill_r>
 800c156:	2b01      	cmp	r3, #1
 800c158:	d00a      	beq.n	800c170 <_raise_r+0x4c>
 800c15a:	1c59      	adds	r1, r3, #1
 800c15c:	d103      	bne.n	800c166 <_raise_r+0x42>
 800c15e:	2316      	movs	r3, #22
 800c160:	6003      	str	r3, [r0, #0]
 800c162:	2001      	movs	r0, #1
 800c164:	e7e7      	b.n	800c136 <_raise_r+0x12>
 800c166:	2400      	movs	r4, #0
 800c168:	4628      	mov	r0, r5
 800c16a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c16e:	4798      	blx	r3
 800c170:	2000      	movs	r0, #0
 800c172:	e7e0      	b.n	800c136 <_raise_r+0x12>

0800c174 <raise>:
 800c174:	4b02      	ldr	r3, [pc, #8]	; (800c180 <raise+0xc>)
 800c176:	4601      	mov	r1, r0
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	f7ff bfd3 	b.w	800c124 <_raise_r>
 800c17e:	bf00      	nop
 800c180:	20000024 	.word	0x20000024

0800c184 <_kill_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	2300      	movs	r3, #0
 800c188:	4d06      	ldr	r5, [pc, #24]	; (800c1a4 <_kill_r+0x20>)
 800c18a:	4604      	mov	r4, r0
 800c18c:	4608      	mov	r0, r1
 800c18e:	4611      	mov	r1, r2
 800c190:	602b      	str	r3, [r5, #0]
 800c192:	f7f6 fab6 	bl	8002702 <_kill>
 800c196:	1c43      	adds	r3, r0, #1
 800c198:	d102      	bne.n	800c1a0 <_kill_r+0x1c>
 800c19a:	682b      	ldr	r3, [r5, #0]
 800c19c:	b103      	cbz	r3, 800c1a0 <_kill_r+0x1c>
 800c19e:	6023      	str	r3, [r4, #0]
 800c1a0:	bd38      	pop	{r3, r4, r5, pc}
 800c1a2:	bf00      	nop
 800c1a4:	200007e4 	.word	0x200007e4

0800c1a8 <_getpid_r>:
 800c1a8:	f7f6 baa4 	b.w	80026f4 <_getpid>

0800c1ac <__sread>:
 800c1ac:	b510      	push	{r4, lr}
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b4:	f000 f894 	bl	800c2e0 <_read_r>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	bfab      	itete	ge
 800c1bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1be:	89a3      	ldrhlt	r3, [r4, #12]
 800c1c0:	181b      	addge	r3, r3, r0
 800c1c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1c6:	bfac      	ite	ge
 800c1c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1ca:	81a3      	strhlt	r3, [r4, #12]
 800c1cc:	bd10      	pop	{r4, pc}

0800c1ce <__swrite>:
 800c1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d2:	461f      	mov	r7, r3
 800c1d4:	898b      	ldrh	r3, [r1, #12]
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	05db      	lsls	r3, r3, #23
 800c1da:	460c      	mov	r4, r1
 800c1dc:	4616      	mov	r6, r2
 800c1de:	d505      	bpl.n	800c1ec <__swrite+0x1e>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e8:	f000 f868 	bl	800c2bc <_lseek_r>
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	4632      	mov	r2, r6
 800c1f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1f4:	81a3      	strh	r3, [r4, #12]
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	463b      	mov	r3, r7
 800c1fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c202:	f000 b817 	b.w	800c234 <_write_r>

0800c206 <__sseek>:
 800c206:	b510      	push	{r4, lr}
 800c208:	460c      	mov	r4, r1
 800c20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c20e:	f000 f855 	bl	800c2bc <_lseek_r>
 800c212:	1c43      	adds	r3, r0, #1
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	bf15      	itete	ne
 800c218:	6560      	strne	r0, [r4, #84]	; 0x54
 800c21a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c21e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c222:	81a3      	strheq	r3, [r4, #12]
 800c224:	bf18      	it	ne
 800c226:	81a3      	strhne	r3, [r4, #12]
 800c228:	bd10      	pop	{r4, pc}

0800c22a <__sclose>:
 800c22a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22e:	f000 b813 	b.w	800c258 <_close_r>
	...

0800c234 <_write_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4604      	mov	r4, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	4611      	mov	r1, r2
 800c23c:	2200      	movs	r2, #0
 800c23e:	4d05      	ldr	r5, [pc, #20]	; (800c254 <_write_r+0x20>)
 800c240:	602a      	str	r2, [r5, #0]
 800c242:	461a      	mov	r2, r3
 800c244:	f7f6 fa94 	bl	8002770 <_write>
 800c248:	1c43      	adds	r3, r0, #1
 800c24a:	d102      	bne.n	800c252 <_write_r+0x1e>
 800c24c:	682b      	ldr	r3, [r5, #0]
 800c24e:	b103      	cbz	r3, 800c252 <_write_r+0x1e>
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	bd38      	pop	{r3, r4, r5, pc}
 800c254:	200007e4 	.word	0x200007e4

0800c258 <_close_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	2300      	movs	r3, #0
 800c25c:	4d05      	ldr	r5, [pc, #20]	; (800c274 <_close_r+0x1c>)
 800c25e:	4604      	mov	r4, r0
 800c260:	4608      	mov	r0, r1
 800c262:	602b      	str	r3, [r5, #0]
 800c264:	f7f6 faa0 	bl	80027a8 <_close>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_close_r+0x1a>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_close_r+0x1a>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	200007e4 	.word	0x200007e4

0800c278 <_fstat_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	2300      	movs	r3, #0
 800c27c:	4d06      	ldr	r5, [pc, #24]	; (800c298 <_fstat_r+0x20>)
 800c27e:	4604      	mov	r4, r0
 800c280:	4608      	mov	r0, r1
 800c282:	4611      	mov	r1, r2
 800c284:	602b      	str	r3, [r5, #0]
 800c286:	f7f6 fa9a 	bl	80027be <_fstat>
 800c28a:	1c43      	adds	r3, r0, #1
 800c28c:	d102      	bne.n	800c294 <_fstat_r+0x1c>
 800c28e:	682b      	ldr	r3, [r5, #0]
 800c290:	b103      	cbz	r3, 800c294 <_fstat_r+0x1c>
 800c292:	6023      	str	r3, [r4, #0]
 800c294:	bd38      	pop	{r3, r4, r5, pc}
 800c296:	bf00      	nop
 800c298:	200007e4 	.word	0x200007e4

0800c29c <_isatty_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	2300      	movs	r3, #0
 800c2a0:	4d05      	ldr	r5, [pc, #20]	; (800c2b8 <_isatty_r+0x1c>)
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	4608      	mov	r0, r1
 800c2a6:	602b      	str	r3, [r5, #0]
 800c2a8:	f7f6 fa98 	bl	80027dc <_isatty>
 800c2ac:	1c43      	adds	r3, r0, #1
 800c2ae:	d102      	bne.n	800c2b6 <_isatty_r+0x1a>
 800c2b0:	682b      	ldr	r3, [r5, #0]
 800c2b2:	b103      	cbz	r3, 800c2b6 <_isatty_r+0x1a>
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	bd38      	pop	{r3, r4, r5, pc}
 800c2b8:	200007e4 	.word	0x200007e4

0800c2bc <_lseek_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	4604      	mov	r4, r0
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	4611      	mov	r1, r2
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	4d05      	ldr	r5, [pc, #20]	; (800c2dc <_lseek_r+0x20>)
 800c2c8:	602a      	str	r2, [r5, #0]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	f7f6 fa90 	bl	80027f0 <_lseek>
 800c2d0:	1c43      	adds	r3, r0, #1
 800c2d2:	d102      	bne.n	800c2da <_lseek_r+0x1e>
 800c2d4:	682b      	ldr	r3, [r5, #0]
 800c2d6:	b103      	cbz	r3, 800c2da <_lseek_r+0x1e>
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	bd38      	pop	{r3, r4, r5, pc}
 800c2dc:	200007e4 	.word	0x200007e4

0800c2e0 <_read_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	4608      	mov	r0, r1
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	4d05      	ldr	r5, [pc, #20]	; (800c300 <_read_r+0x20>)
 800c2ec:	602a      	str	r2, [r5, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f7f6 fa21 	bl	8002736 <_read>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_read_r+0x1e>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_read_r+0x1e>
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	200007e4 	.word	0x200007e4

0800c304 <_init>:
 800c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c306:	bf00      	nop
 800c308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c30a:	bc08      	pop	{r3}
 800c30c:	469e      	mov	lr, r3
 800c30e:	4770      	bx	lr

0800c310 <_fini>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	bf00      	nop
 800c314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c316:	bc08      	pop	{r3}
 800c318:	469e      	mov	lr, r3
 800c31a:	4770      	bx	lr
