/* USER CODE BEGIN Header */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "SHT31.h"
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct {
	double giaTriTinh_HienTai, giaTriTinh_Truoc, giaTriDieuKhien;
	double e, e1, e2, nhietDo, giaTriDat;
} PID_type;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define CHECKFLAG(FLAG, variable) (variable & FLAG ? 1 : 0)
#define SETFLAG(FLAG, variable) (variable |= (FLAG))
#define CLEARFLAG(FLAG, variable) (variable &= ~(FLAG))

#define FLAG_ENCODER_NEW_PULSE (1<<0)
#define FLAG_ENCODER_DIR_CW (1<<1)
#define FLAG_ENCODER_DIR_CCW (1<<2)
#define FLAG_ENCODER_DELAY_DONE (1<<3)
#define FLAG_ENCODER_HANDLE_DONE (1<<4)
#define FLAG_READ_TEMPERATURE (1<<5)
#define FLAG_ACDET_TRIGGER (1<<6)
#define FLAG_TIM_OVERFLOW (1 << 7)

#define ENCODER_DELAY_MS 10

#define KP 10
#define KI 0
#define KD 0
#define TG_LAY_MAU 0.1

#define SO_LAN_DO_SHT31 50
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

PCD_HandleTypeDef hpcd_USB_FS;

/* USER CODE BEGIN PV */
SHT31_type SHT31;

volatile uint8_t f_ACDET = 0, f_EnCBT = 0;

uint16_t giaTriCounter;

volatile uint16_t flag = 0;

PID_type triac = {0};

uint8_t str[50] = {0};

const char m7d[] = {0x7D, 0x11, 0xDC, 0xD5, 0xB1, 0xE5, 0xED, 0x51, 0xFD, 0xF5};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM4_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_PCD_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM4_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_USART3_UART_Init();
  MX_USB_PCD_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 72-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 1000-1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{

  /* USER CODE BEGIN USB_Init 0 */

  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led_test1_Pin|Led_test2_Pin|Led_test3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SER_Pin|OE_Pin|RLCK_Pin|SRCLK_Pin
                          |LORA_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIAC_Pin|SD_CS_Pin|LORA_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Led_test1_Pin Led_test2_Pin Led_test3_Pin */
  GPIO_InitStruct.Pin = Led_test1_Pin|Led_test2_Pin|Led_test3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : SER_Pin OE_Pin RLCK_Pin SRCLK_Pin */
  GPIO_InitStruct.Pin = SER_Pin|OE_Pin|RLCK_Pin|SRCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : ACDET_Pin */
  GPIO_InitStruct.Pin = ACDET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ACDET_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : TRIAC_Pin SD_CS_Pin LORA_RST_Pin */
  GPIO_InitStruct.Pin = TRIAC_Pin|SD_CS_Pin|LORA_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : SD_DET_Pin LORA_INT_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin|LORA_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : EnC_BT_Pin */
  GPIO_InitStruct.Pin = EnC_BT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(EnC_BT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LORA_CS_Pin */
  GPIO_InitStruct.Pin = LORA_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LORA_CS_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
//dùng nút nhấn trong encoder chuyển chế độ
//HAL_StatusTypeDef LayGiaTriDatTuEncoder(double *giaTriDat){
//	*giaTriDat = (double)(__HAL_TIM_GET_COUNTER(&htim2) / 4) / 10;
//	return HAL_OK;
//}
// đo nhiệt độ nhi ?u lần lấy giá trị trung bình
HAL_StatusTypeDef DoNhietDoThucTe(double *nhietDo){
	static uint8_t soLanDaDo = 0;
	static double tongNhietDo = 0;
	double layGiaTriNhietDo = 0;

	if(soLanDaDo < SO_LAN_DO_SHT31){
		SHT31_WriteCMD(&SHT31, SHT31_MEASUREMENT_FAST);
		SHT31_ReadTemperature(&SHT31, &layGiaTriNhietDo);
		tongNhietDo += layGiaTriNhietDo;
	}
	else{
		*nhietDo = tongNhietDo / SO_LAN_DO_SHT31;
		soLanDaDo = 0;
		tongNhietDo = 0;
		return HAL_OK;
	}
	soLanDaDo++;

	return HAL_BUSY;
}
// đưa dữ liệu để dịch ra
HAL_StatusTypeDef QuetLed7Doan(double giaTri){
	static uint32_t tg_delay = 0;
	static uint8_t task = 0;
	switch(task){
	case 0:
		DichDuLieu74595(m7d[((uint16_t)(giaTri * 10)) % 10]);
		if(HAL_GetTick() - tg_delay >= 1){
			tg_delay = HAL_GetTick();
			HAL_GPIO_WritePin(Led1_7seg_GPIO_Port, Led1_7seg_Pin, 0); // tắt led 1
			HAL_GPIO_WritePin(Led2_7seg_GPIO_Port, Led2_7seg_Pin, 1); // bật led 2
			HAL_GPIO_WritePin(Led3_7seg_GPIO_Port, Led3_7seg_Pin, 0); // tắt led 3
			task = 1;
		}
//		HAL_Delay(1);
		break;
	case 1:
		DichDuLieu74595(m7d[((uint16_t)giaTri) % 10] | 0x2);
		if(HAL_GetTick() - tg_delay >= 1){
			tg_delay = HAL_GetTick();
			HAL_GPIO_WritePin(Led1_7seg_GPIO_Port, Led1_7seg_Pin, 0); // tắt led 1
			HAL_GPIO_WritePin(Led2_7seg_GPIO_Port, Led2_7seg_Pin, 0); // tắt led 2
			HAL_GPIO_WritePin(Led3_7seg_GPIO_Port, Led3_7seg_Pin, 1); // tắt led 3
			task = 2;
		}
//		HAL_Delay(1);
		break;
	case 2:
		DichDuLieu74595(m7d[((uint16_t)giaTri) / 10]);
		if(HAL_GetTick() - tg_delay >= 1){
			tg_delay = HAL_GetTick();
			HAL_GPIO_WritePin(Led1_7seg_GPIO_Port, Led1_7seg_Pin, 1); // bật led 1
			HAL_GPIO_WritePin(Led2_7seg_GPIO_Port, Led2_7seg_Pin, 0); // tắt led 2
			HAL_GPIO_WritePin(Led3_7seg_GPIO_Port, Led3_7seg_Pin, 0); // tắt led 3
			task = 0;
		}
//		HAL_Delay(1);
		break;
	}

	return HAL_OK;
}
// dịch dữ liệu ra 595
HAL_StatusTypeDef DichDuLieu74595(uint8_t giaTri){
	//xuất bit cao nhất trước
	for (unsigned char i = 0; i < 8; i++) {
		HAL_GPIO_WritePin(SER_GPIO_Port, SER_Pin, (giaTri >> i) & 0x01);
		//nhịp 1 xung cạnh xuống đưa dữ liệu vào tầng lưu trữ
		HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, 0);
		HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, 1);
	}
	HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin, 0);
	HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin, 1);

	return HAL_OK;
}
//tính toán giá trị đi ?u khiển
HAL_StatusTypeDef TinhToanPID(PID_type *x){
	static double alpha, beta, gamma;

	x->e = x->giaTriDat - x->nhietDo;
	alpha = 2*TG_LAY_MAU*KP + KI*TG_LAY_MAU*TG_LAY_MAU + 2*KD;
	beta = TG_LAY_MAU*TG_LAY_MAU*KI - 4*KD -2*TG_LAY_MAU*KP;
	gamma = 2*KD;
	x->giaTriTinh_HienTai = (alpha*x->e + beta*x->e1 + gamma*x->e2 + 2*TG_LAY_MAU*x->giaTriTinh_Truoc)/(2*TG_LAY_MAU);

	x->giaTriTinh_Truoc = x->giaTriTinh_HienTai;
	x->e2 = x->e1;
	x->e1 = x->e;

	if (x->giaTriTinh_HienTai > 9)
		x->giaTriTinh_HienTai = 9;
	else if (x->giaTriTinh_HienTai <= 1)
		x->giaTriTinh_HienTai = 1;
	x->giaTriDieuKhien = 10.0 - x->giaTriTinh_HienTai; /***************/

	return HAL_OK;
}
//đi ?u khiển Triac
HAL_StatusTypeDef DieuKhienTriac(uint8_t giaTriDieuKhien){

	//!cần cách nào đó delay tới hàng microSecond
	//DÙNG 1 TIMER  ?Ể DELAY + 1 TIMER TẠO ONE PULSE MODE


	//1 cách nào đó để tạo xung kích DELAY
	//DELAY
	HAL_GPIO_WritePin(TRIAC_GPIO_Port, TRIAC_Pin, 1);
	HAL_Delay(1);
	HAL_GPIO_WritePin(TRIAC_GPIO_Port, TRIAC_Pin, 0);
	return HAL_OK;
}
double EncoderHandle()
{
	if(CHECKFLAG(FLAG_ENCODER_DELAY_DONE, flag)){
		CLEARFLAG(FLAG_ENCODER_DELAY_DONE, flag);
		if(CHECKFLAG(FLAG_ENCODER_DIR_CW, flag)&&
			!HAL_GPIO_ReadPin(ENC_CH1_GPIO_Port, ENC_CH1_Pin)) {
			giaTriCounter++;
		}
		else if(CHECKFLAG(FLAG_ENCODER_DIR_CCW, flag)&&
			!HAL_GPIO_ReadPin(ENC_CH1_GPIO_Port, ENC_CH1_Pin)){
			giaTriCounter--;
		}
		SETFLAG(FLAG_ENCODER_HANDLE_DONE, flag);
	}
	 return (double)giaTriCounter / (double)10;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if(htim->Instance == TIM4){
		static uint8_t delayCount=0;
		if(CHECKFLAG(FLAG_ENCODER_NEW_PULSE, flag)){
			delayCount++;
		}
		if(delayCount >= ENCODER_DELAY_MS){
			delayCount = 0;
			CLEARFLAG(FLAG_ENCODER_NEW_PULSE, flag);
			SETFLAG(FLAG_ENCODER_DELAY_DONE, flag);
		}
	}
	if(htim->Instance == TIM1){
			if(CHECKFLAG(FLAG_ACDET_TRIGGER, flag)){
				CLEARFLAG(FLAG_ACDET_TRIGGER, flag);
				SETFLAG(FLAG_TIM_OVERFLOW, flag);
			}
	}
}

//xử lý ngắt khi đ ?c nút nhấn và đ ?c ACDET
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == ACDET_Pin){
			SETFLAG(FLAG_ACDET_TRIGGER, flag);
			__HAL_TIM_SET_COUNTER(&htim1, (uint16_t)(triac.giaTriDieuKhien * 1000));
//			__HAL_TIM_SET_COUNTER(&htim1, 9000);
	}
//	else if(GPIO_Pin == EnC_BT_Pin){
//		f_EnCBT = 1;
//	}
	if(GPIO_Pin == ENC_CH1_Pin){
		if(CHECKFLAG(FLAG_ENCODER_HANDLE_DONE, flag)) {
			CLEARFLAG(FLAG_ENCODER_HANDLE_DONE, flag);
			SETFLAG(FLAG_ENCODER_NEW_PULSE, flag);
			if(HAL_GPIO_ReadPin(EnC_CH2_GPIO_Port, EnC_CH2_Pin)) {
				SETFLAG(FLAG_ENCODER_DIR_CW, flag);
				CLEARFLAG(FLAG_ENCODER_DIR_CCW, flag);
			}
			else {
				SETFLAG(FLAG_ENCODER_DIR_CCW, flag);
				CLEARFLAG(FLAG_ENCODER_DIR_CW, flag);
			}
		}

	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
